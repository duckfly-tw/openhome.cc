<!doctype html><html lang="zh-tw">
<head>
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="Component可以自己負責將物件資料編碼為HTML文件或其它的輸出文件，也可以將這個任務委託給 Renderer，這邊先介紹的是讓Component自己負責編碼的動作。

      

...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="編碼、解碼">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/JSF/EncodeDecode.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="Component可以自己負責將物件資料編碼為HTML文件或其它的輸出文件，也可以將這個任務委託給 Renderer，這邊先介紹的是讓Component自己負責編碼的動作。

      

...">


    <title>編碼、解碼</title>

<link rel="stylesheet" href="http://openhome.cc/Gossip/css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="http://openhome.cc/Gossip/css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="http://openhome.cc/Gossip/css/caterpillar.css">
     <script async src="http://openhome.cc/Gossip/google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="EncodeDecode.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon -->
        <span></span>
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="http://openhome.cc/Gossip/JSF/">回 JSF 目錄</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>編碼、解碼</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
            
      




Component可以自己負責將物件資料編碼為HTML文件或其它的輸出文件，也可以將這個任務委託給 Renderer，這邊先介紹的是讓Component自己負責編碼的動作。<br>

      <br>


這邊著重的是介紹完成自訂元件所必須的流程，所以我們不設計太複雜的元件，這邊將完成以下的元件，這個元件會有一個輸入文字欄位以及一個送出按鈕：<br>

      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/encodeDecode-1.jpg" /></div></div><br>

      <br>







您要繼承UIComponent或其子類別來自訂Component，由於文字欄位是一個輸入欄位，為了方便，您可以繼承UIInput類別，這可以讓您
省去一些處理細節的功夫，在繼承UIComponent或其子類別後，與編碼相關的主要有三個方法：<br>

      








      
      <ul>

        <li> encodeBegin()
  </li>

        <li> encodeChildren()
  </li>

        <li> encodeEnd()
  </li>

      
      </ul>


      <br>


其中encodeChildren()是在包括子元件時必須定義，Component如果它的
getRendersChildren()方法傳回true時會呼叫encodeChildren()方法，預設上，
getRendersChildren()方法傳回false。<br>

      <br>


由於我們的自訂元件相當簡單，所以將編碼的動作寫在encodeBegin()或是encodeEnd()都可以，我們這邊是定義encodeBegin ()方法：
      <br>


      
      <ul>

        <li> UITextWithCmd.java</li>

      
      </ul>






      
      <pre class="prettyprint"><code lang="java">package onlyfun.caterpillar;<br><br>import java.io.IOException;<br>import java.util.Map;<br>import javax.faces.component.UIInput;<br>import javax.faces.context.FacesContext;<br>import javax.faces.context.ResponseWriter;<br><br>public class UITextWithCmd extends UIInput {<br>    private static final String TEXT = ".text";<br>    private static final String CMD = ".cmd";<br>    <br>    public UITextWithCmd() {<br>        setRendererType(null);   <br>    }<br>    <br>    public void encodeBegin(FacesContext context) <br>                                      throws IOException {<br>        ResponseWriter writer = context.getResponseWriter();<br>        String clientId = getClientId(context);<br>        <br>        encodeTextField(writer, clientId);<br>        encodeCommand(writer, clientId);<br>    }<br>    <br>    public void decode(FacesContext context) {<br>        // .....<br>    }<br>    <br>    private void encodeTextField(ResponseWriter writer, <br>                        String clientId) throws IOException {<br>        writer.startElement("input", this);<br>        writer.writeAttribute("name", clientId + TEXT, null);<br>        <br>        Object value = getValue();<br>        if(value != null) {<br>            writer.writeAttribute("value", <br>                                  value.toString(), null);<br>        }<br>        <br>        String size = (String) getAttributes().get("size");<br>        if(size != null) {<br>            writer.writeAttribute("size", size, null);   <br>        }<br>        <br>        writer.endElement("input");<br>    }<br>    <br>    private void encodeCommand(ResponseWriter writer, <br>                        String clientId) throws IOException {<br>        writer.startElement("input", this);<br>        writer.writeAttribute("type", "submit", null);<br>        writer.writeAttribute("name", clientId + CMD, null);<br>        writer.writeAttribute("value", "submit", null);<br>        writer.endElement("input");<br>    }<br>}</code></pre>






      <br>

      
在encodeBegin()方法中，我們取得ResponseWriter物件，這個物件可以協助您輸出HTML標籤、屬性等，我們使用 getClientId()取得元件的id，這個id是每個元件的唯一識別，預設上如果您沒有指定，則JSF會自動為您產生id值。<br>

      <br>


接著我們分別對輸入文字欄位及送出鈕作HTML標籤輸出，在輸出時，我們將name屬性設成clientId與一個字串值的結合（即TEXT或CMD），這是為了方便在解碼時，取得對應name屬性的請求值。<br>

      <br>


在encodeTextField中我們有呼叫getValue()方法，這個方法是從UIOutput繼承下來的，getValue()
方法可以取得Component的設定值，這個值可能是靜態的屬性設定值，也可能是JSF
Expression的綁定值，預設會先從元件的屬性設定值開始找尋，如果找不到，再從綁定值（ValueBinding物件）中找尋，元件的屬性值或綁
定值的設定，是在定義Tag時要作的事。<br>

      <br>


編碥的部份總結來說，是取得Component的值並作適當的HTML標籤輸出，再來我們看看解碼的部份，這是定義在decode()方法中，將下面的內容加入至上面的類別定義中：<br>

      



      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;....</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; public void decode(FacesContext context) {</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Map reqParaMap = context.getExternalContext().</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
getRequestParameterMap();</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String clientId = getClientId(context);</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String submittedValue = </span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(String) reqParaMap.get(clientId + TEXT);</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setSubmittedValue(submittedValue);</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValid(true);</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; }</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;....</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br>


      </div>


      <br>


我們必須先取得RequestParameterMap，這個Map物件中填入了所有客戶端傳來的請求參數，
Component在這個方法中有機會查詢這些請求參數中，是否有自己所想要取得的資料，記得我們之前解碼時，是將輸入欄位的name屬性解碼為
client id加上一個字串值（即TEXT設定的值），所以這時，我們嘗試從RequestParameterMap中取得這個請求值。<br>

      <br>


取得請求值之後，您可以將資料藉由setSumittedValue()設定給綁定的bean，最後呼叫setValid()方法，這個方法設定為 true時，表示元件正確的獲得自己的值，沒有任何的錯誤發生。<br>

      <br>


由於我們先不使用Renderer，所以在建構函式中，我們設定RendererType為null，表示我們不使用Renderer進行解碼輸出：<br>

      


      
      <div style="margin-left: 40px; font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; public UITextWithCmd() {</span><br>


      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setRendererType(null);&nbsp;&nbsp; </span><br>


      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; }</span><br>


      </div>

      
&nbsp;<br>

      <br>


在我們的例子中，我們都是處理字串物件，所以這邊不需要轉換器，如果您需要使用轉換器，可以呼叫setConverter()方法加以設定，在不使用 Renderer的時候，Component要設定轉換器來自行進行字串與物件的轉換。
      <br>




<br><br><div class="ad336-280" style="text-align: center;"><script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="http://openhome.cc/Gossip/js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
