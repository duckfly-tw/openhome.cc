<!doctype html><html lang="zh-tw">
<head>
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="JSF支援事件處理模型，雖然由於HTTP本身無狀態（stateless）的特性，使得這個模型多少有些地方仍不太相同，但JSF所提供的事件處理模型已足以讓一些傳統GUI程式的設計人員，可以用類似的模型來...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="動作事件">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/JSF/ActionEvent.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="JSF支援事件處理模型，雖然由於HTTP本身無狀態（stateless）的特性，使得這個模型多少有些地方仍不太相同，但JSF所提供的事件處理模型已足以讓一些傳統GUI程式的設計人員，可以用類似的模型來...">


    <title>動作事件</title>

<link rel="stylesheet" href="http://openhome.cc/Gossip/css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="http://openhome.cc/Gossip/css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="http://openhome.cc/Gossip/css/caterpillar.css">
     <script async src="http://openhome.cc/Gossip/google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="ActionEvent.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon -->
        <span></span>
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="http://openhome.cc/Gossip/JSF/">回 JSF 目錄</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>動作事件</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
            
      





JSF支援事件處理模型，雖然由於HTTP本身無狀態（stateless）的特性，使得這個模型多少有些地方仍不太相同，但JSF所提供的事件處理模型已足以讓一些傳統GUI程式的設計人員，可以用類似的模型來開發程式。<br>

      <br>


在 <a href="SimpleNavigation.htm">簡單的導航</a> 中，我們根據動作方法（action
method）的結果來決定要導向的網頁，一個按鈕繫結至一個方法，這樣的作法實際上即使JSF所提供的簡化的事件處理程序，在按鈕上使用action繫
結至一個動作方法（action
method），實際上JSF會為其自動產生一個「預設的ActionListener」來處理事件，並根據其傳回值來決定導向的頁面。<br>

      <br>


如果您需要使用同一個方法來應付多種事件來源，並想要取得事件來源的相關訊息，您可以讓處理事件的方法接收一個 javax.faces.event.ActionEvent事件參數，例如：

      <br>







      
      <ul>

        <li>UserBean.java</li>

      
      </ul>












      
      <pre class="prettyprint"><code lang="java">package onlyfun.caterpillar;<br><br>import javax.faces.event.ActionEvent;<br><br>public class UserBean {<br>    private String name;<br>    private String password;<br>    private String errMessage;<br>    private String outcome;<br>   <br>    public void setName(String name) {<br>        this.name = name;<br>    }<br>   <br>    public String getName() {<br>        return name;<br>    }<br>   <br>    public void setPassword(String password) {<br>        this.password = password;<br>    }<br>   <br>    public String getPassword() {<br>        return password;<br>    }<br>   <br>    public void setErrMessage(String errMessage) {<br>        this.errMessage = errMessage;<br>    }<br>   <br>    public String getErrMessage() {<br>        return errMessage;<br>    }<br>   <br>    public void verify(ActionEvent e) {<br>        if(!name.equals("justin") ||<br>           !password.equals("123456")) {<br>            errMessage = "名稱或密碼錯誤" + e.getSource();<br>            outcome = "failure";<br>        }<br>        else {<br>            outcome = "success";<br>        }<br>    }<br><br>    public String outcome() {<br>        return outcome;<br>    }<br>}</code></pre>







      <br>

      
在上例中，我們讓verify方法接收一個ActionEvent物件，當使用者按下按鈕，會自動產生ActionEvent物件代表事件來源，我們故意在錯誤訊息之後如上事件來源的字串描述，這樣就可以在顯示錯誤訊息時一併顯示事件來源描述。<br>

      <br>


為了提供ActionEvent的存取能力，您的index.jsp可以改寫如下：
      <br>


      
      <ul>

        <li>index.jsp</li>

      
      </ul>


      
      <pre class="prettyprint"><code lang="java">&lt;%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %&gt;<br>&lt;%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %&gt;<br>&lt;%@page contentType="text/html;charset=Big5"%&gt; <br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;第一個JSF程式&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;f:view&gt;<br>        &lt;h:form&gt;<br>            &lt;h3&gt;請輸入您的名稱&lt;/h3&gt;<br>            &lt;h:outputText value="#{user.errMessage}"/&gt;&lt;p&gt;<br>           名稱: &lt;h:inputText value="#{user.name}"/&gt;&lt;p&gt;<br>           密碼: &lt;h:inputSecret value="#{user.password}"/&gt;&lt;p&gt; <br>            &lt;h:commandButton value="送出" <br>                            actionListener="#{user.verify}"<br>                            action="#{user.outcome}"/&gt;<br>        &lt;/h:form&gt;<br>    &lt;/f:view&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>


      <br>

      
主要改變的是按鈕上使用了actionListener屬性，這種方法可以使用一個ActionListener，JSF會先檢查是否有指定的
actionListener，然後再檢查是否指定了動作方法並產生預設的ActionListener，並根據其傳回值導航頁面。<br>

      <br>


如果您要註冊多個ActionListener，例如當使用者按下按鈕時，順便在記錄檔中增加一些記錄訊息，您可以實作 javax.faces.event.ActionListener，例如：<br>

      

      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;package onlyfun.caterpillar;</span><br>


      <br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;import javax.faces.event.ActionListener;</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;....</span><br>


      <br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;public class LogHandler implements ActionListener {</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; public void processAction(ActionEvent e) {</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 處理Log</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; }</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;}</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br>


      <br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;package onlyfun.caterpillar;</span><br>


      <br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;import javax.faces.event.ActionListener;</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;....</span><br>


      <br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;public class VerifyHandler implements ActionListener {</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; public void processAction(ActionEvent e) {</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 處理驗證</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp; }</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;}</span><br>


      </div>

      
&nbsp;<br>

      <br>


這麼一來，您就可以使用&lt;f:actionListener&gt;標籤向元件註冊事件，例如：<br>

      

      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&lt;h:commandButton value="送出" action="#{user.outcome}"&gt;</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; &lt;f:actionListener type="onlyfun.caterpillar.LogHandler"/&gt;</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; &lt;f:actionListener type="onlyfun.caterpillar.VerifyHandler"/&gt;</span><br>


      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&lt;/h:commandButton&gt;</span><br>


      </div>

      
&nbsp;<br>

      <br>


&lt;f:actionListener&gt;會自動產生type所指定的物件，並呼叫元件的addActionListener()方法註冊 Listener。
      



<br><br><div class="ad336-280" style="text-align: center;"><script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="http://openhome.cc/Gossip/js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
