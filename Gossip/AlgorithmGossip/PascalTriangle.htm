<!DOCTYPE html>
<html lang="zh-tw">
  <head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/basics/pascal-triangle/'">
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="巴斯卡（Pascal）三角形基本上就是在解 rCn ，因為三角形上的每一個數字各對應一個rCn，其中 r 為 row，而 n 為 column，如下：
　　　　0C0...">
    <meta property="og:locale" content="zh_TW">
    <meta property="og:title" content="巴斯卡三角形">
    <meta property="og:type" content="article">
    <meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/PascalTriangle.htm">
    <meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
    <meta property="og:site_name" content="OPENHOME.CC">
    <meta property="og:description" content="巴斯卡（Pascal）三角形基本上就是在解 rCn ，因為三角形上的每一個數字各對應一個rCn，其中 r 為 row，而 n 為 column，如下：
　　　　0C0...">
    <title>巴斯卡三角形</title>
    <link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">
    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">    <![endif]-->
    <!--[if gt IE 8]><!-->
    <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
    <link rel="stylesheet" href="../css/caterpillar.css">
    <script async="" src="../google-code-prettify/run_prettify.js"></script>
    <!-- 網頁層級廣告 -->
    <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script>
  </head>
  <body>
    <div id="layout">
      <!-- Menu toggle --> <a href="PascalTriangle.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span> </a>
      <div id="menu">
        <div class="pure-menu"> <a class="pure-menu-heading" href="index.html">回
            Algorithm</a>
          <ul class="pure-menu-list">
            <br>
            <div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img
                  title="Twitter" alt="Twitter" src="../images/twitter.png"></a>
              <a href="http://www.facebook.com/openhome.cc"><img title="Facebook"
                  alt="Facebook" src="../images/facebook.png"></a>
              </div>
            <br>
            <div id="search box">
              <script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div>
            <br>
            <div class="ad" style="text-align: center;">
              <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
              <!-- 2015 新版型 160 x 600 廣告 --> <ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px"
                data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883"></ins>
              <script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
          </ul>
        </div>
      </div>
      <main id="main">
        <header class="header">
          <h1>巴斯卡三角形</h1>
        </header>
        <article class="content"><br>
          <div class="ad-3" style="text-align: center;">
            <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins
              class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390"
              data-ad-slot="7104125683" data-ad-format="auto"></ins>
            <script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>
          巴斯卡（Pascal）三角形基本上就是在解 rCn ，因為三角形上的每一個數字各對應一個rCn，其中 r 為 row，而 n 為
          column，如下：<br>
          　　　　<sub>0</sub>C<sub>0</sub><br>
          　　　<sub>1</sub>C<sub>0</sub> <sub>1</sub>C<sub>1</sub><br>
          　　<sub>2</sub>C<sub>0</sub> <sub>2</sub>C<sub>1</sub> <sub>2</sub>C<sub>2</sub><br>
          　<sub>3</sub>C<sub>0</sub> <sub>3</sub>C<sub>1</sub> <sub>3</sub>C<sub>2</sub>
          <sub>3</sub>C<sub>3</sub><br>
          <sub>4</sub>C<sub>0</sub> <sub>4</sub>C<sub>1</sub> <sub>4</sub>C<sub>2</sub>
          <sub>4</sub>C<sub>3</sub> <sub>4</sub>C<sub>4</sub><br>
          <br>
          對應的數據如下圖所示： <br>
          <div style="text-align: center;">
            <div class="pure-g">
              <div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/pascal.png"></div>
            </div>
            <br>
            <br>
            <div style="text-align: left;">
              <h2>&nbsp;解法</h2>
            </div>
            <br>
            <div style="text-align: left;">巴斯卡三角形中的 rCn
              可以使用以下這個公式來計算，以避免階乘運算時的數值溢位：<br>
              <div style="margin-left: 40px; font-weight: bold; font-family: Courier New,Courier,monospace;"><sub>r</sub>C<sub>0</sub>
                = 1<br>
                <sub>r</sub>C<sub>n</sub> = <sub>r</sub>C<sub>n-1</sub> * (r -
                n + 1) / n<br>
              </div>
            </div>
          </div>
          <br>
          <h2> 演算法</h2>
          <br>
          <pre class="prettyprint"><code>/* 計算nCr，但是並不快，只是方便 */<br>Procedure COMBI(r, n) <br>    FOR(i = 1; i &lt;= n; i = i + 1)<br>        p = p * (r - i + 1) / i<br>    RETURN p<br></code></pre>
          <br>
          解決 rCn 的算法之後，剩下的就是如何將這些數字排版成三角形的問題了，這就要看您是如何顯示成果的了。
          <h2> 實作：<a href="PascalTriangle.htm#Toy">Toy</a>&nbsp;&nbsp; &nbsp;<a href="PascalTriangle.htm#C">C</a>&nbsp;&nbsp;
            &nbsp;<a href="PascalTriangle.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="PascalTriangle.htm#Python">Python</a>&nbsp;&nbsp;
            &nbsp;<a href="PascalTriangle.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="PascalTriangle.htm#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp;
            <a href="PascalTriangle.htm#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="PascalTriangle.htm#Haskell">Haskell</a>&nbsp;&nbsp;&nbsp;
            <a href="PascalTriangle.htm#Prolog">Prolog</a><br>
          </h2>
          <ul>
            <li><a name="Toy"></a><a href="../Toy/index.html">Toy</a>
            </li>
          </ul>
          <pre class="prettyprint"><code>def combi(r, n) {
    if n == 0 {
        return 1
    }
    return combi(r, n - 1) * (r - n + 1) / n
}

def space(n) {
    return List.create(n, '').join(' ')
}

HEIGHT = 12

def printRow(row) {
    def printNumber(n) {
        c = combi(row, n) + ''
        print(c + space(6 - c.length()))
    }

    print(space((HEIGHT- row) * 3)) # indentation
    iterate(0, row + 1).forEach(printNumber)
    println()
}

iterate(0, HEIGHT).forEach(printRow)
</code></pre>
          <br>
          <ul>
            <li><a name="C">C</a> </li>
          </ul>
          <pre class="prettyprint"><code>#include &lt;stdio.h&gt;<br>#define HEIGHT 12<br><br>int combi(int r, int n){<br>    int p = 1;<br>    int i;<br>    for(i = 1; i &lt;= n; i++) {<br>        p = p * (r - i + 1) / i;<br>    }<br>    return p;<br>}<br><br>int main() {<br>    int r;<br>    for(r = 0; r &lt; HEIGHT; r++) {<br>        char format[5];            <br>        sprintf(format, "%%%ds", (HEIGHT - r) * 3);<br>        printf(format, "");<br>        int n;<br>        for(n = 0; n &lt;= r; n++) {<br>            printf("%6d", combi(r, n));<br>        }<br>        printf("\n");<br>    }<br>    return 0;<br>} <br></code></pre>
          <br>
          <ul>
            <li><a name="Java">Java</a> </li>
          </ul>
          <pre class="prettyprint"><code>import static java.lang.System.out;<br>import java.util.*;<br><br>public class Pascal {<br>    private List&lt;List&lt;Integer&gt;&gt; rows = new ArrayList&lt;&gt;();<br>    <br>    Pascal(int height) {<br>        for(int r = 0; r &lt; height; r++) {<br>            rows.add(createRow(r));<br>        }<br>    }<br>    <br>    int combi(int r, int n) {<br>        return rows.get(r).get(n);<br>    }<br>    <br>    private List&lt;Integer&gt; createRow(int r){<br>        List&lt;Integer&gt; row = new ArrayList&lt;&gt;();<br>        row.add(1);<br>        for(int n = 1; n &lt;= r; n++) {<br>            row.add(row.get(n - 1) * (r - n + 1) / n);<br>        }<br>        return row;<br>    }<br>    <br>    public static void main(String[] args) {<br>        final int HEIGHT = 12;<br>        Pascal p = new Pascal(HEIGHT);<br>        for(int r = 0; r &lt; HEIGHT; r++) {<br>            out.printf(String.format("%%%ds", (HEIGHT - r) * 3), "");<br>            for(int n = 0; n &lt;= r; n++) {<br>                out.printf("%6d", p.combi(r, n));<br>            }<br>            out.println();<br>        }<br>    }<br>}<br></code></pre>
          <br>
          <ul>
            <li><a name="Python">Python</a></li>
          </ul>
          <pre class="prettyprint"><code>def combi(r, n):<br>    return 1 if n == 0 else combi(r, n - 1) * (r - n + 1) // n<br>	<br>height = 12<br>c = [[combi(r, n) for n in range(r + 1)] for r in range(height)]<br> <br>for r in range(len(c)):<br>    print(("%" + str((len(c) - r) * 3) + "s") % "", end = "")<br>    for n in range(len(c[r])):<br>	    print("%6d" % c[r][n], end = "");<br>    print()</code></pre>
          <br>
          <ul>
            <li><a name="Scala">Scala</a></li>
          </ul>
          <pre class="prettyprint"><code>def combi(r: Int, n: Int): Int = n match {<br>    case 0 =&gt; 1<br>    case _ =&gt; combi(r, n - 1) * (r - n + 1) / n<br>}<br><br>val height = 12<br>val c = for(r &lt;- 0 until height) yield for(n &lt;- 0 to r) yield combi(r, n)<br><br>(0 until c.length).foreach(r =&gt; {<br>    printf("%%%ds".format((c.length - r) * 3), "")<br>    c(r).foreach(printf("%6d", _))<br>    println<br>})<br></code></pre>
          <br>
          <ul>
            <li><a name="Ruby">Ruby</a></li>
          </ul>
          <pre class="prettyprint"><code>def combi(r, n)<br>    return 1 if n == 0; combi(r, n - 1) * (r - n + 1) / n<br>end<br><br>height = 12<br>0.upto(height - 1) do |r|<br>    printf "%" + ((height - r) * 3).to_s + "s", ""<br>    0.upto(r) do |n|<br>       printf "%6d", combi(r, n)<br>    end<br>    puts<br>end<br></code></pre>
          <br>
          <ul>
            <li><a name="JavaScript">JavaScript</a></li>
          </ul>
          <pre class="prettyprint"><code>function combi(r, n) {<br>    if(n == 0) return 1;<br>    else return combi(r, n - 1) * (r - n + 1) / n;<br>}<br><br>var height = 12;<br>var pascal = '';<br>for(var r = 0; r &lt; height; r++) {<br>    pascal += new Array((height - r) * 3).join(' ');<br>    for(var n = 0; n &lt;=r; n++) {<br>        var c = combi(r, n);<br>        pascal += new Array(6 - (c + '').length).join(' ') + c;<br>    }<br>    pascal += '\n';<br>}<br>print(pascal);<br></code></pre>
          <br>
          <ul>
            <li><a name="Haskell">Haskell</a></li>
          </ul>
          <pre class="prettyprint"><code>import Control.Monad<br>import Text.Printf<br><br>combi _ 0 = 1<br>combi r n = combi r (n - 1) * (r - n + 1) `div` n<br><br>main = do<br>    let height = 12<br>    forM [0..height - 1] (\r -&gt; do<br>        putStr \$ take ((height - r) * 3) \$ cycle " "<br>        sequence [printf "%6d" (combi r n) | n &lt;- [0..r]]<br>        putStrLn "")<br></code></pre>
          <br>
          <ul>
            <li> <a id="Prolog">Prolog</a></li>
          </ul>
          <p> </p>
          <pre class="prettyprint"><code>combi(_, 0, 1).
combi(ROW, COL, Result) :- NCOL is COL - 1,
                           combi(ROW, NCOL, NR),
                           Result is (NR * (ROW - COL + 1) / COL).

pascal_row(_, 0) :- writef("%d ", [1]).
pascal_row(ROW, COL) :- combi(ROW, COL, Result),
                        writef("%d ", [Result]),
                        NCOL is COL - 1,
                        pascal_row(ROW, NCOL).

pascal(0) :- pascal_row(_, 0).
pascal(ROWS) :- pascal_row(ROWS, ROWS),
                nl,
                NROWS is ROWS - 1,
                pascal(NROWS).
  
main([Arg0|_]) :-
        atom_number(Arg0, N),
        pascal(N).<br></code></pre>
          <br>
          <div class="ad336-280" style="text-align: center;">
            <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins
              class="adsbygoogle" style="display:inline-block;width:336px;height:280px"
              data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins>
            <script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>
          <br>
          <div class="recommend" style="text-align: center;">
            <hr>
            <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins
              class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390"
              data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins>
            <script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>
        </article>
      </main>
    </div>
    <script src="../js/ui.js"></script>
    <div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
  </body>
</html>
