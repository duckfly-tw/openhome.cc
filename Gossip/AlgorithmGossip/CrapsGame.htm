<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/randomness/craps/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明

      
一個簡單的賭博遊戲，遊戲規則如下：玩家擲兩個骰子，點數為1到6，如果第一次點數和為7或11，則玩家勝，如果點數和為2、3或12，則玩家輸，如果和
為其它點數，則記錄第一次...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="Craps賭博遊戲">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/CrapsGame.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明

      
一個簡單的賭博遊戲，遊戲規則如下：玩家擲兩個骰子，點數為1到6，如果第一次點數和為7或11，則玩家勝，如果點數和為2、3或12，則玩家輸，如果和
為其它點數，則記錄第一次...">


    <title>Craps賭博遊戲</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="CrapsGame.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>Craps賭博遊戲</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             




      
      <h2>說明</h2>

      
一個簡單的賭博遊戲，遊戲規則如下：玩家擲兩個骰子，點數為1到6，如果第一次點數和為7或11，則玩家勝，如果點數和為2、3或12，則玩家輸，如果和
為其它點數，則記錄第一次的點數和，然後繼續擲骰，直至點數和等於第一次擲出的點數和，則玩家勝，如果在這之前擲出了點數和為7，則玩家輸。<br>


      
      <h2>解法</h2>

      
規則看來有些複雜，這是一個遊戲嗎？不！這是兩個遊戲，第一個遊戲規則是事先設定好輸贏點數，第二個遊戲規則是要指定贏的點數（由玩家擲出），分別對這兩
個遊戲的規則撰寫函式，就可避免看似複雜的switch、if等條件判斷（如 C 到 JavaScript 的實作所示）。<br>
      <br>
不過就流程來說，主要就是擲骰、使用規則判斷、顯示輸贏或繼續。規則判斷是一種策略，因此可使用回呼函式或物件傳入，遊戲流程就可當作可重用樣版了（如 Haskell 的實作所示）。


      
      <h2>實作：<a href="CrapsGame.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="CrapsGame.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="CrapsGame.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="CrapsGame.htm#Scala">Scala&nbsp;</a>&nbsp;&nbsp; <a href="CrapsGame.htm#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="CrapsGame.htm#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="CrapsGame.htm#Haskell">Haskell</a><br>
      </h2>


      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>



      
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;time.h&gt;<br>#define LOST 0<br>#define WON 1<br>#define CONTINUE 2<br><br>int dice();<br>int initialRoll(int);<br>int reRoll(int, int);<br><br>int main(void) {<br>    srand(time(0));<br>    <br>    int firstPoint = dice();<br>    printf("玩家點數：[%d]\n", firstPoint);<br>    <br>    int status = initialRoll(firstPoint);<br>    while(status == CONTINUE) {<br>        int point = dice();<br>        printf("玩家點數：%d\n", point);<br>        status = reRoll(firstPoint, point);<br>    } <br><br>    puts(status == WON ? "玩家勝" : "玩家輸");<br><br>    return 0;<br>} <br><br>int dice() { <br>    return (rand() % 6) + (rand() % 6) + 2;<br>}<br><br>int initialRoll(int firstPoint) {<br>    switch(firstPoint) {<br>       case 7: case 11:         return WON;<br>       case 2: case 3: case 12: return LOST;<br>       default:                 return CONTINUE;<br>    }<br>}<br><br>int reRoll(int firstPoint, int point) {<br>    return firstPoint == point ? WON : (7 == point ? LOST : CONTINUE);<br>}<br></code></pre>



      <br>



      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>



      
      <pre class="prettyprint"><code>import static java.lang.Math.random;<br>import static java.lang.System.out;<br><br>enum Status { WON, LOST, CONTINUE }<br><br>public class Craps {<br>    public static int dice() { <br>        return (int)(random() * 6) + (int)(random() * 6) + 2;<br>    }<br><br>    public static Status initialRoll(int firstPoint) {<br>        switch(firstPoint) {<br>            case 7: case 11:         return Status.WON;<br>            case 2: case 3: case 12: return Status.LOST;<br>            default:                 return Status.CONTINUE;<br>        }<br>    }<br><br>    public static Status reRoll(int firstPoint, int point) {<br>        return firstPoint == point ? Status.WON :<br>                   (7 == point ? Status.LOST : Status.CONTINUE);<br>    }<br>    <br>    public static void main(String[] args) {<br>        int firstPoint = dice();<br>        out.printf("玩家點數：[%d]%n", firstPoint);<br><br>        Status status = initialRoll(firstPoint);<br> <br>        while(status == Status.CONTINUE) {<br>            int point = dice();<br>            out.printf("玩家點數：%d%n", point);<br>            status = reRoll(firstPoint, point);<br>        } <br><br>        out.println(status == Status.WON ? "玩家勝" : "玩家輸");<br>    }<br>}<br></code></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>from random import randint<br><br>class Status:<br>    LOST = 0<br>    WON = 1<br>    CONTINUE = 2<br>    <br>def initialRoll(firstPoint):<br>    return Status.WON if firstPoint in [7, 11] else \<br>    (Status.LOST if firstPoint in [2, 3, 12] else Status.CONTINUE)<br><br>def reRoll(firstPoint, point):<br>    return Status.WON if firstPoint == point else \<br>    (Status.LOST if 7 == point else Status.CONTINUE)<br><br>def dice():<br>    return randint(1, 6) + randint(1, 6)<br><br>firstPoint = dice()<br>print("玩家點數：[%d]" % firstPoint)<br>status = initialRoll(firstPoint)<br><br>while status == Status.CONTINUE:<br>    point = dice()<br>    print("玩家點數：%d" % point)<br>    status = reRoll(firstPoint, point)<br><br>print("玩家勝" if status == Status.WON else "玩家輸")<br></code></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>import scala.util.Random<br><br>object Status extends Enumeration {<br>    val LOST, WON, CONTINUE = Value<br>}<br>    <br>def dice = {<br>    val r = new Random<br>    (r.nextDouble * 6).toInt + (r.nextDouble * 6).toInt + 2<br>}<br>    <br>def initialRoll(firstPoint: Int) = firstPoint match {<br>    case 7 | 11     =&gt; Status.WON<br>    case 2 | 3 | 12 =&gt; Status.LOST<br>    case _          =&gt; Status.CONTINUE<br>}<br><br>def reRoll(firstPoint: Int, point: Int) = {<br>    if(firstPoint == point) Status.WON else<br>    (if(7 == point) Status.LOST else Status.CONTINUE)<br>}<br><br>def doWhile(status: Status.Value) {<br>    if(status == Status.CONTINUE) {<br>        val point = dice<br>        printf("玩家點數：%d%n", point)<br>        doWhile(reRoll(firstPoint, point))<br>    }<br>}<br><br>val firstPoint = dice<br>printf("玩家點數：[%d]%n", firstPoint)<br>var status = initialRoll(firstPoint)<br><br>while(status == Status.CONTINUE) {<br>    val point = dice<br>    printf("玩家點數：%d%n", point)<br>    status = reRoll(firstPoint, point)<br>}<br><br>println(if(status == Status.WON) "玩家勝" else "玩家輸")</code></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre class="prettyprint"><code># encoding: Big5<br><br>class Status<br>    LOST = 0<br>    WON = 1<br>    CONTINUE = 2<br>end<br>    <br>def initialRoll(firstPoint)<br>    case firstPoint<br>        when 7, 11;     Status::WON<br>        when 2, 3, 12;  Status::LOST<br>        else;           Status::CONTINUE<br>    end<br>end<br><br>def reRoll(firstPoint, point)<br>    firstPoint == point ? Status::WON : <br>    (7 == point ? Status::LOST : Status::CONTINUE)<br>end<br><br>def dice<br>    (rand * 6).to_i + (rand * 6).to_i + 2<br>end<br>    <br>firstPoint = dice<br>puts("玩家點數：[#{firstPoint}]")<br>status = initialRoll(firstPoint)<br><br>while status == Status::CONTINUE<br>    point = dice<br>    puts("玩家點數：#{point}")<br>    status = reRoll(firstPoint, point)<br>end<br><br>puts(status == Status::WON ? "玩家勝" : "玩家輸")<br></code></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre class="prettyprint"><code>var Status = {<br>    LOST     : 0,<br>    WON      : 1,<br>    CONTINUE : 2<br>};<br><br>function dice() {<br>    return parseInt(Math.random() * 6) + parseInt(Math.random() * 6) + 2;<br>}<br><br>function initialRoll(firstPoint) {<br>    switch(firstPoint) {<br>        case 7: case 11:         return 0;<br>        case 2: case 3: case 12: return 1;<br>        default:                 return 2;<br>    }<br>    return 3;<br>}<br><br>function reRoll(firstPoint, point) {<br>    return firstPoint === point ? Status.WON :<br>           (7 === point ? Status.LOST : Status.CONTINUE);<br>}<br><br>var firstPoint = dice();<br>print("玩家點數：[" + firstPoint + "]");<br>var sts = initialRoll(firstPoint);<br><br>while(sts === Status.CONTINUE) {<br>    var point = dice();<br>    print("玩家點數：" + point);<br>    sts = reRoll(firstPoint, point);<br>} <br><br>print(sts === Status.WON ? "玩家勝" : "玩家輸");<br></code></pre>
      <br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre class="prettyprint"><code>import Data.List<br>import System.Random<br><br>data Status = Won | Lost | Continue deriving (Eq)<br>    <br>initialRoll firstPoint =<br>    if firstPoint `elem` [7, 11] then Won <br>    else if firstPoint `elem` [2, 3, 12] then Lost<br>         else Continue<br><br>reRoll firstPoint point =<br>    if firstPoint == point then Won<br>    else if 7 == point then Lost <br>         else Continue<br>         <br>diceLt gen = randomRs (1, 6) gen::[Int]<br><br>craps roll firstPoint diceLt1 diceLt2 = do<br>    let point = (head diceLt1) + (head diceLt2)<br>        status = roll point<br>    putStrLn \$ "Point:" ++ show point<br>    if status == Continue then <br>        craps r2 firstPoint (tail diceLt1) (tail diceLt2)<br>    else <br>        putStrLn (if status == Won then "Won" else "Lost")<br>    where r2 = \point -&gt; reRoll firstPoint point<br>    <br>main = do<br>    gen1 &lt;- getStdGen<br>    gen2 &lt;- newStdGen<br>    let diceLt1 = diceLt gen1<br>        diceLt2 = diceLt gen2<br>    craps r1 ((head diceLt1) + (head diceLt2)) diceLt1 diceLt2<br>    where r1 = \firstPoint -&gt; initialRoll firstPoint<br></code></pre>
<br>


<br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
