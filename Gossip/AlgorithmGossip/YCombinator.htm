<!DOCTYPE html>
<html lang="zh-tw">
  <head>
    <meta content="text/html; charset=utf-8" http-equiv="content-type">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="會想要寫這個主題，主要是由於 聽說是某天很夯的 fibonacci number XD 討論中，談到了 Y Combinator，我試著用 Python 實現了一個，過程中有些想法...">
    <meta property="og:locale" content="zh_TW">
    <meta property="og:title" content="Y Combinator">
    <meta property="og:type" content="article">
    <meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/YCombinator.htm">
    <meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
    <meta property="og:site_name" content="OPENHOME.CC">
    <meta property="og:description" content="會想要寫這個主題，主要是由於 聽說是某天很夯的 fibonacci number XD 討論中，談到了 Y Combinator，我試著用 Python 實現了一個，過程中有些想法...">
    <title>Y Combinator</title>
    <link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">
    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">    <![endif]-->
    <!--[if gt IE 8]><!-->
    <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
    <link rel="stylesheet" href="../css/caterpillar.css">
    <script async src="../google-code-prettify/run_prettify.js"></script>
  <!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
  <body>
    <div id="layout">
      <!-- Menu toggle --> <a href="YCombinator.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>  </a>
      <div id="menu">
        <div class="pure-menu"> <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
          <ul class="pure-menu-list">
            <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br>
              <div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;">
                <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
                <!-- 2015 新版型 160 x 600 廣告 -->
                <ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px"
                  data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883"></ins>
                <script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
          </ul>
        </div>
      </div>
      <main id="main">
        <header class="header">
          <h1>Y Combinator</h1>
        </header>
        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>  會想要寫這個主題，主要是由於&nbsp;<a href="http://www.codedata.com.tw/forum/viewthread.php?tid=144&amp;extra=page%3D1">聽說是某天很夯的 fibonacci number XD</a>&nbsp;討論中，談到了&nbsp;Y Combinator，我試著用 Python 實現了一個，過程中有些想法，想要略做記錄一下。有關於 Fixed Point 與 Y Combinator 的推導，可以先參考 <a
            href="https://www.byvoid.com/upload/fl/images/FP/FP.pdf">〈函数式编程 - FUNCTIONAL PROGRAMMING〉</a>，如果你不想花太多時間看推導，那就來看看接下來的 Python 程式碼實作，從中瞭解如何實作&nbsp;Y Combinator。
          <br>
          <br>
          先來個簡單的開始，如何用遞迴寫個計算階乘的函式？
          <pre class="prettyprint"><code lang="python">def fact(n):
    return 1 if(n &lt; 2) else n * fact(n - 1)</code></pre>
          這樣是定義一個 <code>fact</code> 函式，現在要求用 <code>lambda</code> 來實現，那麼你可以寫成 <code>fact = lambda n: 1 if(n &lt; 2) else n * fact(n - 1)</code>，接下來要求必須是完全匿名，只寫 <code>lambda n: 1 if(n &lt; 2) else n * fact(n - 1)</code> 顯然是不行的，因為 <code>fact</code> 沒有定義，怎麼辦呢？那就再來層 <code>lambda</code>：
          <pre class="prettyprint"><code lang="python">lambda fact: lambda n: 1 if n &lt; 2 else n * fact(n - 1)</code></pre>
          這個 <code>lambda</code> 就合法了，只是想執行這個 <code>lambda</code> 時怎麼辦？<strong>誰來給這個 <code>lambda</code> 一個真正的遞迴函式，以便讓 <code>fact</code> 參數可以參考？</strong>透過一些巧妙的結合，其實有辦法產生一個真正的遞迴函式，而且是匿名的。
          <br>
          <br>
          在 <a href="http://www.codedata.com.tw/forum/viewthread.php?tid=144&amp;extra=page%3D1">聽說是某天很夯的 fibonacci number XD</a> 中就完成了讓&nbsp;<code>lambda n, fib: n if(n == 0 or n == 1) else fib(n - 1, fib) + fib(n - 2, fib)</code>&nbsp;可遞迴的實現，那時沒想太多，因而選擇了讓 <code>fib</code> 的第二個參數又帶入了匿名函式，如果現在打算也找出個函式，可以給 <code>lambda fib: lambda n: n if(n == 0 or n == 1) else fib(n - 1) + fib(n - 2)</code> 一個真正的遞迴函式，以便讓 <code>fib</code> 參數可以參考，那也是有可能的。
          <span style="color: #ff0000;"><strong><br>
              <br>
              不過，階乘與費式數這兩個需求下的函式有沒有可能是同一個？</strong></span>也許是吧！總之，先來看看階乘時會需要的函式是什麼，假設定義為 <code>y</code> 好了：
          <pre class="prettyprint"><code lang="python">def y(f):
    # 假設存在一個 fact
    return f(fact)</code></pre>
          因為 <code>f(fact)(n)</code> 就可以得到階乘結果，那麼傳回 <code>lambda n: f(fact)(n)</code> 不就是階乘函式？可是 <code>fact</code> 變數還是沒解決啊？那就 ...
          <pre class="prettyprint"><code lang="python">def y(f):
    fact = lambda n: f(fact)(n)
    return f(fact)</code></pre>
          <span style="color: #ff0000;"><strong>很取巧對吧！只是把變數 <code>fact</code> 藏到 <code>y</code> 裏頭而已，這樣算什麼呢？<code>y</code> 函式有沒有辦法全部用匿名函式實現？</strong></span>假設有個 <code>get_f</code> 能做到這點，那麼就可以變成這樣：
          <pre class="prettyprint"><code lang="python">def y(f):
    def get_f():
        # 假設都用匿名函式實現 ...
    return get_f()</code></pre>
          實際上，<code>get_f</code> 看來又像個騙子，只是把問題藏到裏頭而已：
          <pre class="prettyprint"><code lang="python">def y(f):
    def get_f():
        fact = lambda n: f(fact)(n)
        return f(fact)
    return get_f()</code></pre>
          要騙就騙到底好了，既然 <code>f(fact)</code> 就是 <code>get_f()</code> 的傳回結果，那麼就改成這樣：
          <pre class="prettyprint"><code lang="python">def y(f):
    def get_f():
        fact = lambda n: get_f()(n)
        return f(fact)
    return get_f()</code></pre>
          咦？好像不用 <code>fact</code> 變數了，那就改成這樣：
          <pre class="prettyprint"><code lang="python">def y(f):
    def get_f():
        return f(lambda n: get_f()(n))
    return get_f()</code></pre>
          只不過，<code>get_f</code> 依舊是個具名的遞迴函式，<strong>這樣下去沒完沒了的，假設 <code>get_f</code> 函式有個 <code>get_f</code>&nbsp;參數，那麼就可以把傳進來的參數再傳給自己</strong>，就像實現 <a
            href="http://www.codedata.com.tw/forum/viewthread.php?tid=144&amp;extra=page%3D1">聽說是某天很夯的 fibonacci number XD</a> 時的 <code>lambda n, fib: n if(n == 0 or n == 1) else fib(n - 1, fib) + fib(n - 2, fib)</code>：
          <pre class="prettyprint"><code lang="python">...
    def get_f(get_f):
        return f(lambda n: get_f(get_f)(n))
...</code></pre>
          那麼原先的 <code>y</code> 實作就可以改為：
          <pre class="prettyprint"><code lang="python">def y(f):
    def get_f(get_f):
        return f(lambda n: get_f(get_f)(n))
    return get_f(get_f)</code></pre>
          然後改為 <code>lambda</code> 版本：
          <pre class="prettyprint"><code lang="python">def y(f):
    get_f = lambda get_f: f(lambda n: get_f(get_f)(n))
    return get_f(get_f)</code></pre>
          既然 <code>get_f = lambda get_f: f(lambda n: get_f(get_f)(n))</code>，那麼 <code>return</code> 前 <code>get_f</code> 變數就可以替代為：
          <pre class="prettyprint"><code lang="python">def y(f):
    get_f = lambda get_f: f(lambda n: get_f(get_f)(n))
    return (lambda get_f: f(lambda n: get_f(get_f)(n)))(lambda get_f: f(lambda n: get_f(get_f)(n)))</code></pre>
          既然如此，那 <code>get_f</code> 變數就可以不用了：
          <pre class="prettyprint"><code lang="python">def y(f):
    return (lambda get_f: f(lambda n: get_f(get_f)(n)))(lambda get_f: f(lambda n: get_f(get_f)(n)))</code></pre>
          咦？沒有變數了？只剩下參數 <code>get_f</code> 了？名稱有點長，改成 <code>x</code> 好了，順便也把 <code>y</code> 改成接受<code>lambda</code>
          <pre class="prettyprint"><code lang="python">y = lambda f: (lambda x: f(lambda n: x(x)(n)))(lambda x: f(lambda n: x(x)(n)))</code></pre>
          這就是我們想要的了，<code>y</code> 的實現全都是匿名函式！你可以這麼使用它來產生一個可遞迴的階乘函式：
          <pre class="prettyprint"><code lang="python">y(lambda fact: lambda n: 1 if n &lt; 2 else n * fact(n - 1))(5) # 120</code></pre>
          要不要自己試著也來推導一個可傳回遞迴費式數計算的函式呢？結果其實會是相同的，也就是說，上頭這個 <code>y</code> 也可以用來產生計算費式數的遞迴函式，例如：
          <pre class="prettyprint"><code lang="python">y(lambda fib: lambda n: n if(n == 0 or n == 1) else fib(n - 1) + fib(n - 2))(10) # 55</code></pre>
          <strong>好玩對吧！</strong>Y Combinator 看來很神奇，像是可以運行程式的程式（a program that runs programs），美國有間創投公司命名為 Y Combinator，因為它們覺得自己就類似可運行程式的程式 Y Combinator，只不過它們是間協助新創公司的公司。
          <br>
          <br>
          實用性呢？好像沒有！不過我在這過程中玩得很高興就是了，因為很久前看過&nbsp;Y Combinator 這名詞出現過幾次了，只不過一直沒去細究它，直到有人在&nbsp;<a
            href="http://www.codedata.com.tw/forum/viewthread.php?tid=144&amp;extra=page%3D1">聽說是某天很夯的 fibonacci number XD</a>&nbsp;又提到 Y Combinator，我才好奇，原先我實作的版本會跟 Y Combinator 有什麼關係，進一步地，想試著用 Python 來玩玩看！
          <span style="color: #ff0000;"><strong>一切都只是為了有趣！… XD</strong></span>
          &nbsp;
          &nbsp;
          &nbsp; <br><br><div class="ad-2" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
    <script src="../js/ui.js"></script>
    <div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
</html>
