<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/combinatorics/k-combinations/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明

      

假設有個清單擁有m個元素，任意從清單中取出n個元素，則這n個元素形成的可能子清單有哪些？



      
      解法

      

假設...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="m 元素清單的 n 元素子清單">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/NOfM.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明

      

假設有個清單擁有m個元素，任意從清單中取出n個元素，則這n個元素形成的可能子清單有哪些？



      
      解法

      

假設...">


    <title>m 元素清單的 n 元素子清單</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="NOfM.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>m 元素清單的 n 元素子清單</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             
      
      <h2>說明</h2>

      

假設有個清單擁有m個元素，任意從清單中取出n個元素，則這n個元素形成的可能子清單有哪些？<br>



      
      <h2>解法</h2>

      

假設有5個元素的清單，任意取出3個元素的可能子清單如下：<br>

      

      
      <div style="margin-left: 40px; font-family: Courier New,Courier,monospace;"><span style="font-weight: bold;">[1 2 3]<br>
[1 2 4]<br>
[1 2 5]<br>
[1 3 4]<br>
[1 3 5]<br>
[1 4 5]<br>
[2 3 4]<br>
[2 3 5]<br>
[2 4 5]<br>
[3 4 5]</span><br>



      </div>



      <br>



這些子清單示範使用字典順序排列，如此可觀察出一些規則：<br>

      

      
      <ol>

        <li>如果最右元素小於m，該元素遞增1</li>

        <li>如果清單list最右元素等於m，則遞增1的位置pos為第一個list[pos + 1] - list[pos] &gt; 1的位置</li>

        <li>每次遞增1的位置往左移後，必須重新調整右邊的元素為遞減順序</li>

      
      </ol>



      <br>



關鍵在於哪個位置必須進行加1動作，到底是最右位置要加1？還是其它位置？

      <br>



      
      <h2> 實作：<a href="NOfM.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="NOfM.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="NOfM.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="NOfM.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="NOfM.htm#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="NOfM.htm#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="NOfM.htm#Haskell">Haskell</a><br>
      </h2>




      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>#define MAX 20 <br><br>void init(int*, int);<br>int position(int*, int, int);<br>void next(int*, int, int);<br>void print(int*, int);<br><br>int main(void) { <br>    int list[MAX] = {0};<br>    int m, n; <br>    <br>    printf("清單個數 m："); <br>    scanf("%d", &amp;m); <br>    printf("取出個數 n："); <br>    scanf("%d", &amp;n); <br>    <br>    init(list, n);<br>    print(list, n);<br>    while(hasNext(list, m, n)) {<br>        next(list, m, n);<br>        print(list, n);<br>    } <br><br>    return 0; <br>}<br><br>void init(int* list, int n) {<br>    int i;<br>    for(i = 0; i &lt; n; i++) { list[i] = i + 1; }<br>}<br><br>int position(int* list, int m, int n) {<br>    if(list[n - 1] != m) {<br>        return n - 1;<br>    }<br>    else {<br>        int pos = n - 2;<br>        while(list[pos + 1] - list[pos] == 1) { pos--; }<br>        return pos;<br>    }<br>}<br><br>int hasNext(int* list, int m, int n) {<br>    return list[0] &lt; m - n + 1;<br>}<br><br>void next(int* list, int m, int n) {<br>    int pos = position(list, m, n);<br>    list[pos]++; <br>    int i;<br>    for(i = pos + 1; i &lt; n; i++) { list[i] = list[i - 1] + 1; }<br>}<br><br>void print(int* list, int n) {<br>    int i;        <br>    for(i = 0; i &lt; n; i++) { printf("%d ", list[i]); }<br>    putchar('\n'); <br>}<br></code></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>import java.util.*;<br><br>public class SubList {<br>    public static class IdxArray&lt;T&gt; {<br>        private int m;<br>        private int[] idxArray;<br>        <br>        private IdxArray(int m, int[] idxArray) {<br>            this.m = m;<br>            this.idxArray = idxArray;<br>        }<br>        <br>        public boolean hasNext() {<br>            return idxArray[0] &lt; m - idxArray.length;<br>        }<br>        <br>        public IdxArray&lt;T&gt; next() {            <br>            int[] idxArr = Arrays.copyOf(idxArray, idxArray.length);<br>            int pos = position();<br>            idxArr[pos]++;<br>            for(int i = pos + 1; i &lt; idxArr.length; i++) {<br>                idxArr[i] = idxArr[i - 1] + 1;<br>            }<br>            return new IdxArray&lt;&gt;(m, idxArr);<br>        }<br>        <br>        public List&lt;T&gt; toList(List&lt;T&gt; src) {<br>            List&lt;T&gt; lt = new ArrayList&lt;&gt;();<br>            for(int idx : idxArray) { lt.add(src.get(idx)); }<br>            return lt;<br>        }<br>        <br>        private int position() {<br>            if(idxArray[idxArray.length - 1] != m - 1) {<br>                return idxArray.length - 1;<br>            }<br>            else {<br>                int pos = idxArray.length - 2;<br>                while(idxArray[pos + 1] - idxArray[pos] == 1) { pos--; }<br>                return pos;<br>            }<br>        }<br>        <br>        public static &lt;T&gt; IdxArray&lt;T&gt; get(int m, int n) {<br>            int[] idxArray = new int[n];<br>            for(int i = 0; i &lt; n; i++) {<br>                idxArray[i] = i;<br>            }<br>            return new IdxArray&lt;&gt;(m, idxArray);<br>        }<br>    }<br>    <br>    public static &lt;T&gt; List&lt;List&lt;T&gt;&gt; from(List&lt;T&gt; src, int n) {<br>        IdxArray&lt;T&gt; idxArray = IdxArray.get(src.size(), n);<br>        List&lt;List&lt;T&gt;&gt; all = new ArrayList&lt;&gt;();<br>        all.add(idxArray.toList(src));<br>        while(idxArray.hasNext()) {<br>            idxArray = idxArray.next();<br>            all.add(idxArray.toList(src));<br>        }<br>        return all;<br>    }<br><br>    public static void main(String[] args) {<br>        List&lt;Integer&gt; src = Arrays.asList(1, 2, 3, 4, 5);<br>        for(List&lt;Integer&gt; lt : from(src, 3)) {<br>            System.out.println(lt);<br>        }<br>    }<br>}</code></pre>



      <br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>class IdxArray:<br>    def __init__(self, m, idxArray):<br>        self.m = m<br>        self.idxArray = idxArray<br>        <br>    def position(self):<br>        idxArray = self.idxArray<br>        def oneDif(pos):<br>            return (oneDif(pos - 1) <br>                if idxArray[pos + 1] - idxArray[pos] == 1 else pos)<br>        return (len(idxArray) - 1 <br>                   if idxArray[len(idxArray) - 1] != self.m - 1 <br>                   else oneDif(len(idxArray) - 2))<br>        <br>    def hasNext(self):<br>        return self.idxArray[0] &lt; self.m - len(self.idxArray)<br>        <br>    def next(self):<br>        pos = self.position()<br>        idxArray = self.idxArray<br>        return IdxArray(self.m, idxArray[0:pos] +<br>            list(range(idxArray[pos] + 1, <br>                idxArray[pos] + 1 + len(idxArray) - pos)))<br>        <br>    def toList(self, src):<br>        return [src[idx] for idx in self.idxArray]<br><br>    @staticmethod    <br>    def subList(m, n):<br>        return IdxArray(m, list(range(n)))<br>    <br>def subLts(src, n):<br>    def iter(idxArray):<br>        return ([idxArray.toList(src)] + <br>            (iter(idxArray.next()) if idxArray.hasNext() else []))<br>    return iter(IdxArray.subList(len(src), n))<br>    <br>for lt in subLts([1, 2, 3, 4, 5], 3):<br>    print(lt)<br></code></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>class IdxList[T] private (m: Int, idxList: List[Int]) {<br>    def pos = {<br>        def oneDif(p: Int): Int = {<br>            if(idxList(p + 1) - idxList(p) == 1) oneDif(p - 1) <br>            else p<br>        }<br>        if(idxList(idxList.size - 1) != m - 1) idxList.size - 1 <br>        else oneDif(idxList.size - 2)<br>    }<br>    <br>    def hasNext = idxList(0) &lt; m - idxList.size<br>    <br>    def next = {<br>        new IdxList[T](m, idxList.slice(0, pos) ++ <br>          ((idxList(pos) + 1) to (idxList(pos) + idxList.size - pos)).toList)<br>    }<br>    <br>    def toList(src: List[T]) = <br>        (for(idx &lt;- idxList) yield src(idx)).toList<br>}<br><br>object IdxList {<br>    def apply[T](m: Int, n: Int) = new IdxList[T](m, (0 until n).toList)<br>}<br><br>def from[T](src: List[T], n: Int) = {<br>    def iter(idxList: IdxList[T]): List[List[T]] = {<br>        idxList.toList(src) :: <br>            (if(idxList.hasNext) iter(idxList.next) else Nil)<br>    }<br>    iter(IdxList(src.size, n))<br>}<br><br>from(List(1, 2, 3, 4, 5), 3).foreach(println)<br></code></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre class="prettyprint"><code>class IdxList<br>    def initialize(m, idxArray)<br>        @m = m<br>        @idxArray = idxArray<br>    end<br>        <br>    def pos<br>        oneDif = -&gt;(p) {<br>            @idxArray[p + 1] - @idxArray[p] == 1 ? oneDif.call(p - 1) : p<br>        }<br>        @idxArray[@idxArray.size - 1] != @m - 1 ? <br>            @idxArray.size - 1 : oneDif.call(@idxArray.size - 2)<br>    end<br>        <br>    def hasNext<br>        @idxArray[0] &lt; @m - @idxArray.size<br>    end<br>        <br>    def next<br>        IdxList.new(@m, <br>            @idxArray[0...pos] + ((@idxArray[pos] + 1) ..<br>                (@idxArray[pos] + @idxArray.size - pos)).to_a<br>        )<br>    end<br>        <br>    def toList(src)<br>        @idxArray.map {|idx| src[idx]}<br>    end<br><br>    def self.subList(m, n)<br>        IdxList.new(m, (0...n).to_a)<br>    end<br>end<br><br>def subLts(src, n)<br>    iter = -&gt;(idxArray) {<br>        [idxArray.toList(src)] + <br>            (idxArray.hasNext ? iter.call(idxArray.next) : [])<br>    }<br>    iter.call(IdxList.subList(src.size, n))<br>end<br><br>subLts([1, 2, 3, 4, 5], 3).each do |lt|<br>    print("#{lt}\n")<br>end<br></code></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre class="prettyprint"><code>function IdxArray(m, idxArray) {<br>    this.m = m;<br>    this.idxArray = idxArray;<br>}<br><br>IdxArray.prototype.hasNext = function() {<br>    return this.idxArray[0] &lt; this.m - this.idxArray.length;<br>};<br><br>IdxArray.prototype.position = function() {<br>    if(this.idxArray[this.idxArray.length - 1] != this.m - 1) {<br>        return this.idxArray.length - 1;<br>    }<br>    else {<br>        var pos = this.idxArray.length - 2;<br>        while(this.idxArray[pos + 1] - this.idxArray[pos] == 1) { pos--;}<br>        return pos;<br>    }<br>};<br><br>IdxArray.prototype.next = function() {<br>    var pos = this.position();<br>    var idxArr = this.idxArray.slice(0, pos);<br>    idxArr.push(this.idxArray[pos] + 1);<br>    for(var i = pos + 1; i &lt; this.idxArray.length; i++) {<br>        idxArr.push(idxArr[i - 1] + 1);<br>    }<br>    return new IdxArray(this.m, idxArr);<br>};<br><br>IdxArray.prototype.toList = function(src) {<br>    return this.idxArray.map(function(idx) { return src[idx]; });<br>};<br><br>IdxArray.get = function(m, n) {<br>    var idxArray = [];<br>    for(var i = 0; i &lt; n; i++) { idxArray.push(i); }<br>    return new IdxArray(m, idxArray);<br>};<br><br>function from(src, n) {<br>    var idxArray = IdxArray.get(src.length, n);<br>    var all = [];<br>    all.push(idxArray.toList(src));<br>    while(idxArray.hasNext()) {<br>        idxArray = idxArray.next();<br>        all.push(idxArray.toList(src));<br>    }<br>    return all;<br>}<br><br>from([1, 2, 3, 4, 5], 3).forEach(function(lt) { print(lt); });<br></code></pre>
      <br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre class="prettyprint"><code>data IdxList = IdxList Int [Int] deriving (Show)<br><br>hasNext (IdxList m idxLt)= idxLt !! 0 &lt; m - length idxLt<br><br>pos (IdxList m idxLt) =<br>    if idxLt !! (length idxLt - 1) /= m - 1 then length idxLt - 1<br>    else oneDif (length idxLt - 2)<br>    where <br>        oneDif p =<br>            if idxLt !! (p + 1) - idxLt !! p == 1 then oneDif \$ p - 1<br>            else p<br><br>next idxList@(IdxList m idxLt) = <br>    IdxList m (take p idxLt ++ <br>        [(idxLt !! p + 1) .. (idxLt !! p + length idxLt - p)])<br>    where p = pos idxList<br><br>toList (IdxList _ idxLt) src = [src !! idx | idx &lt;- idxLt]<br><br>get m n = IdxList m [0 .. n - 1]<br><br>from src n = iter \$ get (length src) n<br>    where<br>        iter idxList = <br>            toList idxList src : if hasNext idxList <br>                                    then iter \$ next idxList<br>                                    else []<br>                                    <br>main = sequence [print lt | lt &lt;- from [1, 2, 3, 4, 5] 3]<br></code></pre>
      <br>





 

<br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
