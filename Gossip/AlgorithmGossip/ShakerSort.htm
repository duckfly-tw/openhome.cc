<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/sort/shaker/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明

      

請看看之前介紹過的 氣泡排序法，以 C 語言的實作為例：

      

      
      void bubbleTo(int* arr, int ...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="Shaker 排序法 - 改良的氣泡排序">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/ShakerSort.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明

      

請看看之前介紹過的 氣泡排序法，以 C 語言的實作為例：

      

      
      void bubbleTo(int* arr, int ...">


    <title>Shaker 排序法 - 改良的氣泡排序</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="ShakerSort.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>Shaker 排序法 - 改良的氣泡排序</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             






      
      <h2>說明</h2>

      

請看看之前介紹過的 <a href="SelectionInsertionBubble.htm">氣泡排序法</a>，以 C 語言的實作為例：<br>

      

      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">void bubbleTo(int* arr, int to, int(*compar)(int, int)) {<br>
&nbsp;&nbsp;&nbsp; int i;<br>
&nbsp;&nbsp;&nbsp; for(i = 0; i &lt; to - 1; i++) if(compar(arr[i + 1], arr[i]) &lt; 0) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SWAP(arr[i + 1], arr[i]);<br>
&nbsp;&nbsp;&nbsp; }<br>
}<br>
      <br>
void bubbleSort(int* arr, int len, int(*compar)(int, int)) {<br>
&nbsp;&nbsp;&nbsp; int i;<br>
&nbsp;&nbsp;&nbsp; for(i = 0; i &lt; len; i++) { bubbleTo(arr, len - i, compar); }<br>
}</span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><br>



      </div>

      

&nbsp;<br>

      <br>
實際上氣泡排序過程中，如果在bubbleTo中沒有發生過交換動作，左邊也已排序完成，bubbleSort的迴圈可以提前結束。也就是可以改為以下稍微增進效能。<br>

      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">int bubbleTo(int* arr, int to, int(*compar)(int, int)) {<br>
      &nbsp;&nbsp; int i, swapped;<br>
      &nbsp;&nbsp; for(i = 0, swapped = 0; i &lt; to-1; i++) if(compar(arr[i+1], arr[i]) &lt; 0) {<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SWAP(arr[i + 1], arr[i]);<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; swapped = i;<br>
      &nbsp;&nbsp; }<br>
      &nbsp;&nbsp; return swapped;<br>
      }<br>
      <br>
      void bubbleSort(int* arr, int len, int(*compar)(int, int)) {<br>
      &nbsp;&nbsp;&nbsp; int i;<br>
      &nbsp;&nbsp;&nbsp; for(i = 0; i &lt; len &amp;&amp; bubbleTo(arr, len - i, compar) != 0; i++);<br>
      }<br></span>
      </div>
      <br>最後交換發生的索引值會被bubbleTo傳回，如果為0，表示沒發生過交換動作，也就是左邊也已排序完成。整個排序
過程中，排序的過程中，陣列右方排序好的元素會一直增加，反過來思考，如果此時氣泡排序方向不斷交換（也就是由左往右，再由右往左），利用兩邊排序好的元
素，提早讓交換動作不再發生，是否可以增加排序效能？Shaker排序法利用這個觀念來改良氣泡排序法。

      <br>



      
      <h2>解法</h2>

      

在上述的氣泡排序法中，在交換動作不再發生時，提早讓排序結束，在排序過程中，陣列右方排序好的元素會一直增加，如我們的例子所示：<br>

      <br>



排序前：95 27 90 49 80 58 6 9 18 50<br>

      <br>

      





      
      <ol>

        <li>27 90 49 80 58 6 9 18 50 [95] 95浮出</li>

        <li>27 49 80 58 6 9 18 50 [90 95] 90浮出</li>

        <li>27 49 58 6 9 18 50 [80 90 95] 80浮出</li>

        <li>27 49 6 9 18 50 [58 80 90 95] ......</li>

        <li>27 6 9 18 49 [50 58 80 90 95] ......</li>

        <li>6 9 18 27 [49 50 58 80 90 95] ......</li>

        <li>6 9 18 [27 49 50 58 80 90 95] 沒有發生交換動作，排序結束<br>
</li>

      
      </ol>



      <br>在第7步時，由於不再發生交換動作，排序提早結束，Shaker排序使用了這個概念，如果左右兩邊的元素都能先排序完成，如此未排序的元素會集中在中間，由於左右兩邊同時排序，中間未排序的部份將會很快的減少，不再出現交換動作的時間也會提前。<br>

      <br>



方法就在於氣泡排序的雙向進行，先讓氣泡排序由左向右進行，再來讓氣泡排序由右往左進行，如此完成一次排序的動作，而您必須使用left與right兩個旗標來記錄左右兩端已排序的元素位置。<br>

      <br>



一個排序的例子如下所示：<br>

      <br>



排序前：45 19 77 81 13 28 18 19 77 11<br>

      <br>

      









      
      <div style="margin-left: 40px;">往右排序：19 45 77 13 28 18 19 77 11 [81]<br>



向左排序：[11] 19 45 77 13 28 18 19 77 [81]<br>



      <br>



往右排序：[11] 19 45 13 28 18 19 [77 77 81]<br>



向左排序：[11 13] 19 45 18 28 19 [77 77 81]<br>



      <br>



往右排序：[11 13] 19 18 28 19 [45 77 77 81]<br>



向左排序：[11 13 18] 19 19 28 [45 77 77 81]<br>



      <br>



往右排序：[11 13 18] 19 19 [28 45 77 77 81]<br>



向左排序：[11 13 18 19 19] [28 45 77 77 81]<br>



      </div>



      <br>



如上所示，括號中表示左右兩邊已排序完成的部份，當left &gt; right時，則排序完成。 <br>





      <br>



      
      <h2> 實作：<a href="ShakerSort.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="ShakerSort.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="ShakerSort.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="ShakerSort.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="ShakerSort.htm#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="ShakerSort.htm#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="ShakerSort.htm#Haskell">Haskell</a><br>
      </h2>




      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#define LEN 10<br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>void shakerSort(int*, int, int(*)(int, int)); <br>int bubbleL2R(int* arr, int from, int to, int(*)(int, int));<br>int bubbleR2L(int* arr, int from, int to, int(*)(int, int));<br><br>void print(int*, int len);<br>int ascending(int, int);<br>int descending(int, int);<br><br>int main(void) { <br>    int number[LEN] = {10, 9, 1, 2, 5, 3, 8, 7, 12, 11};<br><br>    shakerSort(number, LEN, ascending); <br>    print(number, LEN);<br>    <br>    shakerSort(number, LEN, descending); <br>    print(number, LEN);<br><br>    return 0; <br>} <br><br>void shakerSort(int* number, int len, int(*compar)(int, int)) {<br>    int left, right;<br>    for(left = 0, right = len - 1; <br>        left &lt; right; <br>        right = bubbleL2R(number, left, right, compar), <br>        left = bubbleR2L(number, left, right, compar));<br>} <br><br>int bubbleL2R(int* arr, int left, int right, int(*compar)(int, int)) {<br>    int i, swapped;<br>    for(i = left, swapped = left; <br>            i &lt; right; i++) if(compar(arr[i + 1], arr[i]) &lt; 0) {<br>        SWAP(arr[i + 1], arr[i]);<br>        swapped = i;<br>    }<br>    return swapped;<br>}<br><br>int bubbleR2L(int* arr, int left, int right, int(*compar)(int, int)) {<br>    int i, swapped;<br>    for(i = right, swapped = right; <br>            i &gt; left; i--) if(compar(arr[i], arr[i - 1]) &lt; 0) {<br>        SWAP(arr[i], arr[i - 1]);<br>        swapped = i;<br>    }<br>    return swapped;<br>}<br><br>void print(int* arr, int len) {<br>    int i;<br>    for(i = 0; i &lt; len; i++) { printf("%d ", arr[i]); } <br>    printf("\n");<br>}<br><br>int ascending(int a, int b) { return a - b; }<br>int descending(int a, int b) { return -ascending(a, b); } <br></code></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>import java.util.*;<br>import static java.lang.System.out;<br>import static java.util.Collections.swap;<br><br>public class Sort {<br>    public static &lt;T extends Comparable&lt;? super T&gt;&gt; <br>        int ascending(T t1, T t2) {  return t1.compareTo(t2); }<br><br>    public static &lt;T extends Comparable&lt;? super T&gt;&gt; <br>        int descending(T t1, T t2) { return -ascending(t1, t2); }<br>    <br>    public static &lt;T&gt; int bubbleL2R(<br>                List&lt;T&gt; list, int left, int right, Comparator&lt;? super T&gt; c) {<br>        int swapped = left;<br>        for(int i = left; i &lt; right; i++) {<br>            if(c.compare(list.get(i + 1), list.get(i)) &lt; 0) {<br>                swap(list, i + 1, i);<br>                swapped = i;<br>            }<br>        }<br>        return swapped;<br>    }<br>    <br>    public static &lt;T&gt; int bubbleR2L(<br>                List&lt;T&gt; list, int left, int right, Comparator&lt;? super T&gt; c) {<br>        int swapped = right;<br>        for(int i = right; i &gt; left; i--) {<br>            if(c.compare(list.get(i), list.get(i - 1)) &lt; 0) {<br>                swap(list, i, i - 1);<br>                swapped = i;<br>            }<br>        }<br>        return swapped;<br>    }<br>    <br>    public static &lt;T&gt; void sharkSort(<br>        List&lt;T&gt; list, Comparator&lt;? super T&gt; c) {<br>        for(int left = 0, right = list.size() - 1; <br>            left &lt; right; <br>            right = bubbleL2R(list, left, right, c), <br>            left = bubbleR2L(list, left, right, c));<br>    }<br>    <br>    public static &lt;T extends Comparable&lt;? super T&gt;&gt; <br>        void sharkSort(List&lt;T&gt; list) { sharkSort(list, Sort::ascending); }<br>    <br>    <br>    public static void main(String[] args) {<br>        List&lt;Integer&gt; list = <br>            new ArrayList&lt;&gt;(Arrays.asList(10, 9, 1, 2, 5, 3, 8, 7, 12, 11));<br>        <br>        sharkSort(list);<br>        out.println(list);<br>        <br>        sharkSort(list, Sort::descending);<br>        out.println(list);<br>    }<br>}<br></code></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>def ascending(a, b): return a - b<br>def descending(a, b): return -ascending(a, b)<br>    <br>def sharkSort(xs, compare = ascending):<br>    return [] if not xs else __up(xs, compare)<br>    <br>def __up(xs, compare):<br>    if not xs[1:]: <br>        return xs<br>    else:<br>        s = __down(xs[1:], compare)<br>        return ([s[0]] + __up([xs[0]] + s[1:], compare) <br>                    if compare(xs[0], s[0]) &gt; 0<br>                    else [xs[0]] + s)<br><br>def __down(xs, compare):<br>    if not xs[0:-1]: <br>        return xs<br>    else:<br>        s = __up(xs[0:-1], compare)<br>        return (__down(s[0:-1] + [xs[-1]] , compare) + [s[-1]]<br>                    if compare(xs[-1], s[-1]) &lt; 0<br>                    else s + [xs[-1]])<br>                    <br>list = [10, 9, 1, 2, 5, 3, 8, 7, 12, 11]<br><br>print(sharkSort(list))<br>print(sharkSort(list, descending))<br></code></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>object Sort {    <br>    def shark[T](xs: List[T], compare: (T, T) =&gt; Boolean):List[T] = {<br>        if(xs.isEmpty) Nil<br>        else up(xs, compare)<br>    }<br>    private def up[T](xs: List[T], <br>                   compare: (T, T) =&gt; Boolean): List[T] = {<br>        if(xs.tail.isEmpty) xs<br>        else {<br>            val s = down(xs.tail, compare)<br>            if(!compare(xs.head, s.head)) <br>                s.head :: up(xs.head :: s.tail, compare)<br>            else xs.head :: s<br>        }<br>    }<br>    private def down[T](xs: List[T], <br>                   compare: (T, T) =&gt; Boolean): List[T] = {<br>        if(xs.init.isEmpty) xs<br>        else {<br>            val s = up(xs.init, compare)<br>            if(compare(xs.last, s.last)) <br>                 down(s.init ++ List(xs.last), compare) ++ List(s.last)<br>            else s ++ List(xs.last)<br>        }<br>    }<br>}<br><br>val list = List(10, 9, 1, 2, 5, 3, 8, 7, 12, 11)<br><br>println(Sort.shark[Int](list, _ &gt; _))<br>println(Sort.shark[Int](list, _ &lt; _))</code></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre class="prettyprint"><code>class Sort<br>    @@ascending = -&gt;(a, b) { a - b }<br>    @@descending = -&gt;(a, b) { -@@ascending.call(a, b) }<br>    <br>    def self.ascending; @@ascending end<br>    def self.descending; @@descending end<br>    <br>    def self.shark(xs, compare)<br>        xs.empty? ? [] : up(xs, compare)<br>    end<br>    def self.up(xs, compare)<br>        if xs[1..-1].empty?<br>            xs<br>        else<br>            s = down(xs[1..-1], compare)<br>            compare.call(xs[0], s[0]) &gt; 0 ? <br>                [s[0]] + up([xs[0]] + s[1..-1], compare) : [xs[0]] + s<br>        end<br>    end<br>    private_class_method :up<br>    <br>    def self.down(xs, compare)<br>        if xs[0..-2].empty?<br>            xs<br>        else<br>            s = up(xs[0..-2], compare)<br>            compare.call(xs[-1], s[-1]) &lt; 0 ? <br>                down(s[0..-2] + [xs[-1]] , compare) + [s[-1]] : s + [xs[-1]]<br>        end<br>    end<br>    private_class_method :down<br>end<br><br>list = [10, 9, 1, 2, 5, 3, 8, 7, 12, 11]<br><br>print(Sort.shark(list, Sort.ascending).to_s + "\n")<br>print(Sort.shark(list, Sort.descending).to_s + "\n")<br></code></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre class="prettyprint"><code>function swap(list, i, j) {<br>    var ele = list[i];<br>    list[i] = list[j];<br>    list[j] = ele;<br>}<br><br>function ascending(a, b) {return a - b;}<br>function descending(a, b) {return -ascending(a, b);}<br>    <br>function sharkSort(list, compare) {<br>    for(var left = 0, right = list.length - 1; <br>        left &lt; right;<br>        right = bubbleL2R(list, left, right, compare), <br>        left = bubbleR2L(list, left, right, compare));<br>}<br><br>function bubbleL2R(list, left, right, compare) {<br>    for(var i = left, swapped = left; i &lt; right; i++) {<br>        if(compare(list[i + 1], list[i]) &lt; 0) {<br>            swap(list, i + 1, i);<br>            swapped = i;<br>        }<br>    }<br>    return swapped;<br>}<br><br>function bubbleR2L(list, left, right, compare) {<br>    for(var i = right, swapped = right; i &gt; left; i--) {<br>        if(compare(list[i], list[i - 1]) &lt; 0) {<br>            swap(list, i, i - 1);<br>            swapped = i;<br>        }<br>    }<br>    return swapped;<br>}<br><br>var list = [10, 9, 1, 2, 5, 3, 8, 7, 12, 11];<br><br>sharkSort(list, ascending);<br>print(list);<br><br>sharkSort(list, descending);<br>print(list);<br></code></pre>
      <br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre class="prettyprint"><code>ascending a b = a - b<br>descending a b = -ascending a b<br><br>sharkSort xs compare =<br>    if xs == [] then [] else up xs compare<br>    <br>up xs compare =<br>    if tail xs == []<br>        then xs<br>        else<br>            let s = down (tail xs) compare<br>            in if compare (head xs) (head s) &gt; 0<br>                    then head s : up (head xs : tail s) compare<br>                    else head xs : s<br>                    <br>down xs compare =<br>    if init xs == []<br>        then xs<br>        else<br>            let s = up (init xs) compare<br>            in if compare (last xs) (last s) &lt; 0<br>                    then down (init s ++ [last xs]) compare ++ [last s]<br>                    else s ++ [last xs]<br><br>main = sequence [print \$ sharkSort list ascending, <br>                 print \$ sharkSort list descending]<br>    where list = [10, 9, 1, 2, 5, 3, 8, 7, 12, 11]<br></code></pre>
<br>


 




<br><br><div class="ad-2" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
