<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/numbers/perfect/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明

      

如果有一數n，其真因數（Proper factor）的總和等於n，則稱之為完美數（Perfect Number），例如以下幾個數都是完美數：

      

...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="完美數">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/PerfectNumber.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明

      

如果有一數n，其真因數（Proper factor）的總和等於n，則稱之為完美數（Perfect Number），例如以下幾個數都是完美數：

      

...">


    <title>完美數</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="PerfectNumber.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>完美數</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             




      
      <h2>說明</h2>

      

如果有一數n，其真因數（Proper factor）的總和等於n，則稱之為完美數（Perfect Number），例如以下幾個數都是完美數：<br>

      

      
      <div style="margin-left: 40px; font-weight: bold;"><span style="font-family: Courier New,Courier,monospace;">6 = 1 + 2 + 3</span><br>


      <span style="font-family: Courier New,Courier,monospace;">
28 = 1 + 2 + 4 + 7 + 14</span><br>


      <span style="font-family: Courier New,Courier,monospace;">
496 = 1 + 2 + 4 + 8 + 16 + 31 + 62 + 124 + 248</span><br>



      </div>



      <br>



程式基本上不難，第一眼看到時會想到使用迴圈求出所有真因數，再進一步求因數和，不過若n值很大，則此法會花費許多時間在迴圈測試上，十分沒有效率，例如求小於10000的所有完美數。<br>



      
      <h2>解法</h2>

      

如何求小於10000的所有完美數？並將程式寫的有效率？基本上有三個步驟：<br>

      

      
      <ol>

        <li>求出一定數目的質數表</li>

        <li>利用質數表求指定數的因式分解</li>

        <li>利用因式分解求所有真因數和，並檢查是否為完美數</li>

      
      </ol>



      <br>

      <a href="EratosthenesPrime.htm">步驟一</a> 與 <a href="GCDPNumber.htm">步驟二</a> 在之前討論過了，問題在步驟三，如何求真因數和？方法很簡單，要先知道將所有真因數和加上該數本身，會等於該數的兩倍，例如：<br>

      



      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">2 * 28 = 1 + 2 + 4 + 7 + 14 + 28</span><br>



      </div>



      <br>



等式後面可以化為：<br>

      

      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">2 * 28 = (2</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">0</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"> + 2</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">1</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"> + 2</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">2</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">) * (7</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">0</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"> + 7</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">1</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">)</span><br>



      </div>



      <br>



所以只要求出因式分解，就可以利用迴圈求得等式後面的值，將該值除以2就是真因數和了；等式後面第一眼看時可能想到使用等比級數公式來解，不過會使用到次方運算，可以在迴圈走訪因式分解陣列時，同時計算出等式後面的值，這在下面的實作中可以看到。 <br>






      <br>



      
      <h2> 實作：<a href="PerfectNumber.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="PerfectNumber.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="PerfectNumber.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="PerfectNumber.htm#Scala">Scala&nbsp;</a>&nbsp;&nbsp; <a href="PerfectNumber.htm#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="PerfectNumber.htm#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="PerfectNumber.htm#Haskell">Haskell</a><br>
      </h2>




      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>#define P 10000<br>#define N 5000<br><br>void create(int*);             // 建立質數表<br>void filter(int*, int);<br>void factor(int, int*, int*);  // 因數分解<br>int isPerfect(int, int*);      // 判斷完美數<br><br>int main(void) { <br>    int primes[N + 1] = {0};<br>    create(primes);<br>    <br>    int i;<br>    for(i = 2; i &lt;= P; i++) if(isPerfect(i, primes)) {<br>        printf("Perfect Number%5d\n", i);         <br>    }<br><br>    return 0; <br>} <br><br>void create(int* primes) {<br>    primes[2] = primes[3] = primes[5] = 1;<br>    <br>    int i;<br>    for(i = 1;6 * i + 5 &lt;= N; i++) {<br>        primes[6 * i + 1] = primes[6 * i + 5] = 1; <br>    }<br>    if(6 * i + 1 &lt;= N) { primes[6 * i + 1] = 1; }<br>    <br>    int n;<br>    for(n = 0;(6 * n + 5) * (6 * n + 5) &lt;= N; n++) {<br>        filter(primes, 6 * n + 1);<br>        filter(primes, 6 * n + 5);<br>    }     <br>    if((6 * n + 1) * (6 * n + 1) &lt;= N) { filter(primes, 6 * n + 1); }  <br>}<br><br>void filter(int* primes, int i) {<br>    if(primes[i]) { <br>        int j;<br>        for(j = 2; j * i &lt;= N; j++) {<br>            primes[j * i] = 0; <br>        }<br>    }<br>}<br><br>void factor(int num, int* factors, int* primes) { <br>    int i, j;<br>    for(i = 2, j = 0; i * i &lt;= num;) if(primes[i] &amp;&amp; num % i == 0) {<br>        factors[j++] = i;<br>        num /= i;<br>    } else { i++; }<br>    factors[j] = num;<br>}<br><br>int isPerfect(int num, int* primes) {  <br>    int factors[N / 2 + 1] = {0};<br>    factor(num, factors, primes); <br><br>    int s = 1; <br>    int i = 0;<br>    while(factors[i] != 0) { <br>        int r = 1; <br>        int q = 1;<br>        do { <br>            r *= factors[i]; <br>            q += r; <br>            i++; <br>        } while(factors[i - 1] == factors[i]); <br>        s *= q;<br>    } <br>    <br>    return s / 2 == num; <br>}  <br></code></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>// 使用 <a href="EratosthenesPrime.htm">Eratosthenes 篩選求質數</a> 中的 Prime<br>// 使用 <a href="GCDPNumber.htm">因數分解</a> 中的 Factor <br><br>import java.util.*;<br><br>public class Perfect {<br>    public static List&lt;Integer&gt; perfectLe(int n) {<br>         List&lt;Integer&gt; primes = Prime.create(n / 2);<br>         List&lt;Integer&gt; perfects = new ArrayList&lt;&gt;();<br>         for(int i = 2; i &lt;= n; i++) if(isPerfect(i, primes)) {<br>             perfects.add(i);<br>         }<br>         return perfects;<br>    }<br>    <br>    public static boolean isPerfect(int num, List&lt;Integer&gt; primes) {  <br>        List&lt;Integer&gt; factors = Factor.factor(num, primes);<br>        factors.add(0);<br>        <br>        int s = 1; <br>        int i = 0;<br>        while(factors.get(i) != 0) { <br>            int r = 1; <br>            int q = 1;<br>            do { <br>                r *= factors.get(i); <br>                q += r; <br>                i++;<br>            } while(factors.get(i - 1).equals(factors.get(i))); <br>            s *= q; <br>        }   <br><br>        return s / 2 == num; <br>    }<br><br>    <br>    public static void main(String[] args) {<br>        for(Integer n : perfectLe(100000)) {<br>            System.out.printf("Perfect number %5d%n", n);<br>        }<br>    }<br>}</code></pre>



      <br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>from functools import reduce # 未使用質數表<br>def perfectLe(number):<br>    return [i for i in range(1, number) if 2 * i == reduce( \<br>            lambda sum, k: sum + k if i % k == 0 else sum, range(1, i + 1))]<br>print(perfectLe(10000))</code></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>def perfectLe(number: Int) = { // 未使用質數表<br>  for(<br>    i &lt;- 1 to number<br>    if 2 * i == (0 /: (1 to i)){(sum, k) =&gt; if(i % k == 0) sum + k else sum}<br>  ) yield i<br>}<br>perfectLe(10000) foreach(p =&gt; print(p + " "))<br></code></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby<br>
        </li>
      </ul>
      <pre class="prettyprint"><code>class Range<br>    def comprehend(&amp;block)<br>        return self if block.nil?<br>        self.collect(&amp;block).compact<br>    end<br>end<br><br>def perfectLe(number)<br>    (1..number - 1).comprehend { |i|<br>        i if 2 * i == (1..i).reduce { |sum, k| i % k == 0 ? sum + k : sum }<br>    }<br>end<br><br>p perfectLe(10000)<br></code></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre class="prettyprint"><code>function range(start, end) {<br>    var r = [];<br>    var n = start;<br>    for(var i = 0; n &lt; end; i++, n++) { r[i] = n; }<br>    return r;<br>}<br><br>function perfectLe(number) {<br>    return range(1, number).map(function(i) {<br>        var r = range(1, i + 1);<br>        var sum = r[0];<br>        for(var j = 1; j &lt; r.length; j++) {<br>            sum = i % r[j] === 0 ? sum + r[j] : sum;<br>        }<br>        if(2 * i === sum) { return i; }<br>    }).filter(function(elem) { return elem !== undefined; });<br>}<br><br>print(perfectLe(10000));<br></code></pre>
      <br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre class="prettyprint"><code>perfectLe number = <br>    [i | i &lt;- [1..number - 1], (2 * i) == <br>        (foldl1 (\s k -&gt; if i `mod` k == 0 then s + k else s) [1..i])]<br><br>main = print \$ perfectLe 10000<br></code></pre>
      <br>
<br>



 

<br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
