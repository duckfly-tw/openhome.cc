<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/combinatorics/subset/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明

      

給定一組數字或符號清單，從中挑選元素產生所有可能的清單（包括空清單），例如給定1 2 3，則可能的清單為：[]、[1]、[1, 2]、[1, 2, 3]、[1, 3]、...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="產生可能的清單">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/PossibleSet.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明

      

給定一組數字或符號清單，從中挑選元素產生所有可能的清單（包括空清單），例如給定1 2 3，則可能的清單為：[]、[1]、[1, 2]、[1, 2, 3]、[1, 3]、...">


    <title>產生可能的清單</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="PossibleSet.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>產生可能的清單</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             





      
      <h2>說明</h2>

      

給定一組數字或符號清單，從中挑選元素產生所有可能的清單（包括空清單），例如給定1 2 3，則可能的清單為：[]、[1]、[1, 2]、[1, 2, 3]、[1, 3]、[2]、[2, 3]、[3]。<br>



      
      <h2>解法</h2>

      

如果不考慮字典順序，有個簡單的方法可以產生所有清單。思考二進位數字加法，並注意1出現的位置，如果每個位置都對應一個數字，則由1所對應的數字所產生的就是一個清單，例如： <br>





      
      <table border="1" width="50%">



  <tbody>



    <tr>



      <td align="left" valign="top">000 </td>




      <td align="left" valign="top">[] <br>
</td>




    </tr>




    <tr>




      <td align="left" valign="top">001 </td>




      <td align="left" valign="top">[3] </td>




    </tr>




    <tr>




      <td align="left" valign="top">010 </td>




      <td align="left" valign="top">[2] </td>




    </tr>




    <tr>




      <td align="left" valign="top">011 </td>




      <td align="left" valign="top">[2, 3] </td>




    </tr>




    <tr>




      <td align="left" valign="top">100 </td>




      <td align="left" valign="top">[1] </td>




    </tr>




    <tr>




      <td align="left" valign="top">101 </td>




      <td align="left" valign="top">[1, 3] </td>




    </tr>




    <tr>




      <td align="left" valign="top">110 </td>




      <td align="left" valign="top">[1, 2] </td>




    </tr>




    <tr>




      <td align="left" valign="top">111 </td>




      <td align="left" valign="top">[1, 2, 3] </td>



    </tr>



  
  
        
        </tbody>
      
      </table>



      <br>

      

瞭解這個方法後，剩下的就是如何產生二進位數？有許多方法可以使用，可以使用unsigned型別加上&amp;位元運算來產生，這邊則是使用陣列搜
尋。首先陣列內容全為0；接著找第一個0，在還沒找到前將走訪過的內容變為0，而第一個找到的0則變為1，如此重複直到所有陣列元素都變為1為止。例如：<br>

      

      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">000&nbsp;=&gt; 100&nbsp;=&gt; 010&nbsp;=&gt; 110&nbsp;=&gt; 001&nbsp;=&gt; 101&nbsp;=&gt; 011&nbsp;=&gt; 111</span><br>



      </div>



      



      
      <h2> 實作：<a href="PossibleSet.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="PossibleSet.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="PossibleSet.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="PossibleSet.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="PossibleSet.htm#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="PossibleSet.htm#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="PossibleSet.htm#Haskell">Haskell</a><br>
      </h2><br>
<ul>

        
        <li> <a name="C"></a>C
  </li>


      
      </ul>




      
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>#define MAXSIZE 20 <br><br>int indexOf(int, int*, int);<br>void cleanTo(int, int*);<br>int hasNext(int*, int);<br>void next(int*, int);<br>void printList(int*, int);<br><br>int main(void) {<br>    int digits[MAXSIZE] = {0}; <br>    <br>    int length; <br>    printf("輸入清單個數："); <br>    scanf("%d", &amp;length); <br><br>    printList(digits, length);<br>    while(hasNext(digits, length)) {<br>        next(digits, length);<br>        printList(digits, length);<br>    }<br><br>    return 0; <br>} <br><br>int indexOf(int n, int* digits, int length) {<br>    int i;<br>    for(i = 0; i &lt; length &amp;&amp; digits[i] != n; i++);<br>    return i == length ? -1 : i;<br>}<br><br>void cleanTo(int i, int* digits) {<br>    int j;<br>    for(j = 0; j &lt; i; digits[j] = 0, j++);<br>}<br><br>int hasNext(int* digits, int length) {<br>    return indexOf(0, digits, length) != -1;<br>}<br><br>void next(int* digits, int length) {<br>    int i = indexOf(0, digits, length);<br>    cleanTo(i, digits);<br>    digits[i] = 1;<br>}<br><br>void printList(int* digits, int length) {<br>    int i = indexOf(1, digits, length);<br>    printf(i == -1 ? "[" : "[%d", i + 1);<br>    int j;<br>    for(j = i + 1; j &lt; length; j++) if(digits[j] == 1) {<br>        printf(", %d", j + 1); <br>    }<br>    printf("]\n");<br>}<br></code></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>import java.util.*;<br><br>public class PossibleList {<br>    private static class Binary&lt;T&gt; {<br>        int[] digits;<br>        <br>        Binary(int[] digits) { this.digits = digits; }<br>        <br>        int indexOf(int elem) {<br>            int i;<br>            for(i = 0; i &lt; digits.length &amp;&amp; digits[i] != elem; i++);<br>            return i == digits.length ? -1 : i;<br>        }<br>        <br>        boolean hasNext() { return indexOf(0) != -1; }<br>        <br>        Binary&lt;T&gt; next() {<br>            int i = indexOf(0);<br>            int[] nextDigits = Arrays.copyOf(digits, digits.length);<br>            for(int j = 0; j &lt; i; nextDigits[j] = 0, j++);<br>            nextDigits[i] = 1;<br>            return new Binary&lt;&gt;(nextDigits);<br>        }<br>        <br>        public List&lt;T&gt; toList(List&lt;T&gt; src) {<br>            List&lt;T&gt; lt = new ArrayList&lt;&gt;();<br>            int i = indexOf(1);<br>            if(i != -1) {<br>                for(int j = i; j &lt; digits.length; j++) if(digits[j] == 1) {<br>                    lt.add(src.get(j));<br>                }<br>            }<br>            return lt;<br>        }<br>    }<br>    <br>    public static &lt;T&gt; List&lt;List&lt;T&gt;&gt; from(List&lt;T&gt; src) {<br>        Binary&lt;T&gt; binary = new Binary&lt;&gt;(new int[src.size()]);<br>        List&lt;List&lt;T&gt;&gt; all = new ArrayList&lt;&gt;();<br>        all.add(binary.toList(src));<br>        while(binary.hasNext()) {<br>            binary = binary.next();<br>            all.add(binary.toList(src));<br>        }<br>        return all;<br>    }<br>    <br>    public static void main(String[] args) {<br>        for(List&lt;Integer&gt; lt : from(Arrays.asList(1, 2, 3, 4))) {<br>            System.out.println(lt);<br>        }<br>    }<br>}<br></code></pre>




      <br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>from functools import reduce<br><br>class Binary:<br>    def __init__(self, digits):<br>        self.digits = digits<br>    def hasNext(self):<br>        return 0 in self.digits<br>    def next(self):<br>        i = self.digits.index(0) if 0 in self.digits else -1<br>        return Binary([0] * i + [1] + self.digits[i + 1:])<br>    def toList(self, src):<br>        return reduce(lambda acc, t: acc + [t[1]] if t[0] == 1 else acc,<br>                      zip(self.digits, src), [])<br><br>def possibleLts(src):<br>    def iter(binary):<br>        return [binary.toList(src)] + \<br>            (iter(binary.next()) if binary.hasNext() else [])<br>    return iter(Binary([0] * len(src)))<br>    <br>for lt in possibleLts([1, 2, 3, 4]):<br>    print(lt)</code></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>def list[T](elem: T, length: Int) = for(i &lt;- 0 until length) yield elem<br><br>class Binary[T](digits: List[Int]) {<br>    def hasNext = digits.contains(0)<br>    def next = {<br>        val i = if(digits.contains(0)) digits.indexOf(0) else -1<br>        new Binary[T](<br>            (list(0, i) :\ (1 :: digits.drop(i + 1)))(_ :: _))<br>    }<br>    def toList(src: List[T]) = {<br>        (digits.zip(src) :\ (Nil : List[T]))(<br>            (t, acc) =&gt; if(t._1 == 1) t._2 :: acc else acc)<br>    }<br>}<br><br>def from[T](src: List[T]) = {<br>    def iterate(binary: Binary[T]): List[List[T]] = {<br>        binary.toList(src) :: (<br>            if(binary.hasNext) iterate(binary.next) else Nil)<br>    }<br>    iterate(new Binary[T]((list(0, src.size)).toList))<br>}<br><br>from(List(1, 2, 3, 4)).foreach(println)</code></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre class="prettyprint"><code>class Binary<br>    def initialize(digits)<br>        @digits = digits<br>    end<br>    def hasNext<br>        @digits.include? 0<br>    end<br>    def next<br>        i = @digits.index(0)<br>        Binary.new([0] * i + [1] + @digits.drop(i + 1))<br>    end<br>    def toList(src)<br>        @digits.zip(src).reduce([]) { |acc, t| <br>            t[0] == 1 ? acc + [t[1]] : acc <br>        }<br>    end<br>end<br><br>def possibleLts(src)<br>    iter = -&gt;(binary) {<br>        [binary.toList(src)] + <br>            (binary.hasNext ? iter.call(binary.next) : [])<br>    }<br>    iter.call(Binary.new([0] * src.size))<br>end<br>    <br>possibleLts([1, 2, 3, 4]).each do |lt|<br>    print("#{lt}\n")<br>end<br></code></pre>
      <span style="font-family: &quot;Courier New&quot;,Courier,monospace;"><br>
</span>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre class="prettyprint"><code>function list(elem, length) {<br>    var lt = [];<br>    for(var i = 0; i &lt; length; i++) { lt.push(elem); }<br>    return lt;<br>}<br><br>function Binary(digits) { this.digits = digits; }<br><br>Binary.prototype.hasNext = function() {<br>    return this.digits.indexOf(0) != -1;<br>};<br><br>Binary.prototype.next = function() {<br>    var i = this.digits.indexOf(0);<br>    return new Binary(list(0, i).concat(<br>        [1].concat(this.digits.slice(i + 1, this.digits.length))));<br>};<br><br>Binary.prototype.toList = function(src) {<br>    var lt = [];<br>    var i = this.digits.indexOf(1);<br>    if(i != -1) {<br>        for(var j = i; j &lt; this.digits.length; j++) if(this.digits[j] == 1) {<br>            lt.push(src[j]);<br>        }<br>    }<br>    return lt;<br>};<br><br>function from(src) {<br>    var binary = new Binary(list(0, src.length));<br>    var all = [];<br>    all.push(binary.toList(src));<br>    while(binary.hasNext()) {<br>        binary = binary.next();<br>        all.push(binary.toList(src));<br>    }<br>    return all;<br>}<br><br>from([1, 2, 3, 4]).forEach(function(lt) {<br>    print(lt);<br>});<br></code></pre>
      <br>

      
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <span style="font-family: &quot;Courier New&quot;,Courier,monospace;"></span>
      <pre class="prettyprint"><code>import Data.List (elemIndex)<br><br>hasNext digits = 0 `elem` digits<br><br>next digits =<br>    (replicate i 0) ++ (1 : (drop (i + 1) digits))<br>    where (Just i) = 0 `elemIndex` digits<br>    <br>toList digits src =<br>    foldr (\t acc -&gt; if fst t == 1 then snd t : acc <br>                     else acc) [] $ zip digits src<br><br>possibleLts src = iter $ replicate (length src) 0<br>    where<br>        iter digits = <br>            toList digits src : if hasNext digits <br>                                    then iter $ next digits <br>                                    else []<br>            <br>main = sequence [print lt | lt &lt;- possibleLts [1, 2, 3, 4]]<br></code></pre>

    <br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
