<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/search/fibonacci/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明

      

二分搜尋法每次搜尋時，都會將搜尋區間分為一半，所以其搜尋時間為O(log(2)n)，log(2)表示以2為底的log值，這邊要介紹的費氏搜尋，其利用費氏數列作為間隔來搜...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="費氏搜尋法">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/FibonacciSearch.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明

      

二分搜尋法每次搜尋時，都會將搜尋區間分為一半，所以其搜尋時間為O(log(2)n)，log(2)表示以2為底的log值，這邊要介紹的費氏搜尋，其利用費氏數列作為間隔來搜...">


    <title>費氏搜尋法</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="FibonacciSearch.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>費氏搜尋法</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             





      
      <h2>說明</h2>

      

二分搜尋法每次搜尋時，都會將搜尋區間分為一半，所以其搜尋時間為O(log(2)n)，log(2)表示以2為底的log值，這邊要介紹的費氏搜尋，其利用費氏數列作為間隔來搜尋下一個數，所以區間收斂的速度更快，搜尋時間為O(logn)。<br>



      
      <h2>解法</h2>

      

費氏搜尋使用費氏數列來決定下一個數的搜尋位置，所以必須先製作費氏數列，這在之前有提過；費氏搜尋會先透過公式計算求出第一個要搜尋數的位置，以及其代
表的費氏數，以搜尋對象10個數字來說，第一個費氏數經計算後一定是F5，而第一個要搜尋的位置有兩個可能，例如若在下面的數列搜尋的話（為了計算方便，
通常會將索引0訂作無限小的數，而數列由索引1開始）：<br>

      <br>

      <span style="font-family: Courier New,Courier,monospace;">
-∞ 1 3 5 7 9 13 15 17 19 20</span><br>

      <br>



如果要搜尋5的話，則由索引F<sub>5</sub>（F<sub>5</sub>表示第五個費式數作為索引，也就是5）開始搜尋，接下來如果數列中的數大於指定搜尋值時，就往左找，小於時就向右，每次找的間隔是F<sub>4</sub>（第四個費式數作為索引，也就是3）、F<sub>3</sub>（第三個費式數作為索引，也就是2）、F<sub>2</sub>（第二個費式數作為索引，也就是1）來尋找，當費氏數為0時還沒找到，就表示尋找失敗，如下所示： <br>

      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="費式搜尋" title="費式搜尋" src="images/fibonacciSearch-1.jpg" /></div></div><br>

      <br>

      











      
      <div style="text-align: left;">如果要搜尋19，由於第一個搜尋值索引F<sub>5</sub>處的值小於19，所以此時必須對齊數列右方，也就是將第一個搜尋值的索引改為F<sub>5</sub>+2 = 7，然後如同上述的方式進行搜尋，如下所示：<br>



      </div>



      
      <div style="text-align: center;"><div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="費式搜尋" title="費式搜尋" src="images/fibonacciSearch-2.jpg" /></div></div></div>



      
      <div style="text-align: left;">至於第一個搜尋值是如何找到的？我們可以由以下這個公式來求得，其中n為搜尋對象的個數，<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">F<sub>y</sub></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span>為第y個費式數，必須大於等於n，若算出x值，則使用F<sub>x</sub>作為第一個搜尋索引，也就是第x個費式數：<br>

      

      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">F<sub>y</sub></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;+ m = n<br></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">F<sub>y</sub></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"> &gt;= n + 1<br>x = y - 1<br></span>



      </div>

      

&nbsp;<br>

      以10個搜尋對象來說：<br>

      



      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">F<sub>y</sub></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;+ m = 10 </span><br>



      </div>

      

&nbsp;<br>



取<span style="font-weight: bold; font-family: Courier New,Courier,monospace;">F<sub>y</sub></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span> = 8, m = 2，所以可以對照費氏數列得到8是第六個費式數，所以y=6，所以x得5，也就是使用第五個費式數的值（也就是5）作為索引開始搜尋。<br>

      <br>



如果數列在索引5處的值大於指定的搜尋值，則第一個搜尋位置就是索引5的位置，如果小於指定的搜尋值，則第一個搜尋位置必須加上m，也就是F<sub>5</sub> + m = 5 + 2 = 7，也就是索引7的位置，其實加上m的原因，是為了要讓下一個搜尋值剛好是數列的最後一個位置。<br>

      <br>



費氏搜尋看來難懂，但只要掌握F<sub>y</sub> + m = n這個公式，自己找幾個實例算一次，很容易就可以理解；費氏搜尋除了收斂快速之外，由於其本身只會使用到加法與減法，在運算上也可以加快。 





      <br>



      </div>



      <br>




      
      <h2> 實作：<a href="FibonacciSearch.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="FibonacciSearch.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="FibonacciSearch.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="FibonacciSearch.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="FibonacciSearch.htm#Scala"><a href="FibonacciSearch.htm#Ruby">Ruby</a><br>
      </a></h2>




      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define INT_MIN -9999<br><br>void createFibonacci(int[], int);     // 建立費氏數列 <br>int findY(int[], int);          // 找Y值 <br>int fibonacciSearch(int[], int, int);  // 費氏搜尋 <br><br>int main(void) {    <br>    int number[] = {1, 2, 3, 5, 6, 8, 9, 10, 11};<br>    int length = sizeof(number) / sizeof(int);<br>    <br>    printf("數列："); <br>    int i;<br>    for(i = 0; i &lt; length; i++) <br>        printf("%d ", number[i]); <br><br>    printf("\n輸入尋找對象："); <br>    int find;<br>    scanf("%d", &amp;find); <br><br>    if((i = fibonacciSearch(number, length, find)) &gt;= 0) <br>        printf("找到數字於索引 %d ", i); <br>    else <br>        printf("\n找不到指定數"); <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br>    <br>// 建立費氏數列 <br>void createFibonacci(int Fib[], int length) { <br>    Fib[0] = 0; <br>    Fib[1] = 1; <br>    int i;<br>    for(i = 2; i &lt; length; i++) <br>        Fib[i] = Fib[i-1] + Fib[i-2]; <br>} <br><br>// 找 y 值 <br>int findY(int Fib[], int n) { <br>    int i = 0; <br>    while(Fib[i] &lt;= n) i++; <br>    i--; <br>    return i; <br>} <br><br>// 費式搜尋 <br>int fibonacciSearch(int number[], int length, int find) { <br>    int* Fib = malloc(length * sizeof(int));<br>    int f;<br>    for(f = 0; f &lt; length; f++) {<br>        Fib[f] = INT_MIN;<br>    }<br>    <br>    createFibonacci(Fib, length); <br>    <br>    int y  = findY(Fib, length + 1); <br>    int m = length - Fib[y]; <br>    int x = y - 1; <br>	// printf("\nx = %d, m = %d, Fib[x] = %d\n\n", x, m, Fib[x]); <br>    int i = x; <br>    if(number[i] &lt; find) <br>        i += m; <br><br>    int result = -1;<br>    while(Fib[x] &gt; 0) { <br>        if(number[i] &lt; find) <br>            i += Fib[--x]; <br>        else if(number[i] &gt; find) <br>            i -= Fib[--x]; <br>        else {<br>            result = i;<br>            break;<br>        }<br>    } <br>    <br>    free(Fib);<br><br>    return result; <br>}  <br></code></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>public class Search {    <br>    public static int fibonacci(int[] number, int des) { <br>        int[] fib = createFibonacci(number.length); <br>	int max = number.length - 1;<br>        int y  = findY(fib, max+1); <br>        int m = max - fib[y];<br>        int x = y - 1;<br>        // System.out.printf("\nx=%d, m=%d, fib[x]=%d", x, m, fib[x]);<br>        int i = x;<br><br>        if(number[i] &lt; des) <br>            i += m; <br><br>        while(fib[x] &gt; 0) { <br>            if(number[i] &lt; des) <br>                i += fib[--x]; <br>            else if(number[i] &gt; des) <br>                i -= fib[--x]; <br>            else <br>                return i; <br>        } <br>        <br>        return -1; <br><br>    }<br>    <br>    private static int[] createFibonacci(int max) {<br>        int[] fib = new int[max];<br>        for(int i = 0; i &lt; fib.length; i++) {<br>            fib[i] = Integer.MIN_VALUE;   <br>        }<br><br>        fib[0] = 0; <br>        fib[1] = 1; <br><br>        for(int i = 2; i &lt; max; i++) <br>            fib[i] = fib[i-1] + fib[i-2];<br>        <br>        return fib;<br>    }<br>    <br>    private static int findY(int[] fib, int n) {<br>        int i = 0; <br>        while(fib[i] &lt;= n) i++; <br>        i--; <br>        return i;     <br>    }<br>    <br>    public static void main(String[] args) {<br>        int[] number = {1, 2, 3, 5, 6, 8, 9, 10, 11};<br>        int find = Search.fibonacci(number, 2);<br>        System.out.println(find &gt;= 0 ? "找到數值於索引" + find : "找不到數值"); <br>    }<br>} </code></pre>



      <br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>import sys<br>def search(number, des):<br>    fib = fibonacci(len(number))<br>    max = len(number) - 1<br>    y = findY(fib, max + 1)<br>    m = max - fib[y]<br>    x = y - 1<br>    # print("\nx=%d, m=%d, fib[x]=%d" % (x, m, fib[x]))<br>    i = x<br>    if number[i] &lt; des:<br>        i += m<br>    while fib[x] &gt; 0:<br>        if number[i] &lt; des:<br>            x -= 1<br>            i += fib[x]<br>        elif number[i] &gt; des:<br>            x -= 1<br>            i -= fib[x]<br>        else:<br>            return i<br>    return -1<br><br>def fibonacci(max):<br>    fib = [sys.maxsize] * max<br>    fib[0] = 0<br>    fib[1] = 1<br>    for i in range(2, max):<br>        fib[i] = fib[i -1] + fib[i - 2]<br>    return fib<br><br>def findY(fib, n):<br>    i = 0<br>    while fib[i] &lt;= n:<br>        i += 1<br>    return i - 1<br><br>number = [1, 4, 2, 6, 7, 3, 9, 8]<br>number.sort()<br>find = search(number, 3)<br>print("找到數值於索引 " + str(find) if find &gt;= 0 else "找不到數值")</code></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>object Search {<br>    def fibonacci(number: Array[Int], des: Int): Int = {<br>        val fib = fibonacci(number.length)<br><br>        def y(i: Int): Int = if(fib(i) &lt;= number.length) y(i + 1) else i - 1<br>        def search(x: Int, i: Int): Int = {<br>            if(fib(x) &gt; 0 &amp;&amp; number(i) != des) {<br>                if(number(i) &lt; des) search(x - 1, i + fib(x - 1))<br>                else search(x - 1, i - fib(x - 1))<br>            } else i<br>        }<br>        <br>        val x = y(0) - 1<br>        if(number(x) &lt; des) search(x, x + number.length - 1 - fib(x + 1))<br>        else search(x, x)<br>    }<br>    <br>    private def fibonacci(max: Int): Array[Int] = {<br>        def fib(n: Int): Int = n match {<br>            case 0 =&gt; 0<br>            case 1 =&gt; 1<br>            case _ =&gt; fib(n - 1) + fib(n - 2)<br>        }<br>        (for(i &lt;- 0 until max) yield fib(i)).toArray<br>    }<br>}<br><br>val number = Array(1, 2, 3, 4, 6, 7, 8)<br>val find = Search.fibonacci(number, 3)<br>println(if(find &gt;= 0) "找到數值於索引 " + find else "找不到數值")<br></code></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre class="prettyprint"><code>class Integer<br>    N_BYTES = [42].pack('i').size<br>    N_BITS = N_BYTES * 8<br>    MAX = 2 ** (N_BITS - 2) - 1<br>    MIN = -MAX - 1<br>end<br><br>def search(number, des)<br>    fib = fibonacci(number.length)<br>    max = number.length - 1<br>    y = findY(fib, max + 1)<br>    m = max - fib[y]<br>    x = y - 1<br>    i = x<br>    if number[i] &lt; des<br>        i += m<br>    end<br>    while fib[x] &gt; 0<br>        if number[i] &lt; des<br>            x -= 1<br>            i += fib[x]<br>        elsif number[i] &gt; des<br>            x -= 1<br>            i -= fib[x]<br>        else<br>            return i<br>        end<br>    end<br>    -1<br>end<br><br>def fibonacci(max)<br>    fib = Array.new(max, Integer::MAX)<br>    fib[0] = 0<br>    fib[1] = 1<br>    2.upto(max - 1) { |i|<br>        fib[i] = fib[i -1] + fib[i - 2]<br>    }<br>    fib<br>end<br><br>def findY(fib, n)<br>    i = 0<br>    while fib[i] &lt;= n<br>        i += 1<br>    end<br>    i - 1<br>end<br><br>number = [1, 4, 2, 6, 7, 3, 9, 8]<br>number.sort!<br>find = search(number, 2)<br>print find &gt;= 0 ? "找到數值於索引 ".encode("Big5") + find.to_s : <br>         "找不到數值".encode("Big5"), "\n"<br></code></pre>





<br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
