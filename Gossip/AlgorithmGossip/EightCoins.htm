<!DOCTYPE html>
<html lang="zh-tw">
  <head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/basics/coins/'">
    <meta content="text/html; charset=utf-8" http-equiv="content-type">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="&nbsp;說明
      
現有八枚銀幣a b c d e f g h，已知其中一枚是假幣，其重量不同於真幣，但不知是較輕或較重，如何使用天平以最少的比較次數，決定出哪枚是假幣，並得知假幣...">
    <meta property="og:locale" content="zh_TW">
    <meta property="og:title" content="八枚銀幣">
    <meta property="og:type" content="article">
    <meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/EightCoins.htm">
    <meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
    <meta property="og:site_name" content="OPENHOME.CC">
    <meta property="og:description" content="&nbsp;說明
      
現有八枚銀幣a b c d e f g h，已知其中一枚是假幣，其重量不同於真幣，但不知是較輕或較重，如何使用天平以最少的比較次數，決定出哪枚是假幣，並得知假幣...">
    <title>八枚銀幣</title>
    <link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">
    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">    <![endif]-->
    <!--[if gt IE 8]><!-->
    <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
    <link rel="stylesheet" href="../css/caterpillar.css">
    <script async="" src="../google-code-prettify/run_prettify.js"></script>
  <!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
  <body>
    <div id="layout">
      <!-- Menu toggle --> <a href="EightCoins.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span> </a>
      <div id="menu">
        <div class="pure-menu"> <a class="pure-menu-heading" href="index.html">回
            Algorithm</a>
          <ul class="pure-menu-list">
            <br>
            <div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img
                  title="Twitter" alt="Twitter" src="../images/twitter.png"></a>
              <a href="http://www.facebook.com/openhome.cc"><img title="Facebook"
                  alt="Facebook" src="../images/facebook.png"></a>
              </div>
            <br>
            <div id="search box">
              <script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div>
            <br>
            <div class="ad" style="text-align: center;">
              <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
              <!-- 2015 新版型 160 x 600 廣告 -->
              <ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px"
                data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883"></ins>
              <script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
          </ul>
        </div>
      </div>
      <main id="main">
        <header class="header">
          <h1>八枚銀幣</h1>
        </header>
        <article class="content"><br>
          <div class="ad-3" style="text-align: center;">
            <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins
              class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390"
              data-ad-slot="7104125683" data-ad-format="auto"></ins>
            <script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>
          <h2>&nbsp;說明</h2>
          現有八枚銀幣a b c d e f g
          h，已知其中一枚是假幣，其重量不同於真幣，但不知是較輕或較重，如何使用天平以最少的比較次數，決定出哪枚是假幣，並得知假幣比真幣較輕或較重。<br>
          <h2>解法</h2>
          單就求假幣的問題是不難，但問題限制使用最少的比較次數，所以我們不能以單純的迴圈比較來求解，我們可以使用決策樹（decision
          tree），使用分析與樹狀圖來協助求解。<br>
          <br>
          一個簡單的狀況是這樣的，我們比較a+b+c與d+e+f
          ，如果相等，則假幣必是g或h，我們先比較g或h哪個較重，如果g較重，再與a比較（a是真幣），如果g等於a，則g為真幣，則h為假幣，由於h比g輕而
          g是真幣，則h假幣的重量比真幣輕。<br>
          <br>
          完整的比較決策樹如下圖所示： <br>
          <div style="text-align: center;">
            <div class="pure-g">
              <div class="pure-u-1"><img class="pure-img-responsive" alt="八枚銀幣"
                  title="八枚銀幣" src="images/eightCoins-1.jpg"></div>
            </div>
            <br>
            <br>
          </div>
          為了方便使用迴圈，使用號碼0至7表示銀幣，範例程式可以讓您輸入假幣重量，但您無法事先得知假幣是哪一枚，程式可得知假幣是哪一枚，且它比真幣輕或
          重。 <br>
          <h2> 實作：<a href="EightCoins.htm#Toy">Toy</a>&nbsp;&nbsp; &nbsp;<a href="EightCoins.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="EightCoins.htm#Java">Java</a>&nbsp;&nbsp;
            &nbsp;<a href="EightCoins.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="EightCoins.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp;
            <a href="EightCoins.htm#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="EightCoins.htm#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp;
            <a href="EightCoins.htm#Haskell">Haskell</a>&nbsp;&nbsp;&nbsp; <a href="EightCoins.htm#Prolog">Prolog</a><br>
          </h2>
          <ul>
            <li><a name="Toy"><a href="../Toy/index.html">Toy</a></a>  </li>
          </ul>
          <pre class="prettyprint"><code>from '/lib/math' import sum

def compare(coins, i, j, k) { 
    if coins.get(i) > coins.get(k) {
        println('The fake coin {0} is heavier.'.format(i + 1))
    } 
    else {
        println('The fake coin {0} is lighter.'.format(j + 1))
    }                   
} 

def coins(coins) {
    c1 = sum(coins.slice(0, 3)) - sum(coins.slice(3, 6))
    c2 = sum(coins.get(0), coins.get(3)) - sum(coins.get(1), coins.get(4))

    if c1 == 0 {
        compare67(coins)
    }
    else {
        compare1To5(coins, c1, c2)
    }
}

def compare67(coins) {
    if coins.get(6) > coins.get(7) {
        compare(coins, 6, 7, 0)
    }
    else {
        compare(coins, 7, 6, 0)
    }
}

def compare1To5(coins, c1, c2) {
    if c1 > 0 {
        c1GreaterThan0(coins, c2)
    } 
    else { 
        c1NotGreaterThan0(coins, c2)
    } 
}

def c1GreaterThan0(coins, c2) {
    if c2 == 0 {
        compare(coins, 2, 5, 0) 
    }
    else {
        if c2 > 0 {
            compare(coins, 0, 4, 1) 
        }
        else {
            compare(coins, 1, 3, 0)
        }
    } 
}

def c1NotGreaterThan0(coins, c2) {
    if c2 == 0 {
        compare(coins, 5, 2, 0)
    }
    else {
        if c2 > 0 {
            compare(coins, 3, 1, 0)
        }
        else {
            compare(coins, 4, 0, 1)
        }
    } 
}

coins([5, 5, 5, 4, 5, 5, 5, 5])</code></pre>
          <br>
          <ul>
            <li><a name="C">C</a>  </li>
          </ul>
          <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br><br>void compare(int[], int, int, int); <br>void fake(int[]); <br> <br>int main(void) { <br>    srand(time(NULL)); <br><br>    int coins[8] = {0}; <br>    int i;<br>    for(i = 0; i &lt; 8; i++) {<br>        coins[i] = 10; <br>    }<br><br>    printf("\n輸入假幣重量 ( 比10大或小 )："); <br>    <br>    int input;<br>    scanf("%d", &amp;input); <br>    coins[rand() % 8] = input;<br><br>    fake(coins); <br><br>    printf("\n\n列出所有錢幣重量："); <br>    for(i = 0; i &lt; 8; i++) {<br>        printf("%d ", coins[i]); <br>    }<br>    <br>    return 0; <br>} <br><br>void compare(int coins[], int i, int j, int k) { <br>    if(coins[i] &gt; coins[k]) printf("\n假幣 %d 較重", i + 1); <br>    else                    printf("\n假幣 %d 較輕", j + 1); <br>} <br><br>void fake(int coins[]) { <br>    int c1 = coins[0] + coins[1] + coins[2] - coins[3] - coins[4] - coins[5];<br>    int c2 = coins[0] + coins[3] - coins[1] - coins[4];<br>    <br>    if(!c1) {<br>        if(coins[6] &gt; coins[7]) compare(coins, 6, 7, 0);<br>        else                    compare(coins, 7, 6, 0); <br>    }<br>    else if(c1 &gt; 0) { <br>        if(!c2)                 compare(coins, 2, 5, 0); <br>        else if(c2 &gt; 0)         compare(coins, 0, 4, 1); <br>        else                    compare(coins, 1, 3, 0); <br>    } <br>    else { <br>        if(!c2)                 compare(coins, 5, 2, 0); <br>        else if(c2 &gt; 0)         compare(coins, 3, 1, 0); <br>        else                    compare(coins, 4, 0, 1); <br>    } <br>}<br></code></pre>
          <br>
          <ul>
            <li><a name="Java">Java</a>  </li>
          </ul>
          <pre class="prettyprint"><code>interface Fake {<br>    void doAction(int index, boolean isBigger);<br>}<br><br>public class Coins {<br>    public static void compare(int[] coins, int i, int j, int k, Fake fake) {<br>        if(coins[i] &gt; coins[k]) fake.doAction(i + 1, true);<br>        else                    fake.doAction(j + 1, false);<br>    }<br>    <br>    public static void compare(int[] coins, Fake fake) {<br>        Integer h1 = coins[0] + coins[1] + coins[2];<br>        Integer h2 = coins[3] + coins[4] + coins[5];<br>        Integer h3 = coins[0] + coins[3];<br>        Integer h4 = coins[1] + coins[4];<br>        <br>        switch(h1.compareTo(h2)) {<br>            case  0: if(coins[6] &gt; coins[7]) <br>                                  compare(coins, 6, 7, 0, fake);<br>                     else         <br>                                  compare(coins, 7, 6, 0, fake);<br>                     break;<br>            case  1: switch(h3.compareTo(h4)) {<br>                         case  0: compare(coins, 2, 5, 0, fake); break;<br>                         case  1: compare(coins, 0, 4, 1, fake); break;<br>                         case -1: compare(coins, 1, 3, 0, fake); <br>                     } break;<br>            case -1: switch(h3.compareTo(h4)) {<br>                         case  0: compare(coins, 5, 2, 0, fake); break;<br>                         case  1: compare(coins, 3, 1, 0, fake); break;<br>                         case -1: compare(coins, 4, 0, 1, fake); <br>                     }<br>        }<br>    }<br><br>    public static void main(String[] args) {<br>        compare(new int[] {10, 10, 11, 10, 10, 10, 10, 10},<br>          // JDK8 Lambda<br>          (index, isBigger) -&gt; {<br>             System.out.printf("硬幣 %d 較%s", index, isBigger ? "大" : "小");<br>          }<br>        );<br>    }<br>}<br></code></pre>
          <br>
          <ul>
            <li><a name="Python">Python</a></li>
          </ul>
          <pre class="prettyprint"><code>def compare(coins, i, j, k):<br>    return (i + 1, True) if coins[i] &gt; coins[k] else (j + 1, False)<br>    <br>def coins(coins):<br>    c1 = sum(coins[0:3]) - sum(coins[3:6])<br>    c2 = sum([coins[0], coins[3]]) - sum([coins[1], coins[4]])<br>    return (                           (compare(coins, 6, 7, 0) <br>            if coins[6] &gt; coins[7] else compare(coins, 7, 6, 0)) <br>        if c1 == 0 else (((             compare(coins, 2, 5, 0) <br>            if c2 == 0 else             compare(coins, 0, 4, 1)) <br>            if c2 &gt; 0 else              compare(coins, 1, 3, 0)) <br>        if c1 &gt; 0 else (                compare(coins, 5, 2, 0)<br>            if c2 == 0 else (           compare(coins, 3, 1, 0)<br>            if c2 &gt; 0 else              compare(coins, 4, 0, 1)))))<br>    <br>i, isBigger = coins([10, 10, 10, 10, 2, 10, 10, 10])<br>print('硬幣', i, '重' if isBigger else '輕', end='')</code></pre>
          <br>
          <ul>
            <li><a name="Scala">Scala</a></li>
          </ul>
          <pre class="prettyprint"><code>def coins(coins: List[Int]) = {<br>    def compare(coins: List[Int], i: Int, j: Int, k: Int) = {<br>        if(coins(i) &gt; coins(k)) (i + 1, true) else (j + 1, false)<br>    }<br><br>    val h1 = coins.slice(3, 6).sum<br>    val h2 = coins.slice(3, 6).sum<br>    val h3 = coins(0) + coins(3);<br>    val h4 = coins(1) + coins(4);<br>    <br>    h1.compareTo(h2) match {<br>        case  0 =&gt; if(coins(6) &gt; coins(7)) compare(coins, 6, 7, 0)<br>                   else                    compare(coins, 7, 6, 0)<br>        case  1 =&gt; h3.compareTo(h4) match {<br>                       case  0 =&gt;          compare(coins, 2, 5, 0)<br>                       case  1 =&gt;          compare(coins, 0, 4, 1)<br>                       case -1 =&gt;          compare(coins, 1, 3, 0)<br>                   }<br>        case -1 =&gt; h3.compareTo(h4) match {<br>                       case  0 =&gt;          compare(coins, 5, 2, 0)<br>                       case  1 =&gt;          compare(coins, 3, 1, 0)<br>                       case -1 =&gt;          compare(coins, 4, 0, 1)<br>                   }<br>    }<br>}<br><br>val (i, isBigger) = coins(List(10, 10, 11, 10, 10, 10, 10, 10))<br>printf("硬幣 %d 較%s", i, if(isBigger) "重" else "輕")</code></pre>
          <br>
          <ul>
            <li><a name="Ruby"></a>Ruby</li>
          </ul>
          <pre class="prettyprint"><code># encoding: Big5<br>def compare(coins, i, j, k)<br>   if coins[i] &gt; coins[k]<br>       {index: i + 1, isBigger: true} <br>   else <br>       {index: j + 1, isBigger: false} <br>   end<br>end<br><br>def coins(coins)<br>    h1 = coins.take(3).reduce(:+)<br>    h2 = coins[3...6].reduce(:+)<br>    h3 = coins[0] + coins[3]<br>    h4 = coins[1] + coins[4]<br>    <br>    case h1 &lt;=&gt; h2<br>    when  0; if coins[6] &gt; coins[7]<br>                      compare(coins, 6, 7, 0)<br>             else<br>                      compare(coins, 7, 6, 0) <br>             end<br>    when  1; case h3 &lt;=&gt; h4<br>             when  0; compare(coins, 2, 5, 0)<br>             when  1; compare(coins, 0, 4, 1)<br>             when -1; compare(coins, 1, 3, 0)<br>             end<br>    when -1; case h3 &lt;=&gt; h4<br>             when  0; compare(coins, 5, 2, 0)<br>             when  1; compare(coins, 3, 1, 0)<br>             when -1; compare(coins, 4, 0, 1)<br>             end<br>    end<br>end<br><br>fake = coins [10, 10, 10, 10, 2, 10, 10, 10]<br>printf("假幣 %d 較%s", fake[:index], if fake[:isBigger]; "重" else "輕" end)<br></code></pre>
          <br>
          <ul>
            <li><a name="JavaScript">JavaScript</a></li>
          </ul>
          <pre class="prettyprint"><code>var coins = function() {<br>    function compare(coins, i, j, k) {<br>        return coins[i] &gt; coins[k] ? {index: i + 1, isBigger: true} : <br>                                     {index: j + 1, isBigger: false};<br>    }<br>    return function(coins) {<br>        var c1 = coins[0] + coins[1] + coins[2] - <br>                 coins[3] - coins[4] - coins[5];<br>        var c2 = coins[0] + coins[3] - coins[1] - coins[4];<br>        return (c1 === 0 ? (coins[6] &gt; coins[7] ? compare(coins, 6, 7, 0)  : <br>                                                  compare(coins, 7, 6, 0)) : <br>               (c1 &gt; 0 ? <br>                   (c2 === 0 ?                    compare(coins, 2, 5, 0)  : <br>                   (c2 &gt; 0 ?                      compare(coins, 0, 4, 1)  : <br>                                                  compare(coins, 1, 3, 0))): <br>                   (c2 === 0 ?                    compare(coins, 5, 2, 0)  : <br>                   (c2 &gt; 0 ?                      compare(coins, 3, 1, 0)  : <br>                                                  compare(coins, 4, 0, 1))))<br>               );<br>    };<br>}();<br><br>var fake = coins([10, 10, 10, 2, 10, 10, 10, 10]);<br>print('假幣 ' + fake.index + ' 較' + (fake.isBigger ? '重' : '輕'));<br></code></pre>
          <br>
          <ul>
            <li><a name="Haskell">Haskell</a></li>
          </ul>
          <pre class="prettyprint"><code>import Text.Printf<br><br>coins cs = case h1 `compare` h2 of<br>               EQ -&gt; if cs !! 6 &gt; cs !! 7 then comp cs 6 7 0<br>                                          else comp cs 7 6 0<br>               GT -&gt; case h3 `compare` h4 of<br>                         EQ -&gt; comp cs 2 5 0<br>                         GT -&gt; comp cs 0 4 1<br>                         LT -&gt; comp cs 1 3 0<br>               LT -&gt; case h3 `compare` h4 of<br>                         EQ -&gt; comp cs 5 2 0<br>                         GT -&gt; comp cs 3 1 0<br>                         LT -&gt; comp cs 4 0 1<br>    where h1 = sum \$ take 3 cs<br>          h2 = sum \$ take (5 - 3) \$ drop 3 cs<br>          h3 = cs !! 0 + cs !! 3<br>          h4 = cs !! 1 + cs !! 4<br>          comp cs i j k= if cs !! i &gt; cs !! k then (i + 1, True) <br>                                              else (j + 1, False)<br>          <br>main = printf "Coin %d is %s" index (if isHeavy then "heavy" else "light")<br>    where (index, isHeavy) = coins [10, 10, 10, 10, 2, 10, 10, 10]<br></code></pre>
          <br>
          <ul>
            <li>
              <a id="Prolog">Prolog</a></li>
          </ul>
          <pre class="prettyprint"><code>round3(Coins, I, _, K, [I, heavier]) :-
    nth1(I, Coins, CI), nth1(K, Coins, CK), CI &gt; CK, !.
round3(_, _, J, _, [J, lighter]).

ordercases((&gt;), (=), Coins, Fake) :- round3(Coins, 3, 6, 1, Fake), !.
ordercases((&gt;), (&gt;), Coins, Fake) :- round3(Coins, 1, 5, 2, Fake), !.
ordercases((&gt;), (&lt;), Coins, Fake) :- round3(Coins, 2, 4, 1, Fake), !.
ordercases((&lt;), (=), Coins, Fake) :- round3(Coins, 6, 3, 1, Fake), !.
ordercases((&lt;), (&gt;), Coins, Fake) :- round3(Coins, 4, 2, 1, Fake), !.
ordercases((&lt;), (&lt;), Coins, Fake) :- round3(Coins, 5, 1, 2, Fake).

round2(Coins, (=), Fake) :-
    nth1(7, Coins, C7), nth1(8, Coins, C8), 
    compare(Order, C7, C8), (
       Order == (&gt;) -&gt; round3(Coins, 7, 8, 1, Fake);
       round3(Coins, 7, 8, 1, Fake)
    ).

round2(Coins, H12Order, Fake) :-
    [C1, C2, _, C4, C5, _, _, _] = Coins,
    H3 is C1 + C4, 
    H4 is C2 + C5,
    compare(H34Order, H3, H4), 
    ordercases(H12Order, H34Order, Coins, Fake).

which(Coins, Fake) :-
    [C1, C2, C3, C4, C5, C6, _, _] = Coins,
    H1 is C1 + C2 + C3, 
    H2 is C4 + C5 + C6,
    compare(Order, H1, H2),
    round2(Coins, Order, Fake).
    
main(_) :- 
    which([1, 1, 1, 2, 1, 1, 1, 1], Fake),
    write(Fake), nl.<br></code></pre>
          <br>
          <div class="ad336-280" style="text-align: center;">
            <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins
              class="adsbygoogle" style="display:inline-block;width:336px;height:280px"
              data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins>
            <script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>
          <br>
          <div class="recommend" style="text-align: center;">
            <hr>
            <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins
              class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390"
              data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins>
            <script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>
        </article>
      </main>
    </div></body>
    <script src="../js/ui.js"></script>
    <div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
</html>
