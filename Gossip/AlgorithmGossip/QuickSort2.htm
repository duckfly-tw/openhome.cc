<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/sort/quick2/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明

      

在 快速排序法（一） 中，每次將最左邊元素設為軸，而之前快速排序法的速度在於軸的選擇，在這裡的實作中，是選定中間的元素值作比較與分割，這可以增加快速排序法效率。

...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="快速排序法（二）">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/QuickSort2.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明

      

在 快速排序法（一） 中，每次將最左邊元素設為軸，而之前快速排序法的速度在於軸的選擇，在這裡的實作中，是選定中間的元素值作比較與分割，這可以增加快速排序法效率。

...">


    <title>快速排序法（二）</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="QuickSort2.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>快速排序法（二）</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             





      
      <h2>說明</h2>

      

在 <a href="QuickSort1.htm">快速排序法（一） </a>中，每次將最左邊元素設為軸，而之前快速排序法的速度在於軸的選擇，在這裡的實作中，是選定中間的元素值作比較與分割，這可以增加快速排序法效率。<br>



      
      <h2>解法</h2>

      

在這邊的實例作中，取中間元素S的值作比較，並同時由左而右及由右至左分出子數列：<br>
      <br>
      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/quickSort2-1.jpg" /></div></div><br>
      <br>
尚未處理的數列會是在中間被逐步消化完畢，原本選定的S也會被分至子數列之中：<br>
      <br>
      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/quickSort2-2.jpg" /></div></div><br>
      <br>
接下來對左邊子數列與右邊子數列進行相同動作，直到完成排序目的。<br>
      <br>





      
      <h2> 實作：<a href="QuickSort2.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="QuickSort2.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="QuickSort2.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="QuickSort2.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="QuickSort2.htm#Scala"></a><a href="QuickSort2.htm#Ruby">Ruby</a><br>
      </h2>




      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define MAX 10 <br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>void quickSort(int[], int, int); <br><br>int main(void) { <br>    srand(time(NULL)); <br>    <br>    int number[MAX] = {0};    <br><br>    printf("排序前："); <br>    int i;  <br>    for(i = 0; i &lt; MAX; i++) { <br>        number[i] = rand() % 100; <br>        printf("%d ", number[i]); <br>    } <br><br>    quickSort(number, 0, MAX-1); <br><br>    printf("\n排序後："); <br>    for(i = 0; i &lt; MAX; i++) <br>        printf("%d ", number[i]); <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>void quickSort(int number[], int left, int right) { <br>    if(left &lt; right) { <br>        int s = number[(left+right)/2]; <br>        int i = left - 1; <br>        int j = right + 1; <br><br>        while(1) { <br>            while(number[++i] &lt; s) ;  // 向右找 <br>            while(number[--j] &gt; s) ;  // 向左找 <br>            if(i &gt;= j) <br>                break; <br>            SWAP(number[i], number[j]); <br>        } <br><br>        quickSort(number, left, i-1);   // 對左邊進行遞迴 <br>        quickSort(number, j+1, right);  // 對右邊進行遞迴 <br>    } <br>} <br></code></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>public class Sort {<br>    public static void quick(int[] number) {<br>        sort(number, 0, number.length-1);<br>    }<br>    <br>    private static void sort(int[] number, int left, int right) {<br>        if(left &lt; right) { <br>            int s = number[(left+right)/2]; <br>            int i = left - 1; <br>            int j = right + 1; <br><br>            while(true) { <br>                // 向右找<br>                while(number[++i] &lt; s) ;<br>                // 向左找<br>                while(number[--j] &gt; s) ; <br>                if(i &gt;= j) <br>                    break; <br>                swap(number, i, j); <br>            } <br><br>            sort(number, left, i-1);   // 對左邊進行遞迴 <br>            sort(number, j+1, right);  // 對右邊進行遞迴 <br>        }<br>    }<br>    <br>    private static void swap(int[] number, int i, int j) {<br>        int t = number[i]; <br>        number[i] = number[j]; <br>        number[j] = t;<br>    }<br>}<br></code></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>def sort(number):<br>    realsort(number, 0, len(number) - 1)<br><br>def realsort(number, left, right):<br>    if left &lt; right:<br>        s = number[(left + right) // 2]<br>        i = left - 1<br>        j = right + 1<br>        while True:<br>            while True:<br>                i += 1<br>                if number[i] &gt;= s:<br>                    break<br>            while True:<br>                j -= 1<br>                if number[j] &lt;= s:<br>                    break<br>            if i &gt;= j:<br>                break<br>            number[i], number[j] = number[j], number[i]<br>        realsort(number, left, i - 1)<br>        realsort(number, j + 1, right)</code></pre>&nbsp;<br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>object Sort {<br>    def quick(number: Array[Int]) {<br>        sort(number, 0, number.length - 1)<br>    }<br>    <br>    private def sort(number: Array[Int], left: Int, right: Int) {<br>        if(left &lt; right) {<br>            val s = number((left + right) / 2)<br>            var i = left - 1<br>            var j = right + 1<br>            do {<br>                do i += 1 while(number(i) &lt; s)<br>                do j -= 1 while(number(j) &gt; s)<br>            } while(if(i &gt;= j) false else {swap(number, i, j); true})<br>            sort(number, left, i - 1)<br>            sort(number, j + 1, right)<br>        }<br>    }<br>    <br>    private def swap(number: Array[Int], i: Int, j: Int) {<br>        val t = number(i)<br>        number(i) = number(j)<br>        number(j) = t<br>    }<br>}<br></code></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre class="prettyprint"><code>def sort(number)<br>    realsort(number, 0, number.length - 1)<br>end<br><br>def realsort(number, left, right)<br>    if left &lt; right<br>        s = number[(left + right) / 2]<br>        i = left - 1<br>        j = right + 1<br>        while true<br>            while true<br>                i += 1<br>                if number[i] &gt;= s<br>                    break<br>                end<br>            end<br>            while true<br>                j -= 1<br>                if number[j] &lt;= s<br>                    break<br>                end<br>            end<br>            if i &gt;= j<br>                break<br>            end<br>            number[i], number[j] = number[j], number[i]<br>        end<br>        realsort(number, left, j - 1)<br>        realsort(number, j + 1, right)<br>    end<br>end<br></code></pre>
      <br>



<br><br><div class="ad-2" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
