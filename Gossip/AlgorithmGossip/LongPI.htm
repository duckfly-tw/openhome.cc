<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/numbers/long-pi/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明

      

圓周率後的小數位數是無止境的，如何使用電腦來計算這無止境的小數是一些數學家與程式設計師所感興趣的，在這邊介紹一個公式配合 大數運算，可以計算指定位數的圓周率。

...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="長 PI">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/LongPI.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明

      

圓周率後的小數位數是無止境的，如何使用電腦來計算這無止境的小數是一些數學家與程式設計師所感興趣的，在這邊介紹一個公式配合 大數運算，可以計算指定位數的圓周率。

...">


    <title>長 PI</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="LongPI.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>長 PI</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             
      
      <h2>說明</h2>

      

圓周率後的小數位數是無止境的，如何使用電腦來計算這無止境的小數是一些數學家與程式設計師所感興趣的，在這邊介紹一個公式配合 <a href="BigNumber.htm">大數運算</a>，可以計算指定位數的圓周率。<br>



      
      <h2>解法</h2>

      

首先介紹J.Marchin的圓周率公式：<br>

      

      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">PI = [16 / 5 - 16 / (3 * 5<sup>3</sup>) + 16 / (5 * 5<sup>5</sup>) - 16 / (7 * 5<sup>7</sup>) + ......] -</span><br>



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[4 / 239 - 4 / (3 * 239<sup>3</sup>) + 4 / (5 * 239<sup>5</sup>) - 4 / (7 * 239<sup>7</sup>) + ......]</span><br>



      </div>



      <br>



可以將這個公式整理為：<br>

      

      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">PI = [16 / 5 - 4 / 239] - [16 / 5<sup>3</sup> - 4 / 239<sup>3</sup>] / 3 + [16 / 5<sup>5</sup> - 4 / 239<sup>5</sup>] / 5 + ......</span><br>



      </div>



      <br>



也就是說第n項，若為奇數則為正數，為偶數則為負數，而項數表示方式為：<br>

      

      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">[16 / 5<sup> 2 * n - 1</sup> - 4 / 239<sup> 2 * n - 1</sup>] / (2 * n - 1)</span><br>



      </div><br>




如果我們要計算圓周率至10的負L次方，由於[16 / 5<sup> 2 * n - 1</sup> - 4 / 239 <sup>2 * n - 1</sup>]中16 / 5<sup> 2 * n - 1</sup>比4 / 239<sup> 2 * n - 1</sup>來的大，具有決定性，所以表示至少必須計算至第n項：<br>

      

      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">[16 / 5<sup> 2 * n - 1</sup> ] / (2 * n - 1) = 10<sup>-L</sup></span><br>



      </div>



      <br>



將上面的等式取log並經過化簡，我們可以求得：<br>

      

      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">n = L / (2log5) = L / 1.39794</span><br>



      </div>



      <br>



所以若要求精確度至小數後L位數，則只要求至公式的第n項，其中n等於：<br>

      

      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">n = [L / 1.39794] + 1</span><br>



      </div>



      <br>



在上式中[]為高斯符號，也就是取至整數（不大於L / 1.39794的整數）；為了計算方便，可以在程式中使用下面這個公式來計算第n項：<br>

      

      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">[</span>W<span style="font-weight: bold; font-family: Courier New,Courier,monospace;"><sub>n - 1</sub> / 5</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">2n</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"> - </span>V<span style="font-weight: bold; font-family: Courier New,Courier,monospace;"><sub>n - 1</sub> / 239</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">2n</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">] / (2 * n - 1)</span><br>



      </div>



      <br>其中n從1開始，而W<sub>0</sub>為16 * 5，V<sub>0</sub>為4 * 239，這個公式的演算法配合大數運算函式的演算法為：
      
      
      <div style="margin-left: 40px; font-weight: bold;"><span style="font-family: Courier New,Courier,monospace;">div(w, 25, w); </span><span style="font-family: Courier New,Courier,monospace;"></span><br>


      <span style="font-family: Courier New,Courier,monospace;">divide(v, 57121, v); // 239 * 239 = 57121</span><br>


      <span style="font-family: Courier New,Courier,monospace;">
sub(w, v, q); </span><br>


      <span style="font-family: Courier New,Courier,monospace;">
div(q, 2 * k - 1, q); </span><br>



      </div>&nbsp;

      

      <br>
最後的PI就是由單獨求得的第n項加總而得，因而大數運算後第一個數字代表整數，第二個位數之後是代表小數。為了計算精確度至小數後L位數，大整數運算必
須有L+1個位數。如果具備處理浮點數精確度的BigDecimal之類的API，亦可直接使用，但要注意預留位數與四捨五入問題，因為在除法過程中，可
能有循環小數無法表示的問題。<br>

      <br>



您可以參考 <a href="http://crd.lbl.gov/%7Edhbailey/">這個網站</a> 有關於另一個用公式求PI的說明，它的實作在 <a href="http://crd.lbl.gov/%7Edhbailey/piqp.c">這邊</a>。

      <br>



      <br>



      
      <h2> 實作：<a href="LongPI.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="LongPI.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="LongPI.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="LongPI.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="LongPI.htm#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="LongPI.htm#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="LongPI.htm#Haskell">Haskell</a><br>
      </h2>




      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt;<br><br>#define L 1000 <br>#define N L / 4 + 1 <br><br>// L 為位數，N是array長度 <br><br>// 只處理正數的大整數加、減、除<br>void add(int*, int*, int*);       <br>void subtract(int*, int*, int*);<br>void divide(int*, int, int*);<br><br>int main(void) { <br>    int s[N] = {0}; <br>    int w[N] = {0}; <br>    int v[N] = {0}; <br>    int q[N] = {0}; <br>    int n = (int) (L / 1.39793 + 1); <br><br>    w[0] = 16 * 5; <br>    v[0] = 4 * 239;<br><br>    int k; <br>    for(k = 1; k &lt;= n; k++) { <br>        // 套用公式 <br>        divide(w, 25, w); <br>        divide(v, 57121, v); // 239 * 239 = 57121<br>        subtract(w, v, q); <br>        divide(q, 2 * k - 1, q); <br><br>        if(k % 2) {// 奇數項 <br>            add(s, q, s); <br>        } else {   // 偶數項 <br>            subtract(s, q, s); <br>        }<br>    } <br><br>    printf("%d.", s[0]); <br>    for(k = 1; k &lt; N; k++) {<br>        printf("%04d", s[k]); <br>    }<br>   <br>    return 0; <br>} <br><br>void add(int* a, int* b, int* c) { <br>    int i, carry = 0; <br>    for(i = N - 1; i &gt;= 0; i--) {<br>        c[i] = a[i] + b[i] + carry; <br>        if(c[i] &lt; 10000) {<br>            carry = 0; <br>        } else { // 進位 <br>            c[i] = c[i] - 10000; <br>            carry = 1; <br>        } <br>    } <br>} <br><br>void subtract(int* a, int* b, int* c) {<br>    int i, borrow = 0; <br>    for(i = N - 1; i &gt;= 0; i--) { <br>        c[i] = a[i] - b[i] - borrow; <br>        if(c[i] &gt;= 0) {<br>            borrow = 0;<br>        } else { // 借位 <br>            c[i] = c[i] + 10000; <br>            borrow = 1; <br>        } <br>    } <br>} <br><br>void divide(int* a, int b, int *c) {  // b 為除數 <br>    int i, tmp, remain = 0; <br>    for(i = 0; i &lt; N; i++) { <br>        tmp = a[i] + remain; <br>        c[i] = tmp / b; <br>        remain = (tmp % b) * 10000; <br>    } <br>}<br></code></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>import java.math.BigInteger;<br><br>public class LongPI {<br>    private final BigInteger PI;<br>    <br>    public LongPI(int L) {<br>        int n = (int) (L / 1.39793 + 1);<br>        <br>        BigInteger b25 = BigInteger.valueOf(25);<br>        BigInteger b57121 = BigInteger.valueOf(57121);<br>        BigInteger scale = BigInteger.valueOf(10).pow(L);<br>        <br>        BigInteger w = BigInteger.valueOf(16 * 5).multiply(scale);<br>        BigInteger v = BigInteger.valueOf(4 * 239).multiply(scale);<br>        BigInteger s = BigInteger.valueOf(0);<br>        BigInteger q = null;<br>        for(int k = 1; k &lt;= n; k++) {<br>            w = w.divide(b25);<br>            v = v.divide(b57121);<br>            q = w.subtract(v).divide(BigInteger.valueOf(2 * k - 1));<br>            s = k % 2 == 1 ? s.add(q) : s.subtract(q);<br>        }<br>        PI = s;<br>    }<br>    <br>    public String toString() {<br>        String str = PI.toString();<br>        return String.format("%c.%s", str.charAt(0), str.substring(1));<br>    }<br>    <br>    public static void main(String[] args) {<br>        System.out.println(new LongPI(1000));<br>    }<br>}</code></pre>



      <br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>class LongPI:<br>    def __init__(self, L):<br>        n = int(L / 1.39793 + 1)<br>        scale = 10 ** L<br>        <br>        def pi(k, w, v):<br>            if k == n + 1:<br>                return 0<br>            else:<br>                wk = w // 25<br>                vk = v // 57121<br>                qk = (wk - vk) // (2 * k - 1)<br>                return (qk if k % 2 == 1 else -qk) + pi(k + 1, wk, vk)<br>        <br>        self.PI = pi(1, 16 * 5 * scale, 4 * 239 * scale)<br>        <br>    def __str__(self):<br>        s = str(self.PI)<br>        return "%c.%s" % (s[0], s[1:])            <br>        <br>print(LongPI(1000))<br></code></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>import scala.math.BigInt<br><br>class LongPI private (pi: BigInt) {<br>    override def toString = {<br>        val str = pi.toString<br>        "%c.%s".format(str(0), str.tail)<br>    }<br>}<br><br>object LongPI {<br>    def apply(l: Int) = {<br>        val n = (l / 1.39793 + 1).toInt<br>        val b25 = BigInt(25)<br>        val b57121 = BigInt(57121)<br>        val scale = BigInt(10).pow(l)<br>        <br>        def pi(k: Int, w: BigInt, v: BigInt): BigInt = {<br>            if(k == n + 1) BigInt(0)<br>            else {<br>                val wk = w / b25<br>                val vk = v / b57121<br>                val qk = (wk - vk) / BigInt(2 * k - 1)<br>                (if(k % 2 == 1) qk else -qk) + pi(k + 1, wk, vk)<br>            }<br>        }<br>        <br>        new LongPI(pi(1, BigInt(16 * 5) * scale, BigInt(4 * 239) * scale))<br>    }<br>}<br><br>print(LongPI(1000)) <br></code></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre class="prettyprint"><code>class LongPI<br>    def initialize(l)<br>        n = (l / 1.39793 + 1).to_i<br>        scale = 10 ** l<br>        <br>        p = -&gt;(k, w, v) {<br>            if k == n + 1<br>                0<br>            else<br>                wk = w / 25<br>                vk = v / 57121<br>                qk = (wk - vk) / (2 * k - 1)<br>                (if k % 2 == 1; qk else -qk end) + p.call(k + 1, wk, vk)<br>            end            <br>        }<br>        <br>        @pi = p.call(1, 16 * 5 * scale, 4 * 239 * scale)<br>    end<br>    <br>    def to_s<br>        str = @pi.to_s<br>        sprintf("%c.%s", str[0], str[1, str.size])<br>    end<br>end<br><br>puts(LongPI.new(1000))<br></code></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre class="prettyprint"><code>// 用到 <a href="BigNumber.htm">大數運算</a> 中的BigNumber<br><br>var LongPI = function() {<br>    function apply(L) {<br>        var n = parseInt(L / 1.39793 + 1);<br>        var b25 = BigNumber('25');<br>        var b57121 = BigNumber('57121');<br>        var scale = BigNumber('1' + new Array(L + 1).join('0'));<br>        <br>        var w = BigNumber('80').multiply(scale);<br>        var v = BigNumber('956').multiply(scale);<br>        var s = BigNumber('0');<br>        for(var k = 1; k &lt;= n; k++) {<br>            w = w.divide(b25);<br>            v = v.divide(b57121);<br>            q = w.subtract(v).divide(BigNumber((2 * k - 1) + ''));<br>            s = k % 2 === 1 ? s.add(q) : s.subtract(q);<br>        }<br>        return new LongPI(s);<br>    }<br>    <br>    function LongPI(PI) {<br>        this.PI = PI;<br>    }<br>    <br>    LongPI.prototype.toString = function() {<br>        var str = this.PI.toString();<br>        return str[0] + '.' + str.substring(1);<br>    };<br>    <br>    return apply;<br>}();<br><br>print(LongPI(50));<br></code></pre>

      <br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre class="prettyprint"><code>data LongPI = LongPI Integer<br><br>instance Show LongPI where<br>    show (LongPI value) = (head s) : '.' : (tail s)<br>        where s = show value<br><br>longPi l = LongPI \$ p 1 (16 * 5 * scale) (4 * 239 * scale)<br>    where n = truncate (fromIntegral l / 1.39793 + 1)<br>          scale = 10 ^ l<br>          p k w v =<br>              if k == n + 1 then 0<br>              else<br>                  let wk = w `div` 25<br>                      vk = v `div` 57121<br>                      qk = (wk - vk) `div` (2 * k - 1)<br>                  in (if odd k then qk else -qk) + (p (k + 1) wk vk)<br><br>main = print \$ longPi 1000<br></code></pre>
<br>




<br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
