<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/numbers/prime/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明


      大於1的數，除了自身之外，無法被其它整數整除的數稱之為質數，要求質數很簡單，但如何快速的求出質數則一直是程式設計人員與數學家努力的課題，在這邊介紹一個著名的 Eratost...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="Eratosthenes篩選求質數">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/EratosthenesPrime.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明


      大於1的數，除了自身之外，無法被其它整數整除的數稱之為質數，要求質數很簡單，但如何快速的求出質數則一直是程式設計人員與數學家努力的課題，在這邊介紹一個著名的 Eratost...">


    <title>Eratosthenes篩選求質數</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="EratosthenesPrime.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>Eratosthenes篩選求質數</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             



      
      
      <h2>說明</h2>


      大於1的數，除了自身之外，無法被其它整數整除的數稱之為質數，要求質數很簡單，但如何快速的求出質數則一直是程式設計人員與數學家努力的課題，在這邊介紹一個著名的 Eratosthenes求質數方法。<br>



      
      
      <h2>解法</h2>


      
首先知道這個問題可以使用迴圈來求解，將一個指定的數除以所有小於它的數，若可以整除就不是質數，然而如何減少迴圈的檢查次數？如何求出小於N的所有質數？<br>


      <br>



首先假設要檢查的數是N好了，則事實上只要檢查至N的開根號就可以了，道理很簡單，假設A*B =
N，如果A大於N的開根號，則事實上在小於A之前的檢查就可以先檢查到B這個數可以整除N。不過在程式中使用開根號會精確度的問題，所以可以使用
i * i &lt;= N進行檢查，且執行更快。<br>


      <br>



再來假設有一個篩子存放1∼N，例如：<br>


      


      
      
      <div style="margin-left: 40px;"><span style="font-weight: bold;">2　3　4　5　6　7　8　9　10　11　12　13　14　15　16　17　18　19　20　21 ........ N</span><br>



      </div>



      <br>



先將2的倍數篩去：<br>


      
      
      
      <div style="margin-left: 40px;"><span style="font-weight: bold;">2　3　5　7　9　11　13　15　17　19　21 ........ N</span><br>



      </div>



      <br>



再將3的倍數篩去：<br>


      
      
      
      <div style="margin-left: 40px;"><span style="font-weight: bold;">2　3　5　7　11　13　17　19　........ N</span><br>



      </div>



      <br>



再來將5的倍數篩去，再來將7的質數篩去，再來將11的倍數篩去........，如此進行到最後留下的數就都是質數，這就是Eratosthenes篩選方法（Eratosthenes Sieve Method）。<br>


      <br>



檢查的次數還可以再減少，事實上，只要檢查6n + 1與6n + 5就可以了，也就是直接跳過2與3的倍數，使得程式中的if的檢查動作可以減少。 
      <br>






      
      
      <h2> 實作：<a href="EratosthenesPrime.htm#Toy">Toy</a>&nbsp;&nbsp; &nbsp;<a href="EratosthenesPrime.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="EratosthenesPrime.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="EratosthenesPrime.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="EratosthenesPrime.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="EratosthenesPrime.htm#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="EratosthenesPrime.htm#JavaScript">JavaScript</a> &nbsp;&nbsp; <a href="EratosthenesPrime.htm#Haskell">Haskell</a><br>
      </h2>
      <ul><li><a name="Toy"><a href="../Toy/index.html">Toy</a></a> </li>
      </ul>
      <pre class="prettyprint"><code>from '/lib/math' import pow
N = 1000

def sieve(primes, i) {
    if primes.get(i) {
        iterate(2, j -> j * i <= N).forEach(j -> primes.set(j * i, 0)) 
    }
}

def sixPlus1Or5(primes) {
    r = range(1, i -> 6 * i + 5 <= N)
    r.forEach(i -> primes.set(6 * i + 1, 1))
    r.forEach(i -> primes.set(6 * i + 5, 1))
    if 6 * r.length() + 1 <= N { 
        primes.set(6 * r.length() + 1, 1)
    }
}

def sieveSixPlus1Or5(primes) {
    r = range(0, i -> pow(6 * i + 5, 2) <= N)
    r.forEach(i -> sieve(primes, 6 * i + 1))
    r.forEach(i -> sieve(primes, 6 * i + 5))
    n = r.length()
    if pow(6 * n + 1, 2) <= N { 
        sieve(primes, 6 * n + 1)
    }  
}

def create() {
    primes = List.create(N + 1, 0)
    primes.set(2, 1)
    primes.set(3, 1) 
    primes.set(5, 1)

    sixPlus1Or5(primes)
    sieveSixPlus1Or5(primes)

    return primes
}

primes = create()
println(iterate(2, N).select(i -> primes.get(i)))</code></pre>
      <br>
<ul><li><a name="C">C</a> </li>
      </ul>
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>#define N 1000 <br><br>void create(int*);<br>void filter(int*, int);<br><br>int main(void) { <br>    int primes[N + 1] = {0};<br>    create(primes);<br>    <br>    int i;<br>    for(i = 2; i &lt; N; i++) if(primes[i]) { <br>        printf("%4d", i); <br>    }<br>&nbsp;<br>    return 0; <br>} <br><br>void create(int* primes) {<br>    primes[2] = primes[3] = primes[5] = 1;<br>    <br>    int i;<br>    for(i = 1;6 * i + 5 &lt;= N; i++) {<br>        primes[6 * i + 1] = primes[6 * i + 5] = 1; <br>    }<br>    if(6 * i + 1 &lt;= N) { primes[6 * i + 1] = 1; }<br>    <br>    int n;<br>    for(n = 0;(6 * n + 5) * (6 * n + 5) &lt;= N; n++) {<br>        filter(primes, 6 * n + 1);<br>        filter(primes, 6 * n + 5);<br>    }     <br>    if((6 * n + 1) * (6 * n + 1) &lt;= N) { filter(primes, 6 * n + 1); }  <br>}<br><br>void filter(int* primes, int i) {<br>    if(primes[i]) { <br>        int j;<br>        for(j = 2; j * i &lt;= N; j++) {<br>            primes[j * i] = 0; <br>        }<br>    }<br>}<br></code></pre>




      <br>




      
      
      <ul>


        <li><a name="Java">Java</a> 
  </li>


      
      
      </ul>




      
      
      <pre class="prettyprint"><code>import java.util.*;<br><br>public class Prime {<br>    public static List&lt;Integer&gt; create(int max) {<br>        LinkedList&lt;Integer&gt; primes = new LinkedList&lt;&gt;();<br>        primes.add(2); primes.add(3); primes.add(5);<br>        for(int i = 1; i &lt;= (max - 5) / 6; i++) {<br>            primes.add(6 * i + 1); primes.add(6 * i + 5);<br>        }<br>        if(primes.getLast() + 2 &lt;= max) {<br>            primes.add(primes.getLast() + 2);<br>        }<br><br>        for(int i = 2; i &lt; primes.size(); i++) {<br>            Integer p = primes.get(i);<br>            for(int j = 2; j * p &lt;= primes.getLast(); j++) {<br>                primes.remove(Integer.valueOf(j * p));<br>            }<br>        }<br>        return primes;<br>    }<br>    <br>    public static void main(String[] args) {<br>        for(Integer p : create(1000)) {<br>            System.out.printf("%4d", p);<br>        }<br>    }<br>}<br></code></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>def flatten(list):<br>    return [item for subList in list for item in subList]<br><br>def iterate(counter, primes):<br>    if counter &lt; len(primes):<br>        newps = primes[0:counter + 1] + list(<br>          filter(lambda p: p % primes[counter] != 0, primes[counter + 1:]))<br>        return iterate(counter + 1, newps)<br>    else:<br>        return primes<br>    <br>def create(max):<br>    comp = flatten(<br>        [[6 * i + 1, 6 * i + 5] for i in range(1, (max - 5) // 6 + 1)])<br>    primes = [2, 3, 5] + comp + \<br>        ([comp[-1] + 2] if comp[-1] + 2 &lt;= max else [])<br>    return iterate(2, primes)<br>    <br>for p in create(1000):<br>    print("%4d" % p, end="")<br></code></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>def create(max: Int) = {<br>    val comp = (for(i &lt;- 1 to (max - 5) / 6) <br>            yield List(6 * i + 1, 6 * i + 5)).toList.flatten<br>    val primes = List(2, 3, 5) ++ comp ++ <br>            (if(comp.last + 2 &lt;= max) List(comp.last + 2) else Nil)<br>    iterate(2, primes)<br>}<br><br>def iterate(counter: Int, primes: List[Int]): List[Int] = {<br>    if(counter &lt; primes.size) {<br>        val newps = primes.take(counter + 1) ++ <br>              primes.drop(counter + 1).filter(p =&gt; p % primes(counter) != 0)<br>        iterate(counter + 1, newps)<br>    } else  primes<br>}<br><br>create(1000).foreach(printf("%4d", _))</code></pre><br>
      <ul>
        <li><a name="Ruby">Ruby</a></li>
      </ul>
      <pre class="prettyprint"><code>def iterate(counter, primes)<br>    if counter &lt; primes.size<br>        newps = primes.take(counter + 1) + primes.drop(counter + 1)<br>                    .select { |p| p % primes[counter] != 0}<br>        iterate(counter + 1, newps)<br>    else<br>        primes<br>    end<br>end<br>    <br>def create(max)<br>    comp = (1..(max - 5) / 6).map {|i| [6 * i + 1, 6 * i + 5] }.flatten<br>    primes = [2, 3, 5] + comp + (comp[-1] + 2 &lt;= max ? [comp[-1] + 2] : [])<br>    iterate(2, primes)<br>end<br>    <br>create(1000).each do |p|<br>    printf("%4d", p)<br>end<br></code></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre class="prettyprint"><code>Array.prototype.reduce = function(init, f) {<br>    var value = init;<br>    for(var i = 0; i &lt; this.length; i++) {<br>        value = f(value, this[i]);<br>    }<br>    return value;<br>};<br><br>function range(from, to) {<br>    var r = [];<br>    for(var c = 0, i = from; i &lt; to; c++, i++) { r[i] = i; } <br>    return r;<br>}<br><br>function iterate(counter, primes) {<br>    if(counter &lt; primes.length) {<br>        var newps = primes.slice(0, counter + 1).concat(<br>                primes.slice(counter + 1, primes.length)<br>                      .filter(function(p) { <br>                          return p % primes[counter] != 0; <br>                      }));<br>        return iterate(counter + 1, newps);<br>    } else {<br>        return primes;<br>    }<br>}<br><br>function create(max) {<br>    var comp = range(1, parseInt((max - 5) / 6) + 1).map(function(i) {<br>        return [6 * i + 1, 6 * i + 5];<br>    }).reduce([], function(ac, list) {<br>        return ac.concat(list);<br>    });<br>    var last = comp.pop();<br>    var primes = [2, 3, 5].concat(<br>            comp, last + 2 &lt;= max ? [last, last + 2] : [last]);<br>    return iterate(2, primes);<br>}<br><br>print(create(1000).join(' '));<br></code></pre>
<br>
      <ul>
        <li><a name="Haskell">Haskell</a></li>
      </ul>
      <pre class="prettyprint"><code>flatten list = [item | subList &lt;- list, item &lt;- subList]<br><br>iter counter primes = <br>    if counter &lt; length primes then<br>        let newps = take (counter + 1) primes ++ <br>                (filter (\p -&gt; p `mod` (primes !! counter) /= 0) \$ <br>                     drop (counter + 1) primes)<br>        in iter (counter + 1) newps<br>    else primes<br>    <br>create max = iter 2 primes<br>    where comp = flatten [[6 * i + 1, 6 * i + 5] | i &lt;- [1..(max - 5) `div` 6]]<br>          primes = [2, 3, 5] ++ comp ++ <br>              if last comp + 2 &lt;= max then [last comp + 2] else []<br><br>main = print \$ create 1000<br></code></pre>
<br>




<br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
