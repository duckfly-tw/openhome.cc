<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/sort/radix/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明

      


在之前所介紹過的排序方法，都是屬於「比較性」的排序法，也就是每次排序時 ，都是比較整個鍵值的大小以進行排序。

      




這邊所要介紹的「...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="基數排序法">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/RadixSort.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明

      


在之前所介紹過的排序方法，都是屬於「比較性」的排序法，也就是每次排序時 ，都是比較整個鍵值的大小以進行排序。

      




這邊所要介紹的「...">


    <title>基數排序法</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="RadixSort.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>基數排序法</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             
      
      <h2>說明</h2>

      


在之前所介紹過的排序方法，都是屬於「比較性」的排序法，也就是每次排序時 ，都是比較整個鍵值的大小以進行排序。<br>

      <br>




這邊所要介紹的「基數排序法」（radix sort）則是屬於「分配式排序」（distribution
sort），基數排序法會使用到「桶子」（bucket），顧名思義，它是透過鍵值的部份資訊，將要排序的元素分配至某些「桶」中，藉以達到排序的作用，基數排序法是屬於穩定性的排序，其時間複雜度為O
(nlog(r)m)，其中r為所採取的基數，而m為堆數，在某些時候，基數排序法的效率高於其它的比較性排序法。


      <br>




      
      <h2>解法</h2>

      


基數排序的方式可以採用LSD（Least sgnificant digital）或MSD（Most sgnificant digital），LSD的排序方式由鍵值的最右邊開始，而MSD則相反，由鍵值的最左邊開始。<br>

      <br>




以LSD為例，假設原來有一串數值如下所示：<br>

      





      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">73, 22, 93, 43, 55, 14, 28, 65, 39, 81</span><br>




      </div>




      <br>




首先根據個位數的數值，在走訪數值時將它們分配至編號0到9的桶子中：<br>




      
      <table border="1" width="100%">



  <tbody>



    <tr>



      <td align="left" valign="top">0 </td>




      <td align="left" valign="top">1 </td>




      <td align="left" valign="top">2 </td>




      <td align="left" valign="top">3 </td>




      <td align="left" valign="top">4 </td>




      <td align="left" valign="top">5 </td>




      <td align="left" valign="top">6 </td>




      <td align="left" valign="top">7 </td>




      <td align="left" valign="top">8 </td>




      <td align="left" valign="top">9 </td>




    </tr>




    <tr>




      <td align="right" valign="top"> <br>




      </td>




      <td align="left" valign="top">81 </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="left" valign="top">65 </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="left" valign="top">39 </td>




    </tr>




    <tr>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="left" valign="top">43 </td>




      <td align="left" valign="top">14 </td>




      <td align="left" valign="top">55 </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="left" valign="top">28 </td>




      <td align="right" valign="top"> <br>




      </td>




    </tr>




    <tr>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="left" valign="top">93 </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




    </tr>




    <tr>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="left" valign="top">22 </td>




      <td align="left" valign="top">73 </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




    </tr>




  
  
  
        
        </tbody>
      
      </table>




      <br>

      

接下來將這些桶子中的數值重新串接起來，成為以下的數列： <br>

      <em><strong></strong></em>



      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">81, 22, 73, 93, 43, 14, 55, 65, 28, 39</span><br>



      </div>




      <br>



接著再進行一次分配，這次是根據十位數來分配：<br>




      
      <table border="1" width="100%">




  <tbody>




    <tr>




      <td align="left" valign="top">0 </td>




      <td align="left" valign="top">1 </td>




      <td align="left" valign="top">2 </td>




      <td align="left" valign="top">3 </td>




      <td align="left" valign="top">4 </td>




      <td align="left" valign="top">5 </td>




      <td align="left" valign="top">6 </td>




      <td align="left" valign="top">7 </td>




      <td align="left" valign="top">8 </td>




      <td align="left" valign="top">9 </td>




    </tr>




    <tr>




      <td align="right" valign="top"> <br>




      </td>




      <td align="left" valign="top"> <br>
</td>




      <td align="left" valign="top"> 28</td>




      <td align="right" valign="top">39</td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="right" valign="top"> <br>




      </td>




    </tr>




    <tr>




      <td align="right" valign="top"> <br>




      </td>




      <td align="left" valign="top">14 </td>




      <td align="left" valign="top">22 </td>




      <td align="right" valign="top"> <br>




      </td>




      <td align="left" valign="top">43 </td>




      <td align="left" valign="top">55 </td>




      <td align="left" valign="top">65 </td>




      <td align="left" valign="top">73 </td>




      <td align="left" valign="top">81 </td>




      <td align="left" valign="top">93 </td>




    </tr>




  
  
  
        
        </tbody>
      
      </table>




      <br>

      

接下來將這些桶子中的數值重新串接起來，成為以下的數列： <br>

      <em><strong></strong></em>



      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">14, 22, 28, 39, 43, 55, 65, 73, 81, 93 </span><br>



      </div>




      <br>



這時候整個數列已經排序完畢；如果排序的對象有三位數以上，則持續進行以上的動作直至最高位數為止。 <br>

      <br>



LSD的基數排序適用於位數小的數列，如果位數多的話，使用MSD的效率會比較好，MSD的方式恰與LSD相反，是由高位數為基底開始進行分配，其他的演
算方式則都相同。 

      <br>




      
      <h2> 實作：<a href="RadixSort.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="RadixSort.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="RadixSort.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="RadixSort.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="RadixSort.htm#Scala"><a href="RadixSort.htm#Ruby">Ruby</a><br>
      </a></h2>




      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>void radixSort(int[]);<br><br>int main(void) { <br>    int data[10] = {73, 22, 93, 43, 55, 14, 28, 65, 39, 81}; <br>      <br>    printf("\n排序前: "); <br>    int i;<br>    for(i = 0; i &lt; 10; i++) <br>        printf("%d ", data[i]); <br><br>    putchar('\n'); <br><br>    radixSort(data);<br>    <br>    printf("\n排序後: "); <br>    for(i = 0; i &lt; 10; i++) <br>        printf("%d ", data[i]); <br><br>    return 0; <br>} <br><br>void radixSort(int data[]) {<br>    int temp[10][10] = {0}; <br>    int order[10] = {0}; <br>    <br>    int n = 1; <br>    while(n &lt;= 10) { <br>        <br>        int i;<br>        for(i = 0; i &lt; 10; i++) { <br>            int lsd = ((data[i] / n) % 10); <br>            temp[lsd][order[lsd]] = data[i]; <br>            order[lsd]++; <br>        } <br>        <br>        // 重新排列<br>        int k = 0;<br>        for(i = 0; i &lt; 10; i++) { <br>            if(order[i] != 0)  {<br>                int j;<br>                for(j = 0; j &lt; order[i]; j++, k++) { <br>                    data[k] = temp[i][j]; <br>                } <br>            }<br>            order[i] = 0; <br>        } <br><br>        n *= 10; <br>    }     <br>}<br></code></pre>




      <br>




      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>




      
      <pre class="prettyprint"><code>public class Sort {<br>    public static void radix(int[] number, int d) {<br>        int k = 0;<br>        int n = 1;<br>        <br>        int[][] temp = new int[number.length][number.length];<br>        int[] order = new int[number.length];<br>        <br>        while(n &lt;= d) { <br>            for(int num : number) { <br>                int lsd = (num / n) % 10; <br>                temp[lsd][order[lsd]] = num; <br>                order[lsd]++; <br>            } <br><br>            for(int i = 0; i &lt; number.length; i++) { <br>                if(order[i] != 0) {<br>                    for(int j = 0; j &lt; order[i]; j++) { <br>                        number[k] = temp[i][j];  <br>                        k++; <br>                    } <br>                }<br>                order[i] = 0; <br>            } <br><br>            n *= 10; <br>            k = 0; <br>        } <br>    }<br><br>    public static void main(String[] args) {<br>        int[] data = {73, 22, 93, 43, 55, 14, 28, 65, 39, 81, 33, 100}; <br>        Sort.radix(data, 100);<br>        for(int i : data) {<br>            System.out.print(i + " ");   <br>        }<br>    }<br>}<br></code></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>def sort(number, d):<br>    length = len(number)<br>    k = 0<br>    n = 1<br>    temp = []<br>    for i in range(length):<br>        temp.append([0] * length)<br>    order = [0] * length<br>    while n &lt;= d:<br>        for i in range(length):<br>            lsd = (number[i] // n) % 10<br>            temp[lsd][order[lsd]] = number[i]<br>            order[lsd] += 1<br>        for i in range(length):<br>            if order[i] != 0:<br>                for j in range(order[i]):<br>                    number[k] = temp[i][j]<br>                    k += 1<br>            order[i] = 0<br>        n *= 10<br>        k = 0<br>        <br>number = [73, 22, 93, 43, 55, 14, 28, 65, 39, 81, 33, 100]<br>sort(number, 100)<br>print(number)<br></code></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>object Sort {<br>    def radix(number: Array[Int], d: Int) {<br>        var k = 0<br>        var n = 1<br>        val temp = new Array[Array[Int]](number.length, number.length)<br>        val order = new Array[Int](number.length)<br>        while(n &lt;= d) {<br>            number.foreach(num =&gt; {<br>                val lsd = (num / n) % 10<br>                temp(lsd)(order(lsd)) = num<br>                order(lsd) += 1<br>            })<br>            for(i &lt;- 0 until number.length) {<br>                if(order(i) != 0) {<br>                    for(j &lt;- 0 until order(i)) {<br>                        number(k) = temp(i)(j)<br>                        k += 1<br>                    }<br>                }<br>                order(i) = 0<br>            }<br>            n *= 10<br>            k = 0<br>        }<br>    }<br>}<br><br>val data = Array(73, 22, 93, 43, 55, 14, 28, 65, 39, 81, 33, 100)<br>Sort.radix(data, 100)<br>data.foreach(x =&gt; print(x + " "))</code></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre class="prettyprint"><code>def sort(number, d)<br>    length = number.length<br>    k = 0<br>    n = 1<br>    temp = Array.new(length) {<br>        Array.new(length, 0)<br>    }<br>    order = Array.new(length, 0)<br>    while n &lt;= d<br>        length.times { |i|<br>            lsd = (number[i] / n) % 10<br>            temp[lsd][order[lsd]] = number[i]<br>            order[lsd] += 1<br>        }<br>        length.times { |i|<br>            if order[i] != 0<br>                order[i].times { |j|<br>                    number[k] = temp[i][j]<br>                    k += 1<br>                }<br>            end<br>            order[i] = 0<br>        }<br>        n *= 10<br>        k = 0<br>    end<br>end<br><br>number = [73, 22, 93, 43, 55, 14, 28, 65, 39, 81, 33, 100]<br>sort(number, 100)<br>p number<br></code></pre>
<br>


<br><br><div class="ad-2" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
