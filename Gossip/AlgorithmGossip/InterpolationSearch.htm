<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/search/interpolation/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明

      
如果卻搜尋的資料分佈平均的話，可以使用插補（Interpolation）搜尋法來進行搜尋，在搜尋的對象大於500時，插補搜尋法會比 二分搜尋法 來的快速。


   ...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="插補搜尋法">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/InterpolationSearch.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明

      
如果卻搜尋的資料分佈平均的話，可以使用插補（Interpolation）搜尋法來進行搜尋，在搜尋的對象大於500時，插補搜尋法會比 二分搜尋法 來的快速。


   ...">


    <title>插補搜尋法</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="InterpolationSearch.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>插補搜尋法</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             




      
      <h2>說明</h2>

      
如果卻搜尋的資料分佈平均的話，可以使用插補（Interpolation）搜尋法來進行搜尋，在搜尋的對象大於500時，插補搜尋法會比 二分搜尋法 來的快速。<br>


      
      <h2>解法</h2>

      
插補搜尋法是以資料分佈的近似直線來作比例運算，以求出中間的索引並進行資料比對，如果取出的值小於要尋找的值，則提高下界，如果取出的值大於要尋找的
值，則降低下界，如此不斷的減少搜尋的範圍，所以其本原則與二分搜尋法是相同的，至於中間值的尋找是透過比例運算，如下所示，其中K是指定要尋找的對象，
而m則是可能的索引值： <br>


      
      <div style="text-align: center;"><div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="插補搜尋" title="插補搜尋" src="images/interpolationSearch-1.jpg" /></div></div></div>


      <br>



      
      <h2> 實作：<a href="InterpolationSearch.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="InterpolationSearch.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="InterpolationSearch.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="InterpolationSearch.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="InterpolationSearch.htm#Scala"></a><a href="InterpolationSearch.htm#Ruby">Ruby</a><br>
      </h2>



      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>



      
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define MAX 10 <br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>void quickSort(int[], int, int); <br>int interpolationSearch(int[], int); <br><br>int main(void) { <br>    srand(time(NULL)); <br>    <br>    int number[MAX] = {0}; <br>    <br>    int i;<br>    for(i = 0; i &lt; MAX; i++) { <br>        number[i] = rand() % 100; <br>    } <br><br>    quickSort(number, 0, MAX-1); <br><br>    printf("數列："); <br>    for(i = 0; i &lt; MAX; i++) <br>        printf("%d ", number[i]); <br><br>    int find;<br>    printf("\n輸入尋找對象："); <br>    scanf("%d", &amp;find); <br><br>    if((i = interpolationSearch(number, find)) &gt;= 0) <br>        printf("找到數字於索引 %d ", i); <br>    else <br>        printf("\n找不到指定數"); <br>        <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>int interpolationSearch(int number[], int find) { <br>    int low = 0; <br>    int upper = MAX - 1; <br>    while(low &lt;= upper) { <br>        int mid = (upper-low)* <br>            (find-number[low])/(number[upper]-number[low]) <br>            + low; <br>        if(mid &lt; low || mid &gt; upper) <br>            break; <br>        if(find &lt; number[mid]) <br>            upper = mid - 1; <br>        else if(find &gt; number[mid]) <br>            low = mid + 1; <br>        else <br>            return mid; <br>     } <br>     return -1;<br>} <br><br>void quickSort(int number[], int left, int right) { <br>    if(left &lt; right) { <br>        int s = number[(left+right)/2]; <br>        int i = left - 1; <br>        int j = right + 1; <br><br>        while(1) { <br>            while(number[++i] &lt; s) ;  // 向右找 <br>            while(number[--j] &gt; s) ;  // 向左找 <br>            if(i &gt;= j) <br>                break; <br>            SWAP(number[i], number[j]); <br>        } <br><br>        quickSort(number, left, i-1);   // 對左邊進行遞迴 <br>        quickSort(number, j+1, right);  // 對右邊進行遞迴 <br>    } <br>} <br></code></pre>



      <br>



      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>



      
      <pre class="prettyprint"><code>public class Search {    <br>    public static int interpolation(int[] number, int des) { <br>        int low = 0; <br>        int upper = number.length - 1; <br><br>        while(low &lt;= upper) { <br>            int mid = (upper-low)*(des-number[low])<br>                      /(number[upper]-number[low]) + low; <br>            if(mid &lt; low || mid &gt; upper) <br>                break; <br>            if(des &lt; number[mid]) <br>                upper = mid - 1; <br>            else if(des &gt; number[mid]) <br>                low = mid + 1; <br>            else <br>                return mid; <br>        }<br>        return -1;<br>    }<br>    <br>    public static void main(String[] args) {<br>        int[] number = {1, 2, 3, 4, 6, 7, 8};<br>        int find = Search.interpolation(number, 2);<br>        System.out.println(find &gt;= 0 ? "找到數值於索引" + find : "找不到數值"); <br>    }<br>} <br></code></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>def search(number, des):<br>    low = 0<br>    upper = len(number) - 1<br>    while low &lt;= upper:<br>        mid = (upper - low) * (des - number[low]) \<br>               // (number[upper] - number[low]) \<br>               + low;<br>        if mid &lt; low or mid &gt; upper:<br>            break<br>        if des &lt; number[mid]:<br>            upper = mid - 1<br>        elif des &gt; number[mid]:<br>            low = mid + 1<br>        else:<br>            return mid<br>        <br>    return -1<br><br>number = [1, 4, 2, 6, 7, 3, 9, 8]<br>number.sort()<br>find = search(number, 2)<br>print("找到數值於索引 " + str(find) if find &gt;= 0 else "找不到數值")</code></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>object Search {<br>    def interpolation(number: Array[Int], des: Int) = {<br>        var low = 0<br>        var upper = number.length - 1<br>        var result = -1<br>        var isContinue = true<br>        while(isContinue &amp;&amp; low &lt;= upper) {<br>            val mid = (upper-low)* (des-number(low)) / <br>                      (number(upper)-number(low)) + low<br>            if(mid &lt; low || mid &gt; upper) isContinue = false<br>            if(des &lt; number(mid))<br>                upper = mid - 1<br>            else if(des &gt; number(mid))<br>                low = mid + 1<br>            else {<br>                result = mid<br>                isContinue = false<br>            }<br>        }<br>        result<br>    }<br>}<br><br>val number = Array(1, 2, 3, 4, 6, 7, 8)<br>val find = Search.interpolation(number, 3)<br>println(if(find &gt;= 0) "找到數值於索引 " + find else "找不到數值")</code></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre class="prettyprint"><code># encoding: Big5<br>def search(number, des)<br>    low = 0<br>    upper = number.length - 1<br>    while low &lt;= upper<br>        mid = (upper - low) * (des - number[low]) / <br>              (number[upper] - number[low]) + low<br>        if mid &lt; low || mid &gt; upper<br>            break<br>        end<br>            <br>        if des &lt; number[mid]<br>            upper = mid - 1<br>        elsif des &gt; number[mid]<br>            low = mid + 1<br>        else<br>            return mid<br>        end<br>    end<br>    -1<br>end<br><br>number = [1, 4, 2, 6, 7, 3, 9, 8]<br>number.sort!<br>find = search(number, 2)<br>print find &gt;= 0 ? "找到數值於索引 " + find.to_s : "找不到數值", "\n"<br></code></pre>
<br>

 

<br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
