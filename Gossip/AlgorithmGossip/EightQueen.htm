<!DOCTYPE html>
<html lang="zh-tw">
  <head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/basics/queens/'">
    <meta content="text/html; charset=utf-8" http-equiv="content-type">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="&nbsp;說明
      
西洋棋中的皇后可以直線前進，吃掉遇到的所有棋子，如果棋盤上有八個皇后，則這八個皇后如何相安無事的放置在棋盤上，1970年與1971年， E.W.Dijkstra...">
    <meta property="og:locale" content="zh_TW">
    <meta property="og:title" content="八個皇后">
    <meta property="og:type" content="article">
    <meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/EightQueen.htm">
    <meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
    <meta property="og:site_name" content="OPENHOME.CC">
    <meta property="og:description" content="&nbsp;說明
      
西洋棋中的皇后可以直線前進，吃掉遇到的所有棋子，如果棋盤上有八個皇后，則這八個皇后如何相安無事的放置在棋盤上，1970年與1971年， E.W.Dijkstra...">
    <title>八個皇后</title>
    <link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">
    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">    <![endif]-->
    <!--[if gt IE 8]><!-->
    <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
    <link rel="stylesheet" href="../css/caterpillar.css">
    <script async="" src="../google-code-prettify/run_prettify.js"></script>
  <!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
  <body>
    <div id="layout">
      <!-- Menu toggle --> <a href="EightQueen.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span> </a>
      <div id="menu">
        <div class="pure-menu"> <a class="pure-menu-heading" href="index.html">回
            Algorithm</a>
          <ul class="pure-menu-list">
            <br>
            <div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img
                  title="Twitter" alt="Twitter" src="../images/twitter.png"></a>
              <a href="http://www.facebook.com/openhome.cc"><img title="Facebook"
                  alt="Facebook" src="../images/facebook.png"></a>
              </div>
            <br>
            <div id="search box">
              <script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div>
            <br>
            <div class="ad" style="text-align: center;">
              <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
              <!-- 2015 新版型 160 x 600 廣告 -->
              <ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px"
                data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883"></ins>
              <script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
          </ul>
        </div>
      </div>
      <main id="main">
        <header class="header">
          <h1>八個皇后</h1>
        </header>
        <article class="content"><br>
          <div class="ad-3" style="text-align: center;">
            <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins
              class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390"
              data-ad-slot="7104125683" data-ad-format="auto"></ins>
            <script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>
          <h2>&nbsp;說明</h2>
          西洋棋中的皇后可以直線前進，吃掉遇到的所有棋子，如果棋盤上有八個皇后，則這八個皇后如何相安無事的放置在棋盤上，1970年與1971年，
          E.W.Dijkstra與N.Wirth曾經用這個問題來講解程式設計之技巧。<br>
          <h2>解法</h2>
          關於棋盤的問題，都可以用遞迴求解，然而如何減少遞迴的次數？在八個皇后的問題中，不必要所有的格子都檢查過，例如若某列檢查過，該該列的其它格子就
          不用再檢查了，這個方法稱為分支修剪。 <br>
          <div style="text-align: center;">
            <div class="pure-g">
              <div class="pure-u-1"><img class="pure-img-responsive" alt="八個皇后"
                  title="八個皇后" src="images/eightQueen-1.jpg"></div>
            </div>
            <br>
            <br>
            <br>
            <div style="text-align: left;">
              所以檢查時，先判斷是否在已放置皇后的可行進方向上，如果沒有再行放置下一個皇后，如此就可大大減少遞迴的次數，例如以下為修剪過後的遞迴檢
              查行進路徑：<br>
            </div>
            <div class="pure-g">
              <div class="pure-u-1"><img class="pure-img-responsive" alt="八個皇后"
                  title="八個皇后" src="images/eightQueen-2.jpg"></div>
            </div>
            <br>
            <div style="text-align: left;"><br>
              八個皇后的話，會有92個解答，如果考慮棋盤的旋轉，則旋轉後扣去對稱的，會有12組基本解。&nbsp;</div>
          </div>
          <br>
          <h2> 實作：<a href="EightQueen.htm#Toy">Toy</a>&nbsp;&nbsp; &nbsp;<a href="EightQueen.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="EightQueen.htm#Java">Java</a>&nbsp;&nbsp;
            &nbsp;<a href="EightQueen.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="EightQueen.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp;
            <a href="EightQueen.htm#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="EightQueen.htm#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp;
            <a href="EightQueen.htm#Haskell">Haskell</a>&nbsp;&nbsp;&nbsp; <a href="EightQueen.htm#Prolog">Prolog</a><br>
          </h2>
          <ul>
            <li><a name="Toy"><a href="../Toy/index.html">Toy</a></a></li>
          </ul>
          <pre class="prettyprint"><code>from '/lib/math' import abs

def queenss(n) {
    def placeQueens(k) {
       if k == 0 {
           return [[]]
       }

       def collect(queens) {
           (return range(1, n + 1).filter(column -> isSafe([k, column], queens))
                                  .map(column -> queens.concat([[k, column]]))
                                  .reduce((acc, qs) -> acc.concat([qs]), []))
       }       

       return placeQueens(k - 1).reduce((acc, queens) -> acc.concat(collect(queens)), [])
    }

    return placeQueens(n)
}

def isSafe(queen, queens) {
    return queens.all(q -> not inCheck(queen, q))
}

def inCheck(q1, q2) {
    (return q1.get(0) == q2.get(0) or 
            q1.get(1) == q2.get(1) or 
            abs(q1.get(0) - q2.get(0)) == abs(q1.get(1) - q2.get(1))) 
}

def printQS(qs) {
    qs.forEach(print)
    println()
}

queenss(8).forEach(printQS)</code></pre>
          <br>
          <ul>
            <li><a name="C">C</a>  </li>
          </ul>
          <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#define N 8 <br><br>void backTrack(int*, int*, int*, int*, int, void (*)(int*));<br>void print(int*);<br><br>int main(void) { <br>    int column[N] = {0};        // 同行是否有皇后<br>    int slash[2 * N] = {0};     // 右上至左下是否有皇后 <br>    int backSlash[2 * N] = {0}; // 左上至右下是否有皇后 <br>    int queens[N] = {0}; <br><br>    backTrack(column, slash, backSlash, queens, 0, print); <br>    <br>    return 0; <br>} <br><br>void backTrack(int* column, int* slash, int* backSlash, <br>               int* queens, int i, void (*take)(int*)) { <br>    if(i &gt;= N) { <br>        take(queens); <br>    } <br>    else { <br>        int j;<br>        for(j = 0; j &lt; N; j++) {<br>            if(isVisitable(i, j, column, slash, backSlash)) { <br>                queens[i] = j; <br>                column[j] = slash[i + j] = backSlash[i - j + N] = 1; <br>                backTrack(column, slash, backSlash, queens, i + 1, take); <br>                column[j] = slash[i + j] = backSlash[i - j + N] = 0;<br>            } <br>        }<br>    }<br>}<br><br>int isVisitable(int i, int j, int* column, int* slash, int* backSlash) {<br>   return !(column[j] || slash[i + j] || backSlash[i - j + N]);<br>}<br><br>void print(int* queens) {<br>    int x, y;<br>    for(y = 0; y &lt; N; y++) {<br>        for(x = 0; x &lt; N; x++) {<br>            printf(" %c", queens[y] == x ? 'Q' : '.');<br>        }<br>        printf("\n");<br>    }<br>    printf("\n");<br>}<br></code></pre>
          <br>
          <ul>
            <li><a name="Java">Java</a>  </li>
          </ul>
          <pre class="prettyprint"><code>import java.util.*;<br>import static java.lang.Math.abs;<br>import static java.lang.System.out;<br><br>class Queen {<br>    final int x, y;<br>    Queen(int x, int y) {<br>        this.x = x;<br>        this.y = y;<br>    }<br>    <br>    public String toString() {<br>        return String.format("(%d, %d)", x, y);<br>    }<br>}<br><br>public class Queens {<br>    public static List&lt;List&lt;Queen&gt;&gt; queens(int n) {<br>        return placeQueens(n, n);<br>    }<br>    <br>    public static List&lt;List&lt;Queen&gt;&gt; placeQueens(int n, int k) {<br>        List&lt;List&lt;Queen&gt;&gt; queensList = new ArrayList&lt;&gt;();<br>        if(k == 0) {<br>            queensList.add(new ArrayList&lt;Queen&gt;());<br>        }<br>        else {<br>            for(List&lt;Queen&gt; queens : placeQueens(n, k - 1)) {<br>                for(int column = 1; column &lt;= n; column++) {<br>                    Queen queen = new Queen(k, column);<br>                    if(isSafe(queen, queens)) {<br>                        List&lt;Queen&gt; qs = new ArrayList&lt;&gt;();<br>                        qs.addAll(queens);<br>                        qs.add(queen);<br>                        queensList.add(qs);<br>                    }<br>                }<br>            }<br>        }<br>        return queensList;<br>    }<br>    <br>    public static boolean isSafe(Queen queen, List&lt;Queen&gt; queens) {<br>        for(Queen q : queens) if(inCheck(queen, q)) {<br>            return false;<br>        }<br>        return true;<br>    }<br>    <br>    public static boolean inCheck(Queen q1, Queen q2) {<br>        return q1.x == q2.x || // 同列<br>               q1.y == q2.y || // 同行<br>               abs(q1.x - q2.x) == abs(q1.y - q2.y); // 對角線<br>    }<br>    <br>    public static void main(String[] args) {<br>        for(List&lt;Queen&gt; queens : queens(8)) {<br>            for(Queen queen : queens) {<br>                out.print(queen);<br>            }<br>            out.println();<br>        }<br>    }<br>}</code></pre>
          <br>
          <ul>
            <li><a name="Python">Python</a></li>
          </ul>
          <pre class="prettyprint"><code>def queenss(n):<br>    def placeQueens(k):<br>        return [[]] if k == 0 \<br>                    else [[(k, column)] + queens <br>                             for queens in placeQueens(k - 1)<br>                                 for column in range(1, n + 1) <br>                                     if isSafe((k, column), queens)]<br>    return placeQueens(n)<br><br>def isSafe(queen, queens):<br>    return all(not inCheck(queen, q) for q in queens)<br><br>def inCheck(q1, q2):<br>    return (q1[0] == q2[0] or # 同列<br>            q1[1] == q2[1] or # 同行<br>            abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])) # 對角線<br><br>for qs in queenss(8):<br>    for q in qs:<br>        print(q, end="")<br>    print()</code></pre>
          <br>
          <ul>
            <li><a name="Scala">Scala</a></li>
          </ul>
          <pre class="prettyprint"><code>def queens(n: Int): List[List[(Int, Int)]] = {<br>    def placeQueens(k: Int): List[List[(Int, Int)]] = {<br>        if(k == 0) Nil<br>        else for {<br>                 queens &lt;- placeQueens(k - 1)<br>                 column &lt;- 1 to n<br>                 queen = (k, column)<br>                 if isSafe(queen, queens)<br>             } yield queen :: queens<br>    }<br>    placeQueens(n)<br>}<br><br>def isSafe(queen: (Int, Int), queens: List[(Int, Int)]) =<br>    queens forall (q =&gt; !inCheck(queen, q))<br>    <br>def inCheck(q1: (Int, Int), q2: (Int, Int)) =<br>    q1._1 == q2._1 || // 同列<br>    q1._2 == q2._2 || // 同行<br>    (q1._1 - q2._1).abs == (q1._2 - q2._2).abs // 對角線<br><br>queens(8).foreach(q =&gt; {<br>    q.foreach(print)<br>    println()<br>})</code></pre>
          <br>
          <ul>
            <li><a name="Ruby">Ruby</a></li>
          </ul>
          <pre class="prettyprint"><code>def queenss(n)<br>    placeQueens(n, n)<br>end<br><br>def placeQueens(n, k)<br>    k == 0 ? [[]] : placeQueens(n, k - 1).map { |queens|<br>            (1..n).map { |column| {x: k, y: column} }<br>                  .find_all { |queen| isSafe(queen, queens) }<br>                  .map { |queen| [queen] + queens } <br>        }.reduce(:+);<br>end<br><br>def isSafe(queen, queens)<br>    queens.all? { |q| !inCheck(queen, q) }<br>end<br><br>def inCheck(q1, q2)<br>    q1[:x] == q2[:x] or # 同列<br>    q1[:y] == q2[:y] or # 同行<br>    (q1[:x] - q2[:x]).abs == (q1[:y] - q2[:y]).abs # 對角線<br>end<br><br>queenss(8).each do |qs|<br>    qs.each do |q|<br>        print "(#{q[:x]}, #{q[:y]})"<br>    end<br>    puts<br>end<br></code></pre>
          <br>
          <ul>
            <li><a name="JavaScript">JavaScript</a></li>
          </ul>
          <pre class="prettyprint"><code>var queens = function() {<br>    var column = [];<br>    var slash = [];<br>    var backSlash = [];<br>    var queens = [];<br>    <br>    function backTrack(n, i, take) {<br>        if(i &gt;= n) {<br>            take(n, queens);<br>        }<br>        else {<br>            for(var j = 0; j &lt; n; j++) if(isVisitable(i, j, n)) {<br>                queens[i] = j;<br>                column[j] = slash[i + j] = backSlash[i - j + n] = 1; <br>                backTrack(n, i + 1, take); <br>                column[j] = slash[i + j] = backSlash[i - j + n] = 0;<br>            }<br>        }<br>    }<br>    <br>    function isVisitable(i, j, n) {<br>        return !(column[j] || slash[i + j] || backSlash[i - j + n]);<br>    }<br>    <br>    return function(n, take) {<br>        backTrack(n, 0, take);<br>    };<br>}();<br><br>queens(8, function(n, qs) {<br>    var layout = '';<br>    for(var y = 0; y &lt; n; y++) {<br>        for(var x = 0; x &lt; n; x++) {<br>            layout += (qs[y] === x) ? ' Q' : ' .';<br>        }<br>        layout += '\n';<br>    }<br>    print(layout);<br>});<br></code></pre>
          <br>
          <ul>
            <li><a name="Haskell">Haskell</a></li>
          </ul>
          <pre class="prettyprint"><code>queens n = placeQueens n<br>    where placeQueens k = <br>              if k == 0 then [[]]<br>              else [(k, column) : queens | queens &lt;- placeQueens (k - 1), <br>                                           column &lt;- [1..n], <br>                                           isSafe (k, column) queens]<br>          isSafe queen queens = all (\q -&gt; not \$ inCheck queen q) queens<br>          inCheck (q1x, q1y) (q2x, q2y) = q1x == q2x || <br>                                          q1y == q2y ||<br>                                          abs (q1x - q2x) == abs (q1y - q2y)<br><br>main = sequence [print qs | qs &lt;- queens 8]<br></code></pre>
          <br>
          <ul>
            <li><a id="Prolog">Prolog</a></li>
          </ul>
          <pre class="prettyprint"><code>line([X, _], [X, _]) :- !.
line([_, Y], [_, Y]) :- !.
line([Qx1, Qy1], [Qx2, Qy2]) :-
    Dx is abs(Qx1 - Qx2), Dy is abs(Qy1 - Qy2), Dx =:= Dy.
    
safe(Q, [H|T]) :- not(line(Q, H)), !, safe(Q, T).
safe(_, []).

range(From, To, Xs) :- findall(X, between(From, To, X), Xs).

forY([Y|T], X, Queens, [NQueens|QueensLt]) :- 
    safe([X, Y], Queens), !,
    NQueens = [[X, Y]|Queens], 
    forY(T, X, Queens, QueensLt).
forY([_|T], X, Queens, QueensLt) :- 
    forY(T, X, Queens, QueensLt).
forY([], _, _, []).

forQueens([HQueens|T], X, Ys, QueensLt) :-
    forQueens(T, X, Ys, TQueensLt), !, 
    forY(Ys, X, HQueens, HQueensLt), 
    append(TQueensLt, HQueensLt, QueensLt).
forQueens([], _, _, []).

forX([X|T], Ys, QueensLt) :- 
    forX(T, Ys, TQueensLt), !, 
    forQueens(TQueensLt, X, Ys, QueensLt).
forX([], _, [[]]).

queens(N, QueensLt) :-
    range(1, N, Xs), 
    range(1, N, Ys),
    forX(Xs, Ys, QueensLt).
    
printQueens([Queen|T]) :- write(Queen), printQueens(T).
printQueens([]) :- nl.

printQueensLt([Queens|T]) :- printQueens(Queens), printQueensLt(T).
printQueensLt([]) :- nl.

main(_) :- 
    queens(8, QueensLt),
    printQueensLt(QueensLt).<br></code></pre>
          <br>
          <br>
          <div class="ad336-280" style="text-align: center;">
            <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins
              class="adsbygoogle" style="display:inline-block;width:336px;height:280px"
              data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins>
            <script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>
          <br>
          <div class="recommend" style="text-align: center;">
            <hr>
            <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins
              class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390"
              data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins>
            <script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>
        </article>
      </main>
    </div></body>
    <script src="../js/ui.js"></script>
    <div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
</html>
