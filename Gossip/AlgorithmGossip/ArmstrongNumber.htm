<!doctype html><html lang="zh-tw">
<head>
    <meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/numbers/narcissistic/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明
      在n位的整數中，若加總每個數字的n次方後等於該整數，該整數稱為阿姆斯壯數
（Armstrong number），又稱自戀數（Narcissistic number）（因為各數字n...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="阿姆斯壯數">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/ArmstrongNumber.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明
      在n位的整數中，若加總每個數字的n次方後等於該整數，該整數稱為阿姆斯壯數
（Armstrong number），又稱自戀數（Narcissistic number）（因為各數字n...">


    <title>阿姆斯壯數</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="ArmstrongNumber.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>阿姆斯壯數</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
            
      <h2>說明</h2>
      在n位的整數中，若加總每個數字的n次方後等於該整數，該整數稱為阿姆斯壯數
（Armstrong number），又稱自戀數（Narcissistic number）（因為各數字n次方後加總又等於本身，感覺很自戀？）。
例如153可以滿足1<sup>3</sup> + 5<sup>3</sup> + 3<sup>3</sup> = 153，153就是個阿
姆斯壯數，阿姆斯壯數有88個，最大為39位數的
115132219018763992565095597973971522401，已證實超過39位數不存在阿姆斯壯數。<br>
      <h2>解法</h2>
      阿姆斯壯數的尋找，基本上是在問如何將一個數字分解為個位數、十位數、百位數......，這
只要使用除法與餘數運算就可以了，例如要找出所有三位數阿姆斯壯數。輸
入input為n位數，則可如下分解出位數：<br>
      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">個
位 (input / 10<sup>0</sup>) % 10<br>
十位 </span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">(input
/ 10<sup>1</sup>) % 10</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">百
位 (input / 10<sup>2</sup>) % 10<br>
...<br>
n 位 </span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">(input
/ 10<sup>n-1</sup>) % 10</span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span>
      <br>
      </div>
      <br>
      底下列出的實作僅逐一列舉數字並判斷是否為阿姆斯壯數，位數大時求解時間會急劇拉長。可改進的方法之一：<br>
      
      <ul>
        <li>對於同樣為n位數而言，數字的n次方重複運算是不必要的，這部份可先製表而後直接查表並進行加總（像是Java實
作中的例子）。</li>
        <li>進行數字裁剪，將同為n位數的數劃分為數個集合，將尋找阿姆斯壯數縮剪為尋找包括阿姆斯壯數的集合。例如3位數
中，122、212、221會屬於同一集合（因此需要搭配快速排列組合），詢問此集合是否包括1<sup>3</sup> + 2<sup>3</sup>
+ 2<sup>3</sup> = 17則答案為否（因而需要搭配有序集合以快速確認是否包括），而135、315、153屬於同一集合，詢
問此集合是否包括1<sup>3</sup> + 3<sup>3</sup> + 5<sup>3</sup> =
153則答案為是，則153為阿姆斯壯數，在位數多時，可藉由集合裁剪掉大量單獨數字加總後測試的需求，從而加快求解速
度。</li>
      </ul>
      <h2> 實作：<a href="ArmstrongNumber.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="ArmstrongNumber.htm#Java">Java</a>&nbsp;&nbsp;
&nbsp;<a href="ArmstrongNumber.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="ArmstrongNumber.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp;
      <a href="ArmstrongNumber.htm#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="ArmstrongNumber.htm#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp;
      <a href="ArmstrongNumber.htm#Haskell">Haskell</a><br>
      </h2>
      <ul>
        <li><a name="C"></a> C </li>
      </ul>
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>int isNarcissistic(double);<br>void narcissistic(double*, int);<br><br>int main(void) { <br>    double armstrongs[88] = {0};<br>    narcissistic(armstrongs, 3);<br>    int i;<br>    for(i = 0; armstrongs[i] != 0; i++) {<br>        printf("%.0f\n", armstrongs[i]);<br>    }<br>    return 0; <br>} <br><br>int isNarcissistic(double number) {<br>    int digits[39] = {0};<br>    double num = number;<br>    int i;<br>    for(i = 0; num != 0; i++) {<br>        digits[i] = (int) num % 10;<br>        num = (int) (num / 10);<br>    }<br>    double sum = 0.0;<br>    int j;<br>    for(j = 0; j &lt;= i; j++) {<br>        sum += pow(digits[j], i);<br>    }<br>    return sum == number;<br>}<br><br>void narcissistic(double* armstrongs , int n) {<br>    double bound = pow(10, n &lt; 40 ? n : 39);<br>    double i;<br>    int j;<br>    for(i = 0, j = 0; i &lt; bound; i++) if(isNarcissistic(i)) {<br>        armstrongs[j] = i; j++;<br>    }<br>}<br></code></pre>
      <br>
      <ul>
        <li> <a name="Java"></a>Java </li>
      </ul>
      <pre class="prettyprint"><code>import java.math.BigInteger;<br>import java.util.*;<br>import static java.lang.Math.*;<br><br>public class Armstrong {<br>    private static double[][] pows;<br>    <br>    public static List&lt;Double&gt; narcissistic(int n) {<br>        pows = new double[n + 1][];<br>        pows[1] = new double[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};<br>        for(int i = 2; i &lt;= n; i++) {<br>            pows[i] = new double[] {<br>                0, 1, pows[i - 1][2] * 2, pows[i - 1][3] * 3, <br>                pows[i - 1][4] * 4, pows[i - 1][5] * 5, <br>                pows[i - 1][6] * 6, pows[i - 1][7] * 7, <br>                pows[i - 1][8] * 8, pows[i - 1][9] * 9<br>            };<br>        }<br>    <br>        List&lt;Double&gt; armstrongs = new ArrayList&lt;&gt;();<br>        double bound = pow(10, n &lt; 40 ? n : 39);<br>        for(double i = 1; i &lt; bound; i++) if(isNarcissistic(i)) {<br>            armstrongs.add(i);<br>        }<br>        return armstrongs;<br>    }<br>    <br>    public static boolean isNarcissistic(double number) {<br>        List&lt;Integer&gt; digits = new ArrayList&lt;&gt;();<br>        double num = number;<br>        while(num != 0) {<br>            digits.add((int) num  % 10);<br>            num = floor(num / 10);<br>        }<br>        double sum = 0;<br>        for(Integer d : digits) {<br>            sum += pows[digits.size()][d];<br>        }<br>        return sum == number;<br>    }<br>    <br><br>    public static void main(String[] args) {<br>        for(Double d : narcissistic(7)) {<br>            System.out.printf("%.0f%n", d);<br>        }<br>    }<br>}</code></pre>
      <br>
      <ul>
        <li><a name="Python"></a>Python</li>
      </ul>
      <pre class="prettyprint"><code>from functools import reduce<br><br>def toDigits(num):<br>    return [] if num == 0 else ([num % 10] + toDigits(num // 10))<br><br>def isNarcissistic(number):<br>    digits = toDigits(number)<br>    return reduce(lambda sum, d: sum + d ** len(digits), <br>               digits, 0) == number<br><br>def narcissistic(n):<br>    return [i for i in range(1, 10 ** (n if n &lt; 40 else 39)) <br>                  if isNarcissistic(i)]<br><br>print(narcissistic(3))<br></code></pre>
      <br>
      <ul>
        <li><a name="Scala"></a>Scala</li>
      </ul>
      <pre class="prettyprint"><code>import scala.math.BigInt<br>import scala.math.pow<br><br>def toDigits(num: BigInt): List[Int] = {<br>    if(num == 0) Nil else (num % 10).toInt :: toDigits(num / 10)<br>}<br><br>def isNarcissistic(number: BigInt) = {<br>    val digits = toDigits(number)<br>    (0 /: digits) { (sum, d) =&gt; sum + pow(d, digits.size).toInt } == number<br>}<br><br>def narcissistic(n: Int) = {<br>    for(i &lt;- BigInt(1) until BigInt(10).pow(if(n &lt; 40) n else 39)<br>        if isNarcissistic(i)) yield i<br>}<br><br>narcissistic(3).foreach(println _)</code></pre>
      <br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre class="prettyprint"><code>def toDigits(num)<br>    num == 0 ? [] : ([num % 10]) + toDigits(num / 10)<br>end<br><br>def isNarcissistic(number)<br>    digits = toDigits(number)<br>    digits.reduce(0) {|sum, d| sum + d ** digits.size} == number<br>end<br><br>def narcissistic(n)<br>    (1...10 ** (n &lt; 40 ? n : 39)).select {|i| isNarcissistic(i)}<br>end<br><br>print(narcissistic(3))<br></code></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre class="prettyprint"><code>function isNarcissistic(number) {<br>    var digits = [];<br>    var num = number;<br>    while(num != 0) {<br>        digits.push(num  % 10);<br>        num = parseInt(num / 10);<br>    }<br>    var sum = 0;<br>    for(var i = 0; i &lt; digits.length; i++) {<br>        sum += Math.pow(digits[i], digits.length);<br>    }<br>    return sum == number;<br>}<br>    <br>function narcissistic(n) {<br>    var armstrongs = [];<br>    var bound = Math.pow(10, n &lt; 40 ? n : 39);<br>    for(var i = 1; i &lt; bound; i++) if(isNarcissistic(i)) {<br>        armstrongs.push(i);<br>    }<br>    return armstrongs;<br>}<br><br>print(narcissistic(3));<br></code></pre>
      <br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre class="prettyprint"><code>toDigits num =<br>    if num == 0 then [] else (num `mod` 10) : toDigits (num `div` 10)<br><br>isNarcissistic number = <br>    number == (foldl (\sum d -&gt; sum + d ^ (length digits)) 0 digits)<br>    where digits = toDigits number<br><br>narcissistic n =<br>    [i | i &lt;- [1..10 ^ (if n &lt; 40 then n else 39)], isNarcissistic(i)]<br><br>main = print \$ narcissistic 3<br></code></pre>
      <br>
      <br>
      

<br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
