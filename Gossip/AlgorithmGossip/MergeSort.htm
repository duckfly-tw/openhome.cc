<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/sort/merge/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明

      
之前所介紹的排序法都是在同一個陣列中的排序，考慮今日有兩筆或兩筆以上的資料，它可能是不同陣列中的資料，或是不同檔案中的資料，如何為它們進行排序？


      
...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="合併排序法">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/MergeSort.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明

      
之前所介紹的排序法都是在同一個陣列中的排序，考慮今日有兩筆或兩筆以上的資料，它可能是不同陣列中的資料，或是不同檔案中的資料，如何為它們進行排序？


      
...">


    <title>合併排序法</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="MergeSort.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>合併排序法</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             
      
      <h2>說明</h2>

      
之前所介紹的排序法都是在同一個陣列中的排序，考慮今日有兩筆或兩筆以上的資料，它可能是不同陣列中的資料，或是不同檔案中的資料，如何為它們進行排序？<br>


      
      <h2>解法</h2>

      
可以使用合併排序法，合併排序法基本是將兩筆已排序的資料合併並進行排序，如果所讀入的資料尚未排序，可以先利用其它的排序方式來處理這兩筆資料，然後再將排序好的這兩筆資料合併。<br>

      <br>


有人問道，如果兩筆資料本身就無排序順序，何不將所有的資料讀入，再一次進行排序？排序的精神是儘量利用資料已排序的部份，來加快排序的效率，小筆資料的
排序較為快速，如果小筆資料排序完成之後，再合併處理時，因為兩筆資料都有排序了，所有在合併排序時會比單純讀入所有的資料再一次排序來的有效率。<br>

      <br>


那麼可不可以直接使用合併排序法本身來處理整個排序的動作？而不動用到其它的排序方式？答案是肯定的，只要將所有的數字不斷的分為兩個等分，直到最後剩一個數字為止，然後再反過來不斷的合併，就如下圖所示： <br>

      



      
      <div style="text-align: center;"><div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="合併排序" title="合併排序" src="images/mergeSort-1.jpg" /></div></div></div>


      <br>

      <br>


不過基本上分割又會花去額外的時間，不如使用其它較好的排序法來排序小筆資料，再使用合併排序來的有效率。<br>

      <br>


下面這個程式範例，我們使用快速排序法來處理小筆資料排序，然後再使用合併排序法處理合併的動作。 

      <br>


      <br>


      
      <h2> 實作：<a href="MergeSort.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="MergeSort.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="MergeSort.htm#Python">Python</a>&nbsp;&nbsp;&nbsp; <a href="MergeSort.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="MergeSort.htm#Scala"></a><a href="MergeSort.htm#Ruby">Ruby</a><br>
      </h2>



      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>



      
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define MAX1 10 <br>#define MAX2 10 <br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>int partition(int[], int, int); <br>void quickSort(int[], int, int); <br>void mergeSort(int[], int, int[], int, int[]); <br><br>int main(void) { <br>    srand(time(NULL)); <br>    <br>    int number1[MAX1] = {0}; <br>    int number2[MAX1] = {0}; <br>    int number3[MAX1+MAX2] = {0}; <br><br>    printf("排序前："); <br>    printf("\nnumber1[]："); <br>    int i;<br>    for(i = 0; i &lt; MAX1; i++) { <br>        number1[i] = rand() % 100; <br>        printf("%d ", number1[i]); <br>    }<br>    printf("\nnumber2[]："); <br>    for(i = 0; i &lt; MAX2; i++) { <br>        number2[i] = rand() % 100; <br>        printf("%d ", number2[i]); <br>    } <br><br>    // 先排序兩筆資料 <br>    quickSort(number1, 0, MAX1-1); <br>    quickSort(number2, 0, MAX2-1); <br><br>    printf("\n排序後："); <br>    printf("\nnumber1[]："); <br>    for(i = 0; i &lt; MAX1; i++) <br>        printf("%d ", number1[i]); <br>    printf("\nnumber2[]："); <br>    for(i = 0; i &lt; MAX2; i++) <br>        printf("%d ", number2[i]); <br><br>    // 合併排序 <br>    mergeSort(number1, MAX1, number2, MAX2, number3); <br><br>    printf("\n合併後："); <br>    for(i = 0; i &lt; MAX1+MAX2; i++) <br>        printf("%d ", number3[i]); <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>int partition(int number[], int left, int right) { <br>    int s = number[right]; <br>    int i = left - 1; <br>    int j;<br>    for(j = left; j &lt; right; j++) { <br>        if(number[j] &lt;= s) { <br>            i++; <br>            SWAP(number[i], number[j]); <br>        } <br>    } <br>    SWAP(number[i+1], number[right]); <br>    return i+1; <br>} <br><br>void quickSort(int number[], int left, int right) { <br>    if(left &lt; right) { <br>        int q = partition(number, left, right); <br>        quickSort(number, left, q-1); <br>        quickSort(number, q+1, right); <br>    } <br>} <br><br>void mergeSort(int number1[], int M, int number2[], <br>                int N, int number3[]) { <br>    int i = 0, j = 0, k = 0; <br>    while(i &lt; M &amp;&amp; j &lt; N) { <br>        if(number1[i] &lt;= number2[j]) <br>            number3[k++] = number1[i++]; <br>        else <br>            number3[k++] = number2[j++]; <br>    } <br><br>    while(i &lt; M) <br>        number3[k++] = number1[i++]; <br>    while(j &lt; N) <br>        number3[k++] = number2[j++]; <br>} <br></code></pre>



      <br>



      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>



      
      <pre class="prettyprint"><code>public class Sort {<br>    // number1、number2 必須排序過<br>    public static int[] merge(int[] number1, int[] number2) {<br>        int[] number3 = new int[number1.length + number2.length];<br>        <br>        int i = 0, j = 0, k = 0; <br>        while(i &lt; number1.length &amp;&amp; j &lt; number2.length) { <br>            if(number1[i] &lt;= number2[j]) <br>                number3[k++] = number1[i++]; <br>            else <br>                number3[k++] = number2[j++]; <br>        } <br><br>        while(i &lt; number1.length) <br>            number3[k++] = number1[i++]; <br>        while(j &lt; number2.length) <br>            number3[k++] = number2[j++];<br>        <br>        return number3;<br>    }<br>}<br></code></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>def sort(nb1, nb2):<br>    if len(nb1) == 0: return nb2<br>    elif len(nb2) == 0: return nb1<br>    elif nb1[0] &lt; nb2[0]: return [nb1[0]] + sort(nb1[1:], nb2)<br>    else: return [nb2[0]] + sort(nb1, nb2[1:])<br>    <br>number1 = [4,13,6,6,2,7,2,9,29]<br>number2 = [4,13,6,6,2,7,2,9,29]<br>number1.sort()<br>number2.sort()<br>print(sort(number1, number2))<br></code></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>object Sort {<br>    def merge(nb1: List[Int], nb2: List[Int]): List[Int] = <br>        (nb1, nb2) match {<br>            case (Nil, _) =&gt; nb2<br>            case (_, Nil) =&gt; nb1<br>            case (head1 :: tail1, head2 :: tail2) =&gt;<br>                if(head1 &lt;= head2) head1 :: merge(tail1, nb2)<br>                else head2 :: merge(nb1, tail2)<br>        }<br>}<br><br>Sort.merge(List(1,2,3,4,5,6,7), List(1,2,3,4,5,6,7)).foreach(print)</code></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre class="prettyprint"><code>def sort(nb1, nb2)<br>    if nb1.empty? <br>        return nb2<br>    elsif nb2.empty? <br>        return nb1<br>    elsif nb1[0] &lt; nb2[0] <br>        return [nb1[0]] + sort(nb1[1..-1], nb2)<br>    else <br>        return [nb2[0]] + sort(nb1, nb2[1..-1])<br>    end<br>end<br></code></pre>
<br>

 

<br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
