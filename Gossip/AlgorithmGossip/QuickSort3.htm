<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/sort/quick2/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明

      
之前說過軸的選擇是快速排序法的效率關鍵之一，在這邊的快速排序法的軸選擇方式更加快了快速排序法的效率，它是來自演算法名書 Introduction to Algorithms...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="快速排序法（三）">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/QuickSort3.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明

      
之前說過軸的選擇是快速排序法的效率關鍵之一，在這邊的快速排序法的軸選擇方式更加快了快速排序法的效率，它是來自演算法名書 Introduction to Algorithms...">


    <title>快速排序法（三）</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="QuickSort3.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>快速排序法（三）</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             




      
      <h2>說明</h2>

      
之前說過軸的選擇是快速排序法的效率關鍵之一，在這邊的快速排序法的軸選擇方式更加快了快速排序法的效率，它是來自演算法名書 Introduction to Algorithms 之中。<br>


      
      <h2>解法</h2>

      
先說明這個快速排序法的概念，它以最右邊（或最左邊）的值s作比較的標準，將整個數列分為三個部份，一個是小於s的部份，一個是大於s的部份，一個是未處理的部份，如下所示 ： <br>

      

      
      <div style="text-align: center;"><div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="快速排序" title="快速排序" src="images/quickSort3-1.jpg" /></div></div></div>


      <br>


在排序的過程中，i 與 j 都會不斷的往右進行比較與交換，最後數列會變為以下的狀態： <br>

      
      
      <div style="text-align: center;"><div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="快速排序" title="快速排序" src="images/quickSort3-2.jpg" /></div></div></div>


      <br>


然後將s的值置於中間，接下來就以相同的步驟會左右兩邊的數列進行排序的動作，如下所示： <br>

      
      
      <div style="text-align: center;"><div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="快速排序" title="快速排序" src="images/quickSort3-3.jpg" /></div></div></div>


      <br>



整個演算的過程，直接摘錄書中的虛擬碼來作說明： <br>



      
      <pre class="prettyprint"><code>QUICKSORT(A, p, r) <br>    if p &lt; r <br>        then q &lt;- PARTITION(A, p, r) <br>                 QUICKSORT(A, p, q-1) <br>                 QUICKSORT(A, q+1, r) <br>end QUICKSORT <br><br>PARTITION(A, p, r) <br>    x &lt;- A[r] <br>    i &lt;- p-1 <br>    for j &lt;- p to r-1 <br>        do if A[j] &lt;= x <br>                 then  i &lt;- i+1 <br>                         exchange A[i]&lt;-&gt;A[j] <br>    exchange A[i+1]&lt;-&gt;A[r] <br>    return i+1 <br>end PARTITION  <br></code></pre>



      <br>

      
一個實際例子的演算如下所示：<br>


      
      <div style="text-align: center;"><div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="快速排序" title="快速排序" src="images/quickSort3-4.jpg" /></div></div></div>


      <br>


      <br>


      
      <h2> 實作：<a href="QuickSort3.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="QuickSort3.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="QuickSort3.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="QuickSort3.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="QuickSort3.htm#Scala"></a><a href="QuickSort3.htm#Ruby">Ruby</a><br>
      </h2>



      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>



      
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define MAX 10 <br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>int partition(int[], int, int); <br>void quickSort(int[], int, int); <br><br>int main(void) { <br>    srand(time(NULL)); <br>    <br>    int number[MAX] = {0}; <br><br>    printf("排序前："); <br>    int i;<br>    for(i = 0; i &lt; MAX; i++) { <br>        number[i] = rand() % 100; <br>        printf("%d ", number[i]); <br>    } <br><br>    quickSort(number, 0, MAX-1); <br><br>    printf("\n排序後："); <br>    for(i = 0; i &lt; MAX; i++) <br>        printf("%d ", number[i]); <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>int partition(int number[], int left, int right) { <br>    int i = left - 1; <br>    int j;<br>    for(j = left; j &lt; right; j++) { <br>        if(number[j] &lt;= number[right]) { <br>            i++; <br>            SWAP(number[i], number[j]); <br>        } <br>    } <br><br>    SWAP(number[i+1], number[right]); <br>    return i+1; <br>} <br><br>void quickSort(int number[], int left, int right) { <br>    if(left &lt; right) { <br>        int q = partition(number, left, right); <br>        quickSort(number, left, q-1); <br>        quickSort(number, q+1, right); <br>    } <br>} <br></code></pre>



      <br>



      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>



      
      <pre class="prettyprint"><code>public class Sort {<br>    public static void quick(int[] number) {<br>        sort(number, 0, number.length-1);<br>    }<br>    <br>    private static void sort(int[] number, int left, int right) {<br>        if(left &lt; right) { <br>            int q = partition(number, left, right); <br>            sort(number, left, q-1); <br>            sort(number, q+1, right); <br>        } <br><br>    }<br><br>    private static int partition(int number[], int left, int right) {  <br>        int i = left - 1; <br>        for(int j = left; j &lt; right; j++) { <br>            if(number[j] &lt;= number[right]) { <br>                i++; <br>                swap(number, i, j); <br>            } <br>        } <br>        swap(number, i+1, right); <br>        return i+1; <br>    } <br><br>    private static void swap(int[] number, int i, int j) {<br>        int t = number[i]; <br>        number[i] = number[j]; <br>        number[j] = t;<br>    }<br>}<br></code></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>def sort(lst):<br>    if len(lst) &lt;= 1:<br>        return lst<br>    pivot = lst.pop(0)<br>    before = [i for i in lst if i &lt; pivot]<br>    after = [i for i in lst if i &gt;= pivot]<br>    return sort(before) + [pivot] + sort(after)</code></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>object Sort {<br>    def quick(list: List[Int]): List[Int] = {<br>       list match {<br>           case Nil =&gt; Nil     <br>           case x::xs =&gt;        <br>           val (before,after) = xs partition (_ &lt; x)<br>           quick(before) ++ (x :: quick(after))<br>       }<br>    }<br>}<br></code></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre class="prettyprint"><code>class Array<br>    def comprehend(&amp;block)<br>        return self if block.nil?<br>        self.collect(&amp;block).compact<br>    end<br>end<br><br>def quick(lst)<br>    case<br>    when lst.length &lt;= 1<br>        lst<br>    when pivot = lst.shift<br>        before = lst.comprehend { |i| i if i &lt; pivot}<br>        after = lst.comprehend { |i| i if i &gt;= pivot}<br>        quick(before) + [pivot] + quick(after)<br>    end<br>end<br></code></pre>




<br><br><div class="ad-2" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
