<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/AlgorithmGossip/'https://openhome.cc/zh-tw/algorithm/randomness/shuffle/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="說明

      
洗撲克牌的原理其實與亂數排列是相同的，都是將一組數字（例如1∼N）打亂重新排列，只不過洗撲克牌多了一個花色判斷的動作而已。


      
      解法
...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="洗撲克牌（亂數排列）">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/AlgorithmGossip/ShuffleCard.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="說明

      
洗撲克牌的原理其實與亂數排列是相同的，都是將一組數字（例如1∼N）打亂重新排列，只不過洗撲克牌多了一個花色判斷的動作而已。


      
      解法
...">


    <title>洗撲克牌（亂數排列）</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="ShuffleCard.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回 Algorithm</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>洗撲克牌（亂數排列）</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             
      
      <h2>說明</h2>

      
洗撲克牌的原理其實與亂數排列是相同的，都是將一組數字（例如1∼N）打亂重新排列，只不過洗撲克牌多了一個花色判斷的動作而已。<br>


      
      <h2>解法</h2>

      
初學者通常會直接想到，隨機產生1∼N的亂數並將之存入陣列中，後來產生的亂數存入陣列前必須先檢查陣列中是否已有重複的數字，如果有這個數就不存入，再重新產生下一個數，運氣不好的話，重複的次數就會很多，程式的執行速度就很慢了，這不是一個好方法。<br>

      <br>


以1∼52的亂數排列為例好了，可以將陣列先依序由1到52填入，然後使用一個迴圈走訪陣列，並隨機產生1∼52的亂數，將產生的亂數當作索引取出陣列值，並與目前陣列走訪到的值相交換，如此就不用擔心亂數重複的問題了，陣列走訪完畢後，所有的數字也就重新排列了。<br>

      <br>


至於如何判斷花色？這只是除法的問題而已，取商數判斷花色，取餘數判斷數字，您可以直接看程式比較清楚。

      <br>


      
      <h2>實作：<a href="ShuffleCard.htm#C">C</a>&nbsp;&nbsp; &nbsp;<a href="ShuffleCard.htm#Java">Java</a>&nbsp;&nbsp; &nbsp;<a href="ShuffleCard.htm#Python">Python</a>&nbsp;&nbsp; &nbsp;<a href="ShuffleCard.htm#Scala">Scala</a>&nbsp;&nbsp;&nbsp; <a href="ShuffleCard.htm#Ruby">Ruby</a>&nbsp;&nbsp;&nbsp; <a href="ShuffleCard.htm#JavaScript">JavaScript</a>&nbsp;&nbsp;&nbsp; <a href="ShuffleCard.htm#Haskell">Haskell</a><br>
      </h2>




      
      <ul>

        <li><a name="C"></a> C
  </li>

      
      </ul>



      
      <pre class="prettyprint"><code>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;time.h&gt;<br>#define N 52<br><br>typedef struct {<br>    char suit[3];<br>    char symbol[3];<br>} Card;<br><br>void shuffle(Card*);<br>void card(int, char*);<br>void suit(int, char*);<br>void symbol(int, char*);<br><br>int main(void) {<br>    srand(time(0));<br>    <br>    Card cards[N];<br>    shuffle(cards);<br>    int i;<br>    for(i = 0; i &lt; N; i++) {<br>        printf("%s%s%c", cards[i].suit, cards[i].symbol, <br>            (i + 1) % 13 ? ' ' : '\n');<br>    }<br><br>    return 0;<br>} <br><br><br>void shuffle(Card* cards) {<br>    int i;<br>    for(i = 0; i &lt; N; i++) {<br>        suit(i + 1, cards[i].suit);<br>        symbol(i + 1, cards[i].symbol);<br>    }<br>    for(i = 0; i &lt; N; i++) {<br>        int j = rand() % 52;<br>        Card tmp = cards[i];<br>        cards[i] = cards[j];<br>        cards[j] = tmp;<br>    }<br>}<br><br>void suit(int number, char* suit) {<br>    switch((number - 1) / 13) { <br>         case 0: strcpy(suit, "桃"); break;<br>         case 1: strcpy(suit, "心"); break;<br>         case 2: strcpy(suit, "磚"); break;<br>         case 3: strcpy(suit, "梅");<br>    }<br>}<br><br>void symbol(int number, char* symbol) {<br>    int remain = number % 13;<br>    switch(remain) { <br>        case 0:  sprintf(symbol, "%c ", 'K'); break;<br>        case 1:  sprintf(symbol, "%c ", 'A'); break;<br>        case 11: sprintf(symbol, "%c ", 'J'); break;<br>        case 12: sprintf(symbol, "%c ", 'Q'); break;<br>        default: sprintf(symbol, "%-2d", remain);<br>    }     <br>}<br></code></pre>



      <br>



      
      <ul>

        <li><a name="Java"></a> Java
  </li>

      
      </ul>



      
      <pre class="prettyprint"><code>import java.util.*;<br><br>class Card {<br>    private String suit;<br>    private String symbol;<br>    <br>    public Card(String suit, String symbol) {<br>        this.suit = suit;<br>        this.symbol = symbol;<br>    }<br>    <br>    public String toString() { return suit + symbol; }<br>}<br><br>public class Poker {<br>    private static List&lt;Card&gt; cards = new ArrayList&lt;&gt;(52);<br>    static {<br>        for(int i = 0; i &lt; 52; i++) {<br>            cards.add(new Card(suit(i + 1), symbol(i + 1)));<br>        }<br>    }<br><br>    private static String suit(int number) {<br>        switch((number - 1) / 13) { <br>            case 0 : return "桃";<br>            case 1 : return "心";<br>            case 2 : return "磚";<br>            default: return "梅";<br>        }<br>    }<br>    <br>    private static String symbol(int number) {<br>        int remain = number % 13;<br>        switch(remain) { <br>            case 0 : return String.format("%c ", 'K');<br>            case 1 : return String.format("%c ", 'A');<br>            case 11: return String.format("%c ", 'J');<br>            case 12: return String.format("%c ", 'Q');<br>            default: return String.format("%-2d", remain);<br>        } <br>    }<br><br>    public static Card[] shuffle() {<br>        for(int i = 0; i &lt; cards.size(); i++) {<br>            Collections.swap(cards, i, <br>                (int) (Math.random() * cards.size() - 1));<br>        }<br>        return cards.toArray(new Card[52]);<br>    }<br><br>    public static void main(String args[]) { <br>        Card[] cards = shuffle();<br>        for(int i = 0; i &lt; cards.length; i++) {<br>            System.out.printf(<br>                "%s%c", cards[i], (i + 1) % 13 == 0 ? '\n' : ' '); <br>        }<br>    } <br>}<br></code></pre><br><ul><li><a name="Python"></a>Python</li></ul><pre class="prettyprint"><code>from random import randint<br>from functools import reduce<br><br>class Card:<br>    def __init__(self, suit, symbol):<br>        self.suit = suit<br>        self.symbol = symbol<br>        <br>    def __str__(self):<br>        return self.suit + self.symbol<br><br>class Poker:<br>    cards = [Card(<br>        {0: "桃", 1: "心", 2: "磚", 3: "梅"}[i // 13],<br>        {0: "K ", 1: "A ", 11: "J ", 12: "Q "}.get(<br>            (i + 1) % 13, "%-2d" % ((i + 1) % 13))<br>    ) for i in range(52)]<br>    <br>    @staticmethod<br>    def shuffle():<br>        def swap(cards, i, j):<br>            a, b = sorted([i, j])<br>            return cards if a == b else (cards[0:a] + [cards[b]] + <br>                       cards[a + 1:b] + [cards[a]] + cards[b + 1:])<br>        return reduce(lambda cards, i: swap(cards, i, randint(0, 51)),<br>                   range(len(Poker.cards)), Poker.cards)<br><br>cards = Poker.shuffle()<br>for i in range(len(cards)):<br>    print(cards[i], end = "\n" if (i + 1) % 13 == 0 else " ")</code></pre><br><ul><li><a name="Scala"></a>Scala</li></ul><pre class="prettyprint"><code>import scala.util.Random<br><br>class Card(st: String, sym: String) {<br>    def suit = st<br>    def symbol = sym<br>    override def toString = st + sym<br>}<br><br>object Poker {<br>    private def suit(number: Int) = (number - 1) / 13 match {<br>        case 0 =&gt; "桃";<br>        case 1 =&gt; "心"<br>        case 2 =&gt; "磚"<br>        case 3 =&gt; "梅"<br>    }<br>    <br>    private def symbol(number: Int) = {<br>        val remain = number % 13<br>        remain match { <br>            case 0  =&gt; "%c ".format('K')<br>            case 1  =&gt; "%c ".format('A')<br>            case 12 =&gt; "%c ".format('Q')<br>            case 11 =&gt; "%c ".format('J')<br>            case _  =&gt; "%-2d".format(remain)<br>        } <br>    }<br>    <br>    val cards = (for(i &lt;- 0 until 52) <br>                    yield new Card(suit(i), symbol(i))).toList<br>    <br>    private val random = new Random<br>    <br>    def shuffle = {<br>        def swap(cards: List[Card], i: Int, j: Int) = {<br>            val List(a, b) = List(i, j).sortWith(_ &lt; _)<br>            if(a == b) cards else (cards.take(a) ++ <br>                (cards(b) :: cards.slice(a + 1, b)) ++ <br>                (cards(a) :: cards.drop(b + 1)))<br>        }<br>        (cards /: (0 until cards.size))((cards, i) =&gt; <br>            swap(cards, i, (random.nextDouble * cards.size - 1).toInt))<br>    }<br>}<br><br>val cards = Poker.shuffle<br>for(i &lt;- 0 until cards.size) {<br>    printf("%s%c", cards(i), if((i + 1) % 13 == 0) '\n' else ' ')<br>}</code></pre><br>
      <ul>
        <li><a name="Ruby"></a>Ruby</li>
      </ul>
      <pre class="prettyprint"><code># encoding: Big5<br>class Card<br>    def initialize(suit, symbol)<br>        @suit = suit<br>        @symbol = symbol<br>    end<br>        <br>    def to_s<br>        @suit + @symbol<br>    end<br>end<br><br>class Poker<br>    def self.suit(number)<br>        case (number - 1) / 13<br>            when 0; "桃"<br>            when 1; "心"<br>            when 2; "磚"<br>            when 3; "梅"<br>        end<br>    end<br>    <br>    def self.symbol(number)<br>        remain = number % 13<br>        case remain<br>            when 0;  "K "<br>            when 1;  "A "<br>            when 11; "J "<br>            when 12; "Q "<br>            else; sprintf("%-2d", remain)<br>        end<br>    end<br>    <br>    def self.shuffle<br>        swap = -&gt;(cards, i, j) {<br>            a, b = [i, j].sort<br>            a == b ? cards : (cards.take(a) + [cards[b]] + <br>                cards[a + 1...b] + [cards[a]] + cards.drop(b + 1))<br>        }<br>        <br>        (0...(@@cards.size)).reduce(@@cards) { |cards, i|<br>            swap.call(cards, i, (rand() * 51).to_i)<br>        }<br>    end<br>    <br>    @@cards = (0...52).map { |i| Card.new(suit(i + 1), symbol(i + 1))}<br>end<br><br>cards = Poker.shuffle<br>(0...cards.size).each do |i|<br>    printf("%s%c", cards[i], (i + 1) % 13 == 0 ? "\n" : " ")<br>end<br></code></pre>
      <br>
      <ul>
        <li><a name="JavaScript"></a>JavaScript</li>
      </ul>
      <pre class="prettyprint"><code>function Card(suit, symbol) {<br>    this.suit = suit;<br>    this.symbol = symbol;<br>}<br><br>Card.prototype.toString = function() {<br>    return this.suit + this.symbol;<br>};<br><br>var Poker = function() {<br>    function suit(number) {<br>        switch(parseInt((number - 1) / 13)) {<br>            case 0 : return "桃";<br>            case 1 : return "心";<br>            case 2 : return "磚";<br>            case 3 : return "梅";<br>        }<br>    }<br>    <br>    function symbol(number) {<br>        var remain = number % 13;<br>        switch(remain) {<br>            case 0 : return 'K ';<br>            case 1 : return 'A ';<br>            case 11: return 'J ';<br>            case 12: return 'Q ';<br>            default: return remain + <br>                new Array(3 - (remain + '').length).join(' ');<br>        }<br>    }<br><br>    var cards = [];<br>    for(var i = 0; i &lt; 52; i++) {<br>        cards.push(new Card(suit(i + 1), symbol(i + 1)));<br>    }<br>    <br>    return {<br>        shuffle: function() {<br>            for(var i = 0; i &lt; cards.length; i++) {<br>                var j = parseInt(Math.random() * cards.length - 1);<br>                var tmp = cards[i];<br>                cards[i] = cards[j];<br>                cards[j] = tmp;<br>            }<br>            return cards.slice(0, cards.length);<br>        }<br>    };<br>}();<br><br>print(Poker.shuffle());<br></code></pre>
      <br>
      <ul>
        <li><a name="Haskell"></a>Haskell</li>
      </ul>
      <pre class="prettyprint"><code>import Data.List<br>import System.Random<br><br>data Card = Card {suit :: [Char], symbol :: [Char]}<br><br>instance Show Card where<br>    show card = (suit card) ++ (symbol card)<br>    <br>shuffle rList = <br>    foldl (\cards (i, r) -&gt; swap cards i r) cards (zip [0..51] rList)<br>    where suit number = <br>              case (number - 1) `div` 13 of 0 -&gt; "S"<br>                                            1 -&gt; "H"<br>                                            2 -&gt; "D"<br>                                            3 -&gt; "C"<br>          symbol number =<br>              case remain of 0  -&gt; "K"<br>                             1  -&gt; "A"<br>                             11 -&gt; "J"<br>                             12 -&gt; "Q"<br>                             _  -&gt; show(remain)<br>              where remain = number `mod` 13<br>          slice from to = take (to - from) . drop from<br>          swap cards i j =<br>              if a == b then cards <br>              else (take a cards) ++ <br>                  ((cards !! b) : (slice (a + 1) b cards)) ++ <br>                  ((cards !! a) : (drop (b + 1) cards))<br>              where [a, b] = sort [i, j]<br>          cards = [Card (suit \$ i + 1) (symbol \$ i + 1) | i &lt;- [0..51]]<br>          <br>main = do<br>    gen &lt;- getStdGen<br>    print \$ shuffle \$ rand gen 52<br>    where rand gen n= take n \$ randomRs (0, 51) gen::[Int]<br></code></pre>
<br>

 





<br><br><div class="ad-2" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
