<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/DesignPattern/'https://openhome.cc/zh-tw/pattern/behavioral/template-method/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="您想要設計一個猜數字遊戲，猜數字遊戲的流程大致就是：
      顯
示訊息（歡迎）
隨機產生數字
      遊戲迴圈
&nbsp; &nbsp; 顯示訊息（提示使用者輸入）
     ...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="Template Method 模式">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/DesignPattern/TemplateMethod.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="您想要設計一個猜數字遊戲，猜數字遊戲的流程大致就是：
      顯
示訊息（歡迎）
隨機產生數字
      遊戲迴圈
&nbsp; &nbsp; 顯示訊息（提示使用者輸入）
     ...">


    <title>Template Method 模式</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="TemplateMethod.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="https://openhome.cc/Gossip/DesignPattern/index.html">回設計模式</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>Template Method 模式</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
            
      您想要設計一個猜數字遊戲，猜數字遊戲的流程大致就是：<br>
      <div style="margin-left: 40px;">顯
示訊息（歡迎）<br>
隨機產生數字<br>
      <span style="font-weight: bold;">遊戲迴圈<br>
&nbsp; &nbsp; </span>顯示訊息（提示使用者輸入）<br>
      <span style="font-weight: bold;">&nbsp; &nbsp; 取得使用者輸入</span><br>
      <span style="font-weight: bold;">&nbsp; &nbsp; 比較是否猜中<br>
      </span>&nbsp; &nbsp;<span style="font-weight: bold;"></span>顯示訊息（輸入正確與否）<span style="font-weight: bold;"></span></div>
      <br>
      在描述流程輸廓時，並沒有提及如何顯示訊息、沒有提及如何取得使用者輸入等具體的作法，只是<span style="font-weight: bold;">歸納出一些共同的流程步驟</span>：<br>
      
      <pre class="prettyprint"><code>abstract class GuessGame {<br>    protected String welcome;<br>    protected String prompt;<br>    protected String correct;<br>    protected String bigger;<br>    protected String smaller;<br>   <br>    void go() {<br>        message(welcome);<br> <br>        int number = (int) (Math.random() * 10);<br>        int guess = 0;<br>        do {<br>            message(prompt);<br>            guess = guess();<br>            if(guess &gt; number) {<br>                message(bigger);<br>            }<br>            else if(guess &lt; number) {<br>                message(smaller);<br>            }<br>        } while(guess != number);<br>       <br>        message(correct);<br>    }<br><br>    protected abstract void message(String message);<br>    protected abstract int guess();<br>}<br></code></pre>
      <br>
      如果是個文字模式下的猜數字遊戲，可以將顯示訊息、取得使用者輸入等以文字模式下的具體作法實現出來。例如：<br>
      
      <pre class="prettyprint"><code>import java.util.Scanner;<br><br>class ConsoleGame extends GuessGame {<br>    private Scanner scanner;<br>   <br>    ConsoleGame() {<br>        welcome = "歡迎";<br>        prompt = "輸入";<br>        correct = "猜中了";<br>        bigger = "你猜的比較大";<br>        smaller = "你猜的比較小";<br>        scanner = new Scanner(System.in);<br>    }<br>   <br>    protected void message(String msg) {<br>        System.out.println(msg);<br>    }<br>   <br>    protected int guess() {<br>        return scanner.nextInt();<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        GuessGame game = new ConsoleGame();<br>        game.go();<br>    }<br>}</code></pre>
      <br>
這是Template Method模式的實例，其在抽象父類別中定義好某個操作的整體流程，而在子類別中才將流程中一些未定的操作實現出來：<br>
      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/TemplateMethod-1.jpg" /></div></div><br>
      <br>
如果以Python來實現：<br>
      
      <pre class="prettyprint"><code>import random<br>from abc import ABCMeta, abstractmethod<br><br>class GuessGame(metaclass=ABCMeta):<br>    @abstractmethod<br>    def message(self, msg):<br>        pass<br><br>    @abstractmethod<br>    def guess(self):<br>        pass    &nbsp;<br><br>    def go(self):<br>        self.message(self.welcome)<br>        number = int(random.random() * 10)<br>        while True:<br>            guess = self.guess();<br>            if guess &gt; number:<br>                self.message(self.bigger)<br>            elif guess &lt; number:<br>                self.message(self.smaller)<br>            else:<br>                break<br>        self.message(self.correct)<br><br>class ConsoleGame(GuessGame):<br>    def __init__(self):<br>        self.welcome = "歡迎"<br>        self.prompt = "輸入數字："<br>       &nbsp;self.correct = "猜中了"<br>        self.bigger = "你猜的比較大"<br>        self.smaller = "你猜的比較小"<br>    <br>    def message(self, msg):<br>        print(msg)<br>    <br>    def guess(self):<br>        return int(input(self.prompt))<br><br>game = ConsoleGame()<br>game.go()</code></pre>
      <br>
      在Java
中要撰寫Servlet，會繼承HttpServlet類別，針對GET方法的請求，會重新定義doGet()方法，針對POST方法的請求，會重新定義
doPost()方法....。事實上，這也是Template
Method模式的實際例子，因為在HttpServlet處理請求的service()方法中，是這麼定義的：<br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
protected void service(HttpServletRequest req, </span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
HttpServletResponse resp)</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
throws ServletException, IOException {</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
String method = req.getMethod(); // 取得請求的方法</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if (method.equals(METHOD_GET)) { // HTTP GET</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // 略...</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <span style="color: red;">doGet(req, resp);</span></span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// 略 ...</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
} else if (method.equals(METHOD_HEAD)) { // HTTP HEAD</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// 略 ...</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <span style="color: red;">doHead(req, resp);</span></span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
} else if (method.equals(METHOD_POST)) { // HTTP POST</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // 略 ...</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <span style="color: red;">doPost(req, resp);</span></span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
} else if (method.equals(METHOD_PUT)) { // HTTP PUT</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // 略 ...</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
}</span><br>
      <br>
當
請求來到時，容器會呼叫Servlet的service()方法，而可以看到，HttpServlet的service()中所定義的，基本上就是判斷
HTTP請求的方式，再分別呼叫doGet()、doPost()等方法，所以若您想針對GET、POST等方法進行處理，才會只需要在繼承
HttpServlet之後，重新定義相對應的doGet()、doPost()方法。<br>
      <br>
Template Method模式著重的是在父類別實作骨架，而將未實作抽象方法部份留待子類別來實作。先前在說明 <a href="FactoryMethod.htm">Factory
Method 模式</a> 前，其實就曾使用過 Template
Method模式。<br>
      <br>
      <a href="FactoryMethod.htm">Factory Method 模式</a>將實際<span style="font-weight: bold;">要建立的物件</span>推遲至子類中決定，而
Template
Method模式則是將框架中<span style="font-weight: bold;">抽象的流程部份</span>留待子類來解決。在 <a href="FactoryMethod.htm">Factory Method 模式</a> 的例子中，從物件
建立的角度來看，createDocument()是Factory
Method，而從流程框架的角度來看，createDocument()則是
Template
Method模式的一個方法實作。 <br><br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'G-QVQQYFSC8J', 'auto');
  ga('send', 'pageview');

</script>
</div>
