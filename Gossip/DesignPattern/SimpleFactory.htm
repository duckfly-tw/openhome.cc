<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/DesignPattern/'https://openhome.cc/zh-tw/pattern/creational/simple-factory/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="Simple Factory模式又稱Static Factory模式。一個Simple
Factory生產成品，而對客戶端隱藏產品產生的細節，物件如何生成，生成前是否與其它物件建立依賴關係，客戶端皆...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="Simple Factory 模式">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/DesignPattern/SimpleFactory.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="Simple Factory模式又稱Static Factory模式。一個Simple
Factory生產成品，而對客戶端隱藏產品產生的細節，物件如何生成，生成前是否與其它物件建立依賴關係，客戶端皆...">


    <title>Simple Factory 模式</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="SimpleFactory.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="https://openhome.cc/Gossip/DesignPattern/index.html">回設計模式</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>Simple Factory 模式</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
            
      
Simple Factory模式又稱Static Factory模式。一個Simple
Factory生產成品，而對客戶端隱藏產品產生的細節，物件如何生成，生成前是否與其它物件建立依賴關係，客戶端皆不用理會，用以將物件生成方式之變化
與客戶端程式碼隔離。<br>

      <br>假設今天，您要建立一個Message物件，這個Message物件會有一連串的物件實例化與依賴關係建立流程：<br><div style="margin-left: 40px;">Session session = someWhere.getSession();<br>
      Message msg = new MimeMessage(session);<br>msg.setFrom(new InternetAddress(session.from));<br>msg.setSubject(session.subject);<br>msg.setText(session.text);<br>
msg.setHeader(session.headerName, session.headerValue);<br>msg.setDate(session.date);<br>
...<br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">mailService.send(msg);</span><br></div><br>若這樣的流程是固定的，您可以將以上的細節封裝在一個類別中成為其靜態方法：<br><div style="margin-left: 40px;"><span style="font-weight: bold;">public class MessageFactory {</span><br><span style="font-weight: bold;">&nbsp; &nbsp; public static Message getMessage(Session session) {</span><br><span style="font-weight: bold;">&nbsp; &nbsp; </span><span style="font-weight: bold;">&nbsp; &nbsp; </span><span style="font-weight: bold;">Message msg = new MimeMessage(session);</span><br><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg.setFrom(new InternetAddress(session.from));</span><br>
      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg.setSubject(session.subject);</span><br>
      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg.setText(session.text);</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: bold;">msg.setHeader(session.headerName, session.headerValue);</span><br>
      <span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg.setDate(session.date);</span><span style="font-weight: bold;"><br>&nbsp; &nbsp; &nbsp; &nbsp; ...<br></span><span style="font-weight: bold;">&nbsp; &nbsp; &nbsp; &nbsp; return msg;</span><br><span style="font-weight: bold;">&nbsp; &nbsp; } </span><br><span style="font-weight: bold;">}</span><br></div><br>

對使用MessageFactory的客戶端，可以這麼取得Message實例，而不用理會物件實例化與依賴關係建立的細節：<br><div style="margin-left: 40px;"><span style="font-weight: bold;">Session session = someWhere.getSession();<br>
Message message = MessageFactory.getMessage(session);<br>
mailService.send(message);<br>
</span></div><br>Simple Factory 的類別圖如下所示：<br><div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/SimpleFactory-1.jpg" /></div></div><br><br><br>UML類別圖中，傳回型態Product意指的是具有Product所定義之公開協定（物件上的公開方法）的物件，而不是專指Java中的interface定義。以Python來說，以下也是個Simple Factory的實現：<br><div style="margin-left: 40px;"><span style="font-weight: bold;">class Message:</span><br><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; def __init__(self, addr, msg):</span><br><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.addr = addr</span><br><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.msg = msg</span><br><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><br><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; def send(self):</span><br><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print("send message '%s' to '%s'" % (self.msg, self.addr))</span><br><br><span style="font-weight: bold;">class MessageFactory:</span><br><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp; def getMessage(addr, msg):</span><br><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = Message(addr, msg)</span><br><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 作一些有的沒的</span><br><span style="font-weight: bold;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return message</span><br><br><span style="font-weight: bold;">msg = MessageFactory.getMessage("caterpillar@openhome.cc", "Hi")</span><br><span style="font-weight: bold;">msg.send()</span><br></div><br>Python的變數沒有型態，真正的型態資訊是在物件之上，就客戶端的角度而言，要確定的是傳回物件必然擁有send()公開方法。<br><br>Simple Factory使用靜態方法來簡單地隱藏物件建立細節。撇開靜態方法不談，隱藏物件建立的細節仍是Factory模式的重點，可將這個模式推至極緻，而成為一種通用、專門用來生成物件、建立依賴關係、甚至具備管理物件生命週期職責的輕量級容器。<br><br><br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'G-QVQQYFSC8J', 'auto');
  ga('send', 'pageview');

</script>
</div>
