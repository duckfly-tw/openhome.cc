<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/DesignPattern/'https://openhome.cc/zh-tw/pattern/behavioral/chain_of_responsibility/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="如果您有一個應用程式，必須對輸入的字元作不同的處理，例如：
      
      char
c = 'A';
      if
(Character.isLetter(c)) {
  ...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="Chain of Responsibility 模式">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/DesignPattern/ChainofResponsibility.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="如果您有一個應用程式，必須對輸入的字元作不同的處理，例如：
      
      char
c = 'A';
      if
(Character.isLetter(c)) {
  ...">


    <title>Chain of Responsibility 模式</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="ChainofResponsibility.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="https://openhome.cc/Gossip/DesignPattern/index.html">回設計模式</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>Chain of Responsibility 模式</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
            
      如果您有一個應用程式，必須對輸入的字元作不同的處理，例如：<br>
      
      <div style="margin-left: 40px;"><span style="font-family: Courier New,Courier,monospace; font-weight: bold;">char
c = 'A';</span><br>
      <span style="font-family: Courier New,Courier,monospace; font-weight: bold;">if
(Character.isLetter(c)) {</span><br>
      <span style="font-family: Courier New,Courier,monospace; font-weight: bold;">
&nbsp; &nbsp;System.out.println("處理字母資料");</span><br>
      <span style="font-family: Courier New,Courier,monospace; font-weight: bold;">}</span><br>
      <span style="font-family: Courier New,Courier,monospace; font-weight: bold;">if
(Character.isDigit(c)) {</span><br>
      <span style="font-family: Courier New,Courier,monospace; font-weight: bold;"></span><span style="font-family: Courier New,Courier,monospace;"> &nbsp;
&nbsp;System.out.println("處理數字資料");</span><span style="font-family: Courier New,Courier,monospace;"></span><br>
      <span style="font-family: Courier New,Courier,monospace;">}</span><br>
      <span style="font-family: Courier New,Courier,monospace;"></span><br>
      <span style="font-family: Courier New,Courier,monospace;"></span><span style="font-family: Courier New,Courier,monospace;">
System.out.println("處理符號資料");</span><br>
      </div>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><br>
使用結構化的方式，用if..else來判斷是否應處理，雖然直覺，壞處是如果要調整處理方式，例如要增加或減少處理方式、調整處理順序等，都必須對程式
作出修改。<br>
      <br>
您可以改為以下的方式：<br>
      
      <pre class="prettyprint"><code>abstract class Handler {<br>    protected Handler next;<br>    Handler(Handler next) {<br>        this.next = next;<br>    }    <br>    void doNext(char c) {<br>        if(next != null) {<br>           next.handle(c);<br>        }<br>    }<br>    abstract void handle(char c);<br>}<br><br>class SymbolHandler extends Handler {<br>    SymbolHandler(Handler next) {<br>        super(next);<br>    }<br>    void handle(char c) {<br>        System.out.println("Symbol has been handled");<br>        doNext(c);<br>    }<br>}<br><br>class CharacterHandler extends Handler {<br>    CharacterHandler(Handler next) {<br>        super(next);<br>    }    <br>    void handle(char c) {<br>        if(Character.isLetter(c)) {<br>            System.out.println("Character has been handled"); <br>        }<br>        doNext(c);<br>    }<br>}<br><br>class DigitHandler extends Handler {<br>    DigitHandler(Handler next) {<br>        super(next);<br>    }    <br>    void handle(char c) { <br>       if(Character.isDigit(c)) {<br>            System.out.println("Digit has been handled"); <br>       }<br>       doNext(c);<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        Handler handler = new SymbolHandler(<br>                            new CharacterHandler(<br>                              new DigitHandler(null)));<br>        handler.handle('A');<br>        handler.handle('1');<br>    }<br>}</code></pre>
      <br>
在上例中，在每個特定處理器物件處理過後，可以決定是否交給下一個物件作處理（如果有的話），您可以自由設定下一個處理器，調整處理的順序等，而不用修改
程式。<br>
      <br>
      這
是Chain of
Responsibility模式的一個例子，多個物件都有機會處理請求，除了可以自由組合處理請求的物件之外，也可以避免請求的發送者與接收者之間的耦
合關係，將這些物件組合為一個鏈，並沿著這個鏈傳遞該請求，每個都可以物件處理它，決定是否傳遞給下一個處理物件。<br>
      <br>
以下是使用Python示範：<br>
      
      <pre class="prettyprint"><code>class Handler:<br>    def __init__(self, next):<br>        self.next = next;<br>    def doNext(self, c):<br>        if self.next:<br>            self.next.handle(c)<br><br>class SymbolHandler(Handler):<br>    def __init__(self, next):<br>        Handler.__init__(self, next)<br>        <br>    def handle(self, c):<br>        print("Symbol has been handled")<br>        self.doNext(c)<br><br>class CharacterHandler(Handler):<br>    def __init__(self, next):<br>        Handler.__init__(self, next)<br>        <br>    def handle(self, c):<br>        if c.isalpha():<br>            print("Character has been handled")<br>        self.doNext(c)        <br><br>class DigitHandler(Handler):<br>    def __init__(self, next):<br>        Handler.__init__(self, next)<br>        <br>    def handle(self, c):<br>        if c.isdigit():<br>            print("Digit has been handled")<br>        self.doNext(c)        <br><br>handler = SymbolHandler(CharacterHandler(DigitHandler(None)))<br>handler.handle('A')<br>handler.handle('1')</code></pre>
      <br>
       在組織物件之間的職責時，通常是從細粒度至粗粒度的方式來組織，從特殊到抽象化，就像程式中將數字視為字
元的特殊化，字元又為符號的特殊化。 <br>
      <br>
      Chain of Responsibility的 UML 結構圖如下所示： <br>
      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/ChainOfResponsibility-1.jpg" /></div></div><br>
      <br>
      <br>
      從物件執行請求的時間來看，其運作是很簡單的職責傳遞而已，如下：<br>
      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/ChainOfResponsibility-2.jpg" /></div></div><br>
      <br>
在更一般的情況下，可以將請求包裝為一個物件，並提供getType()之間的方法，以讓
Chain of Responsibility中的物件進行比對，例如： <br>
      <ul>
        <li>Request.java</li>
      </ul>
      <pre class="prettyprint"><code>abstract class Request{ <br>　　private String type; <br><br>    Request(String type) { this.type=type; }<br>    String getType() { return type; }<br><br>    abstract void execute();<br>} <br><br>abstract class Handler {<br>    protected Handler next;<br>    Handler(Handler next) {<br>        this.next = next;<br>    }    <br>    void doNext(Request request) {<br>        if(next != null) {<br>           next.handle(request);<br>        }<br>    }<br>    abstract void handle(Request request);<br>}<br><br>class ConcreteHandler extends Handler {<br>    ConcreteHandler(Handler next) {<br>        super(next);<br>    }<br>    void handle(Request request) {<br>        if(request.getType().equals("concrete")) {<br>            request.execute();<br>        }<br>        else {<br>            doNext(request);<br>        }<br>    }<br>}<br></code></pre>
      <br>
      在Gof的書中所舉的例子為輔助說明系統，在一個介面中希望使用者一定可以得到相關的說明主題，如果子元件有說明的話，就顯示
相關說明，否則的話就轉發給
包括它的容器元件或父元件，以保證使用者的輔助說明請求一定可以得到回應。<br>
      <br><br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'G-QVQQYFSC8J', 'auto');
  ga('send', 'pageview');

</script>
</div>
