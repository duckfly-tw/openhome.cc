<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/DesignPattern/'https://openhome.cc/zh-tw/pattern/behavioral/iterator/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="在設計程式的過程中，經常有的需求之一，就是希望逐一取得某物件內部的所有資料（或物件），像是取得ArrayList中所有
的資料，或取得HashSet中所有的資料。
      
例如，您也許會希...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="Iterator 模式">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/DesignPattern/IteratorPattern.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="在設計程式的過程中，經常有的需求之一，就是希望逐一取得某物件內部的所有資料（或物件），像是取得ArrayList中所有
的資料，或取得HashSet中所有的資料。
      
例如，您也許會希...">


    <title>Iterator 模式</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="IteratorPattern.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="https://openhome.cc/Gossip/DesignPattern/index.html">回設計模式</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>Iterator 模式</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
            
      在設計程式的過程中，經常有的需求之一，就是希望逐一取得某物件內部的所有資料（或物件），像是取得ArrayList中所有
的資料，或取得HashSet中所有的資料。<br>
      <br>
例如，您也許會希望設計一個foreach方法，可以將丟給它的物件中的資料逐一取得並顯示在主控台中：<br>
      
      <div style="margin-left: 40px;"><span style="font-weight: bold;">List&lt;String&gt; list = new
ArrayList&lt;String&gt;();</span><br>
      <span style="font-weight: bold;">...</span><br>
      <span style="font-weight: bold;">foreach(list);</span><br>
      <br>
      <span style="font-weight: bold;">Set&lt;String&gt; set = new
HashSet&lt;String&gt;();</span><br>
      <span style="font-weight: bold;">....</span><br>
      foreach(set);<br>
      </div>
      <br>
      因為List是有序結構並有索引特性，而Set則為無序不重複的特性，兩者所提供的公開存取方法也不相同，如
何將foreach方法設計的通用是個問題。<br>
      <br>
無
論是List或Set，都有個iterator()方法可以傳回一個Iterator物件，這個物件會收集List或Set物件內部資料，並有
hasNext()、next()方法可以使用，而實際上，這個方法是繼承自Collection介面（List與Set的父介面），您可以這麼設計
foreach方法：<br>
      
      <div style="margin-left: 40px;"><span style="font-weight: bold;">public static void
foreach(Collection&lt;String&gt; collection) {</span><br>
      <span style="font-weight: bold;">&nbsp; &nbsp; Iterator&lt;String&gt;
iterator = collection.iterator();</span><br>
      <span style="font-weight: bold;">&nbsp; &nbsp; while(iterator.hasNext()) {</span><br>
      <span style="font-weight: bold;">&nbsp; &nbsp; &nbsp; &nbsp;
System.out.println(iterator.next());</span><br>
      <span style="font-weight: bold;">&nbsp; &nbsp; }</span><br>
      <span style="font-weight: bold;">}</span><br>
      </div>
      <br>
現在，無論是List或Set，無論真正的實作是ArrayList、LinkedList、HashSet...，都可以使用這個foreach方法來
顯示內部所收集的物件。<br>
      <br>
這
是Iterator模式的實現，不同的物件內部在組織資料方式並不相同（陣列？鏈結？雜湊？），所提供的公開存取介面也不一樣，為了有一致的方式來逐一取
得物件內部的資料，您可以讓一個Iterator於物件內部進行收集，之後傳回Iterator物件，透過該Iterator來逐一取得物件內部資料。<br>
      <br>
以Java
的Collection API設計來說，在JDK
1.4時，iterator()方法是定義在Collection介面上，每個Collection的實現類別，都會有iterator()方法，在
JDK5之後，則將iterator()方法定義在Iterable介面上，而Collection介面則繼承了Iterable介面：<br>
      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/Iterator-1.jpg" /></div></div><br>
      <br>
由於物件在實作內部資料的組織時方式不盡相同，因此也只有物件本身才知道如何收集內部資料，因此Iterator的實作，通常會是物件的內部類別，外界無
需關心，只要知道如何操作Iterator即可。<br>
      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/Iterator-2.jpg" /></div></div><br>
      <br>
      由於Iterable介面在JDK5後引進，使得只要是實作Iterable介面的物件，皆可搭配
foreach語法來使用。例如：
      <pre class="prettyprint"><code>import java.util.Iterator;<br><br>class IterableString implements Iterable&lt;Character&gt; {<br>    private String original;<br><br>    public IterableString(String original) {<br>        this.original = original;<br>    }<br><br>    public Iterator&lt;Character&gt; iterator() {<br>        return new InnerIterator();<br>    }<br>	<br>    private class InnerIterator implements Iterator&lt;Character&gt; {<br>        private int index;<br>        public boolean hasNext() {<br>            return index &lt; original.length();<br>        }<br><br>        public Character next() {<br>            Character c = original.charAt(index);<br>            index++;<br>            return c;<br>        }<br><br>        public void remove() {}<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        foreach(new IterableString("Justin"));<br>    }<br>    public static void foreach(Iterable&lt;Character&gt; iterable) {<br>        Iterator&lt;Character&gt; iterator = iterable.iterator();<br>        while(iterator.hasNext()) {<br>            System.out.println(iterator.next());<br>        }      <br>    }<br>}</code></pre>
      <br>
      以上其實只是為了示範才又寫了一次foreach方法的實現，事實上，JDK5之後引入了foreach語法的支援，您可以直
接這麼撰寫：<br>
      
      <div style="margin-left: 40px;"><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">for(Character
c : new IterableString("Justin")) {</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;
System.out.println(c);</span><br>
      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">}</span><br>
      </div>
      <br>
      Python
在Iterator模式的實現方式，若要結合語法特性，則可透過類別上__iter__與__next__方法的定義。Python的foreach語法
會利用類別上的__iter__方法取得Iterator物件，而後利用所取得的Iterator物件之__next__方法來逐一取得資料，例如：<br>
      
      <pre class="prettyprint"><code>class NumberGenerator:<br>    class Iterator:<br>        def __init__(self, length):<br>            self.length = length<br>            self.number = -1<br>        def __next__(self):<br>            self.number = self.number + 1<br>            if self.number == self.length:<br>                raise StopIteration<br>            return self.number<br>    <br>    def __init__(self, length):<br>        self.length = length<br><br>    def __iter__(self):<br>        return NumberGenerator.Iterator(self.length)<br><br>for n in NumberGenerator(10):<br>    print(n)</code></pre>
      <br>
      <br><br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'G-QVQQYFSC8J', 'auto');
  ga('send', 'pageview');

</script>
</div>
