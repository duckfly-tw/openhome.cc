<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/DesignPattern/'https://openhome.cc/zh-tw/pattern/behavioral/observer/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="您打算開發一個多人連線程式，其中每個連線後的客戶端，都會建立一個Client物件封裝客戶端的相關資訊，並且加入一個
ClientQueue中集中管理。
      
假設現在程式中其它部份，可能...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="Observer 模式">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/DesignPattern/ObserverPattern.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="您打算開發一個多人連線程式，其中每個連線後的客戶端，都會建立一個Client物件封裝客戶端的相關資訊，並且加入一個
ClientQueue中集中管理。
      
假設現在程式中其它部份，可能...">


    <title>Observer 模式</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="ObserverPattern.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="https://openhome.cc/Gossip/DesignPattern/index.html">回設計模式</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>Observer 模式</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
            
      您打算開發一個多人連線程式，其中每個連線後的客戶端，都會建立一個Client物件封裝客戶端的相關資訊，並且加入一個
ClientQueue中集中管理。<br>
      <br>
假設現在程式中其它部份，可能對ClientQueue中Client的加入或移除有興趣，並且希望Client加入或移除時都可以收到通知，以便作一些
處理，那麼您可以作類似以下的設計：<br>
      
      <pre class="prettyprint"><code>import java.util.*;<br><br>class Client {<br>    private String ip;<br>    private String name;<br>    // ... 其它資料...<br>    public Client(String ip, String name) {<br>        this.ip = ip;<br>        this.name = name;<br>    }<br>    void setIp(String ip) { this.ip = ip; }<br>    void setName(String name) { this.name = name; }<br>    String getIp() { return ip; }<br>    String getName() { return name; }<br>    // ... 其它方法...<br>}<br><br>class ClientEvent {<br>    final String ip;<br>    final String name;<br>    ClientEvent(Client client) {<br>        this.ip = client.getIp();<br>        this.name = client.getName();<br>    }<br>}<br><br>interface ClientListener {<br>    void clientAdded(ClientEvent event);<br>    void clientRemoved(ClientEvent event);<br>}<br><br>class ClientQueue {<br>    private List&lt;Client&gt; clients = new LinkedList&lt;Client&gt;();<br>    private List&lt;ClientListener&gt; listeners = new LinkedList&lt;ClientListener&gt;();<br>            <br><span style="font-weight: bold;">    void addClientListener(ClientListener listener) {</span><br><span style="font-weight: bold;">        listeners.add(listener);</span><br><span style="font-weight: bold;">    }</span><br><span style="font-weight: bold;">    void removeClientListener(ClientListener listener) {</span><br><span style="font-weight: bold;">        listeners.remove(listener);</span><br><span style="font-weight: bold;">    }</span><br>    <br><span style="font-weight: bold;">    void notifyAdded(Client client) {</span><br><span style="font-weight: bold;">        ClientEvent event = new ClientEvent(client);</span><br><span style="font-weight: bold;">        for(ClientListener listener : listeners) {</span><br><span style="font-weight: bold;">            listener.clientAdded(event);</span><br><span style="font-weight: bold;">        }</span><br><span style="font-weight: bold;">    }</span><br><span style="font-weight: bold;">    void notifyRemoved(Client client) {</span><br><span style="font-weight: bold;">        ClientEvent event = new ClientEvent(client);</span><br><span style="font-weight: bold;">        for(ClientListener listener : listeners) {</span><br><span style="font-weight: bold;">            listener.clientRemoved(event);</span><br><span style="font-weight: bold;">        }</span><br><span style="font-weight: bold;">    }</span><br>    <br>    void add(Client client) {<br>        clients.add(client);<br><span style="font-weight: bold;">        notifyAdded(client);</span><br>    }<br>    void remove(Client client) {<br>        clients.remove(client);<br><span style="font-weight: bold;">        notifyRemoved(client);</span><br>    }<br>    <br>    // 還有一些客戶管理佇列的其它職責....<br>}</code></pre>
      <br>
對ClientQueue
中Client物件加入、移除有興趣的，可以實作ClientListener介面，並且向ClientQueue註冊，也就是使用
ClientQueue的addClientListener()來加入至ClientQueue之中（或使用removeClientListener
()移除），每當有Client加入或移除時，會呼叫notifyAdded()或notifyRemoved()方法，方法中會以迴圈方式逐一取出當初
訂閱ClientQueue的物件，並呼叫對應的clientAdded()或clientRemoved()方法。<br>
      <br>
一個使用的例子如下所示：<br>
      
      <pre class="prettyprint"><code>class ClientLogger implements ClientListener {<br>    public void clientAdded(ClientEvent event) {<br>        System.out.println(event.ip + " added...");<br>    }<br>    public void clientRemoved(ClientEvent event) {<br>        System.out.println(event.ip + " removed...");<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        ClientQueue queue = new ClientQueue();<br>        queue.addClientListener(new ClientLogger());<br>        Client c1 = new Client("127.0.0.1", "caterpillar");<br>        Client c2 = new Client("192.168.0.2", "justin");<br>        queue.add(c1);<br>        queue.add(c2);<br>        queue.remove(c1);<br>        queue.remove(c2);<br>    }<br>}</code></pre>
      <br>
      這是Observer模式的實現，在Observer模式中的主角為主題（subject）與觀察者（observer），主
題可被多個觀
察者訂閱，當主題的狀態發生變化時，它必須通知（notify）所有訂閱它的觀察者，觀察者檢視主題的狀態變化，並作出對應的動作。 <br>
      <br>
以Python來實現這個範例的話：<br>
      
      <pre class="prettyprint"><code>class Client:<br>    def __init__(self, ip, name):<br>        self.ip = ip<br>        self.name = name<br>        <br>    # ... 其它方法...<br><br>class ClientEvent:<br>    pass<br><br>class ClientQueue:<br>    def __init__(self):<br>        self.clients = []<br>        self.listeners = []<br>            <br>    def addClientListener(self, listener):<br>        self.listeners.append(listener)<br>    <br>    def removeClientListener(self, listener):<br>        self.listeners.remove(listener)<br>   <br>    def notifyAdded(self, client):<br>        event = ClientEvent()<br>        event.ip = client.ip<br>        event.name = client.name<br>        for listener in self.listeners:<br>            listener.clientAdded(event)<br>    <br>    def notifyRemoved(self, client):<br>        event = ClientEvent()<br>        event.ip = client.ip<br>        event.name = client.name<br>        for listener in self.listeners:<br>            listener.clientRemoved(event)<br>          <br>    def add(self, client):<br>        self.clients.append(client)<br>        self.notifyAdded(client)<br>    <br>    def remove(self, client):<br>        self.clients.remove(client)<br>        self.notifyRemoved(client)    <br>        <br>    # 還有一些客戶管理佇列的其它職責....<br><br>class ClientLogger:<br>    def clientAdded(self, event):<br>        print(event.ip + " added...")<br>        <br>    def clientRemoved(self, event):<br>        print(event.ip + " removed...")<br>    <br>queue = ClientQueue()<br>queue.addClientListener(ClientLogger())<br>c1 = Client("127.0.0.1", "caterpillar")<br>c2 = Client("192.168.0.2", "justin")<br>queue.add(c1)<br>queue.add(c2)<br>queue.remove(c1)<br>queue.remove(c2)</code></pre>
       <br>
以更一般的方式來表示Observer模式：<br>
      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/Observer-1.jpg" /></div></div><br>
      <br>
Subject類中有一個notify()方法，通常是在Subject的狀態發生改變時呼叫它，notify()中會呼叫
Observer的update()方法，通常會先取得Subject的新狀態，然後更新Observer的顯示或行為，這個過程我們可以透過順序圖來表
達： <br>
      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/Observer-2.jpg" /></div></div><br>
      <br>
在Java中支援觀察者模式，要成為觀察者的類必須實作Observer介面，這個介面中定義了一個update()方法，這個方法會被主題物件在通知狀
態變化時呼叫，您必須在這個方法中實作您所想要的對應行為。主題物件會是Observable的子類，在這邊注意兩個重要的方法：setChanged
()與notifyObserver()。setChanged()是用來設定主題物件的狀態已經被改變，而notifyObserver()方法會通知
所要訂閱主題物件的觀察者，呼叫其
update()方法。<br>
      <br>
      <br><br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'G-QVQQYFSC8J', 'auto');
  ga('send', 'pageview');

</script>
</div>
