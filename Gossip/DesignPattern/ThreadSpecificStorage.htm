<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/DesignPattern/'https://openhome.cc/zh-tw/pattern/thread/thread-specific-storage/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="無論如何，要編寫一個多執行緒安全（thread-safe）的程式總是困難的，為了使用的共用資源，您必須小心
的對共用資源進行同步，同步帶來一定的效
能延遲，而另一方面，在處理同步的時候，又要注意物...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="Thread-Specific Storage 模式">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/DesignPattern/ThreadSpecificStorage.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="無論如何，要編寫一個多執行緒安全（thread-safe）的程式總是困難的，為了使用的共用資源，您必須小心
的對共用資源進行同步，同步帶來一定的效
能延遲，而另一方面，在處理同步的時候，又要注意物...">


    <title>Thread-Specific Storage 模式</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="ThreadSpecificStorage.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="https://openhome.cc/Gossip/DesignPattern/index.html">回設計模式</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>Thread-Specific Storage 模式</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
            
      無論如何，要編寫一個多執行緒安全（thread-safe）的程式總是困難的，為了使用的共用資源，您必須小心
的對共用資源進行同步，同步帶來一定的效
能延遲，而另一方面，在處理同步的時候，又要注意物件的鎖定與釋放，避免產生死結，種種因素都使得編寫多執行緒程式變得困難。<br>
      <br>
Thread-Specific
Storage模式嘗試從另一個角度來解釋多執行緒共用資源的問題，其思考點很簡單，即然共用資源這麼困難，那麼就乾脆不要共用，何不為每個執行緒創造一
個資源的複本，將每一個執行緒存取資料的行為加以隔離，其實現的方法，就是給予每一個執行緒一個特定空間來保管該執行緒所獨享的資源，也因此而稱之為
Thread- Specific Storage模式。<br>
      <br>
在Java中可以使用java.lang.ThreadLocal來實現這個模式，這個類別是從1.2之後開始提供，不過先來看看，如何自行實
現一個簡單的ThreadLocal類別： <br>
      <ul>
        <li> ThreadLocal.java </li>
      </ul>
      <pre class="prettyprint"><code>import java.util.*;<br><br>public class ThreadLocal {<br>    private Map storage = Collections.synchronizedMap(new HashMap());<br><br>    public Object get() {<br>        Thread current = Thread.currentThread();<br>        Object o = storage.get(current);<br><br>        if(o == null &amp;&amp; !storage.containsKey(current)) {<br>            o = initialValue();<br>            storage.put(current, o);<br>        }<br><br>        return o;<br>    }<br><br>    public void set(Object o) {<br>        storage.put(Thread.currentThread(), o);<br>    }<br><br>    public Object initialValue() {<br>        return null;<br>    }<br>} <br></code></pre>
      <br>
      可以看到程式中使用執行緒本身作為key值，並將所獲得的資源放在Map物件中，如果第一次使用get()，也配置一個空間給
執行緒，而
initialValue()可以用來設定什麼樣的初值要先儲存在這個空間中，在這邊先簡單的設定為null。<br>
      <br>
現在假設有一個原先在單執行緒環境下的資源Some，現在考慮要該其在多執行緒環境下使用，若不想考慮複雜的執行緒共用互斥問題，此時可以使用
ThreadLocal類別來使用Some，例如： <br>
      <ul>
        <li> Resource.java </li>
      </ul>
      <pre class="prettyprint"><code>public class Resource {<br>    private static final ThreadLocal threadLocal = new ThreadLocal();<br><br>    public static Some getResource() {<br>        Some resource = (SomeResource) threadLocal.get();<br><br>        if(resource == null) {<br>            resource = new Some();<br>            threadLocal.set(resource);<br>        }<br><br>        return resource;<br>    }<br>} <br></code></pre>
      <br>
      上面所實作的ThreadLocal類別只是一個簡單的示範，您可以使用java.lang.ThreadLocal來實
現Thread- Specific
Storage模式，以獲得更好的效能，在這邊簡單的示範一個Log程式，它可以記錄每個執行緒的活動，所使用的是
java.util.logging中的類別：<br>
      <ul>
        <li> SimpleThreadLogger.java </li>
      </ul>
      <pre class="prettyprint"><code>import java.io.*;<br>import java.util.logging.*;                            <br> <br>public class SimpleThreadLogger {<br>    private static final ThreadLocal threadLocal = new ThreadLocal();<br><br>    public static void log(String msg) {<br>        getThreadLogger().log(Level.INFO, msg);<br>    }<br><br>    private static Logger getThreadLogger() {<br>        Logger logger = (Logger) threadLocal.get();<br><br>        if(logger == null) {<br>            try {<br>                logger = Logger.getLogger(Thread.currentThread().getName());<br>                // Logger 預設是在主控台輸出<br>                // 我們加入一個檔案輸出的Handler<br>                // 它會輸出XML的記錄文件<br>                logger.addHandler(<br>                    new FileHandler(<br>                           Thread.currentThread().getName() <br>                           + ".log"));<br>            }<br>            catch(IOException e) {}<br><br>            threadLocal.set(logger);<br>        }<br><br>        return logger;<br>    }<br>} <br></code></pre>
      <br>
可以使用下面這個程式來測試：<br>
      <ul>
        <li> LoggerTest.java </li>
      </ul>
      <pre class="prettyprint"><code>public class LoggerTest {<br>    public static void main(String[] args) {<br>        new Test("thread1").start();<br>        new Test("thread2").start();<br>        new Test("thread3").start();<br>    }<br>}<br><br>class Test extends Thread {<br>    public Test(String name) {<br>        super(name);<br>    }<br><br>    public void run() {<br>        for(int i = 0; i &lt; 10; i++) {<br>            SimpleThreadLogger.log(getName() + ": message " + i);<br>            try {<br>                Thread.sleep(1000);<br>            }<br>            catch(Exception e) {<br>                SimpleThreadLogger.log(e.toString());<br>            }<br>        }<br>    }<br>} <br></code></pre>
      <br>
      執行LoggerTest可以在主控台上看到輸出，並可以在同一目錄下找到三個log檔，分別記錄了三個執行緒的活動，透過
ThreadLocal，不用撰寫複雜的執行緒共用互斥邏輯。<br>
      <br>
Thread-Specific
Storage模式的意義之一，就是「有時不共用是好的」，如果共用會產生危險，那就不要共用，當然，這種方式所犧牲掉的就是空間，您必須為每一個執行
緒保留它們獨立的空間，這是一種以空間換取時間與安全性的方法。<br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'G-QVQQYFSC8J', 'auto');
  ga('send', 'pageview');

</script>
</div>
