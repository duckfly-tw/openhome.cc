<!doctype html><html lang="zh-tw">
<head><meta http-equiv="refresh" content="0; URL=https://openhome.cc/Gossip/DesignPattern/'https://openhome.cc/zh-tw/pattern/behavioral/visitor/'">
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="您的系統中有客戶、會員與VIP，假設經過設計考量，確定以下的設計是必要的：
      
      class Customer {    void doCustomer() {        ...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="Visitor 模式">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/DesignPattern/VisitorPattern.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="您的系統中有客戶、會員與VIP，假設經過設計考量，確定以下的設計是必要的：
      
      class Customer {    void doCustomer() {        ...">


    <title>Visitor 模式</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="VisitorPattern.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="https://openhome.cc/Gossip/DesignPattern/index.html">回設計模式</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>Visitor 模式</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
            
      您的系統中有客戶、會員與VIP，假設經過設計考量，確定以下的設計是必要的：<br>
      
      <pre class="prettyprint"><code>class Customer {<br>    void doCustomer() {<br>        System.out.println("客戶服務");<br>    }<br>    void pay() {<br>        System.out.println("結帳");<br>    }<br>}<br><br>class Member extends Customer {<br>    void doMember() {<br>        System.out.println("會員服務");<br>    }<br>}<br>    <br>class VIP extends Customer {<br>    void doVIP() {<br>        System.out.println("VIP 服務");<br>    }<br>}</code></pre>
      <br>
您要設計一個結帳功能，針對客戶所使用的服務計算客戶要付的費用，計算的演算大部份是針對Customer來進行操作，但其中幾個步驟，不免要針對特定客
戶類型來設計，例如：<br>
      
      <pre class="prettyprint"><code>class Service {<br>    void doService(Customer customer) {<br>        customer.doCustomer();<br>        if(customer instanceof Member) {<br>            ((Member) customer).doMember();<br>        }<br>        if(customer instanceof VIP) {<br>            ((VIP) customer).doVIP();<br>        }<br>        customer.pay();<br>    }<br>}</code></pre>
      <br>
使用instanceof來判斷物件類型，一般是不被鼓勵的，如果您的客戶類型繁多，這樣的結構化設計會逐漸加深程式碼的繁複。一般多希望利用多型操作來
解決問題，不要針對特定類型來進行設計。<br>
      <br>
如果經過仔細的考量設計，必須針對特定類型來進行操作確實是不可避免的，那麼您可以換個方式，例如：<br>
      
      <pre class="prettyprint"><code><span style="font-weight: bold;">interface Visitable {</span><br><span style="font-weight: bold;">    void accept(Visitor visitor);</span><br><span style="font-weight: bold;">}</span><br><br><span style="font-weight: bold;">interface Visitor {</span><br><span style="font-weight: bold;">    void visit(Member member);</span><br><span style="font-weight: bold;">    void visit(VIP vip);</span><br><span style="font-weight: bold;">}</span><br><br>class Customer <span style="font-weight: bold;">implements Visitable</span> {<br>    void doCustomer() {<br>        System.out.println("客戶服務");<br>    }<br>    void pay() {<br>        System.out.println("結帳");<br>    }<br><span style="font-weight: bold;">    public void accept(Visitor visitor) {</span><br><span style="font-weight: bold;">        // nothing to do</span><br><span style="font-weight: bold;">    }    </span><br>}<br><br>class Member extends Customer {<br>    void doMember() {<br>        System.out.println("會員服務");<br>    }<br><span style="font-weight: bold;">    @Override</span><br><span style="font-weight: bold;">    public void accept(Visitor visitor) {</span><br><span style="font-weight: bold;">        visitor.visit(this); // 看似多型，其實是 overload</span><br><span style="font-weight: bold;">    }  </span>  <br>}<br>    <br>class VIP extends Customer {<br>    void doVIP() {<br>        System.out.println("VIP 服務");<br>    }<br><span style="font-weight: bold;">    @Override</span><br><span style="font-weight: bold;">    public void accept(Visitor visitor) {</span><br><span style="font-weight: bold;">        visitor.visit(this); </span><span style="font-weight: bold;">// 看似多型，其實是 overload</span><span style="font-weight: bold;"><br>&nbsp;   }   </span> <br>}<br><br><span style="font-weight: bold;">class VisitorImpl implements Visitor {</span><br><span style="font-weight: bold;">    public void visit(Member member) {</span><br><span style="font-weight: bold;">        member.doMember();</span><br><span style="font-weight: bold;">    }</span><br><span style="font-weight: bold;">    public void visit(VIP vip) {</span><br><span style="font-weight: bold;">        vip.doVIP();</span><br><span style="font-weight: bold;">    }</span><br><span style="font-weight: bold;">}<br><br></span>class Service {<br>    private Visitor visitor = new VisitorImpl();<br>    void doService(Customer customer) {<br>        customer.doCustomer();<br><span style="font-weight: bold;">        ((Visitable) customer).accept(visitor);</span><br>        customer.pay();<br>    }<br>}<br><br>public class Main {<br>    public static void main(String[] args) {<br>        Service service = new Service();<br>        service.doService(new Member());<br>    }<br>}<span style="font-weight: bold;"></span></code></pre>
      <br>
doService()方法接受的是Customer型態，原先為了針對特別型態作特定操作，不得已使用instanceof作判斷，而上面這個設計，則
是<span style="font-weight: bold;">由Visitor登門入戶，使用物件中的this參考名稱之型態資訊，由物件自行
選擇要呼叫的overload方法。</span><br>
      <br>
      <span style="font-weight: bold;">這是Visitor模式的一個實現，Visitor模式的目的，是將與操作被物件的</span>結構相關<span style="font-weight: bold;">的演算分離出來，可以各自針對結構進行個別處理，不同的Visitor可作為不同演算的名稱空間。</span><br>
      <br>
      靜態語言可以使用overload來實現Visitor模式，overload是編譯時期就決定要呼叫哪個方法，對於不支援overload的語言，或者是
動態語言，則可以在Visitor的方法名稱上作個區別（只是少了單一方法名稱呼叫的方便，其實若您將overload的型態資訊也看成是方法名稱的一部
份，也就是方法簽署，道理就相同了）。例如，以下是Python的實現方式：<br>
      
      <pre class="prettyprint"><code>class Customer:<br>    def doCustomer(self):<br>        print("客戶服務")<br>    <br>    def pay(self):<br>        print("結帳")<br>    <br>    def accept(self, visitor): pass<br><br>class Member(Customer):<br>    def doMember(self):<br>        print("會員服務")<br>    <br>    def accept(self, visitor):<br>        visitor.visitMember(self)<br>    <br>class VIP(Customer):<br>    def doVIP(self):<br>        print("VIP 服務")<br>        <br>    def accept(self, visitor):<br>        visitor.visitVIP(self)<br><br>class VisitorImpl:<br>    def visitMember(self, member):<br>        member.doMember();<br>    <br>    def visitVIP(self, vip):<br>        vip.doVIP()<br>    <br>class Service:<br>    def __init__(self):<br>        self.visitor = VisitorImpl()<br>    <br>    def doService(self, customer):<br>        customer.doCustomer()<br>        customer.accept(self.visitor)<br>        customer.pay()<br><br>service = Service()<br>service.doService(VIP())</code></pre>
      <br>
Visitor模式的 UML 結構類圖如下：<br>
      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/Visitor-1.jpg" /></div></div>
	  
	  <p>好的！看到這邊，我可以告訴你，以上使用 Visitor 模式的方式是個不好的例子，大部份談 Visitor 模式的文件或書籍，可能都是類似這種舉例方式，有些文件或書籍甚至會跟你說，Visitor 模式是個反模式，因為基本上，以上的需求都可以用子型態多型來解決，Visitor 模式本身不是個反模式，以上使用 Visitor 模式的方式才是反模式。</p>
	  
	  <p>Visitor 模式裡頭一定要有個 Visitor 嗎？不要被 UML 結構類圖誤導了，要不要有 Visitor 是看你的需求！另一方面，Visitor 模式的本質上，就是 overload 的應用，其真正應用的之一，是在實現 pattern matching 之類的場合，而談到 pattern matching，若要真正認識，建議要瞭解函數式典範，有興趣可以參考〈<a href="../CodeData/JavaLambdaTutorial/index.html">Java Lambda Tutorial</a>〉中〈Java 開發者的函數式程式設計〉的文件。</p>
	  
	  <p>其中在〈<a href="../CodeData/JavaLambdaTutorial/ListPatterns.html">List 處理模式</a>〉的部份，可以使用 Java 17 實現 pattern matching，範例程式碼可以參考〈<a href="https://gist.github.com/JustinSDK/e00ab58c900b0110bd5a3619b098fece">代數資料型態：Java 17</a>〉，如果沒有 Java 17 呢？就用 Visitor 模式實現，例如〈<a href="https://gist.github.com/JustinSDK/54a75e17ab16bf00b0836d452df7c167">代數資料型態：Visitor 實現</a>〉，你會說又不寫函數式，其實 pattern matching 的本質，是讓你能根據「資料載體（data carrier）」的結構，彈性地增加必要的函數。</p>
	  
	  <p>Visitor 模式會被誤解就是因為大家都搞了個 Visitor，不過，Java 日後在 pattern matching 的特性都完備之後，Visitor 模式的應用場合就會更少了。</p>
	  
	  <div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'G-QVQQYFSC8J', 'auto');
  ga('send', 'pageview');

</script>
</div>
