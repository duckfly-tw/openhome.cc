<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>






  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">






  
  
  
  
  
  
  <title>HashSet</title>
</head>


<body>






<h3><a href="../index.html">From
Gossip@Openhome</a></h3>






<h1><a href="index.html">Java Gossip: HashSet</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>HashSet實作Set介面，Set介面繼承Collection介面，Set容器中的物件都是唯一的，<span style="font-weight: bold;">加入 Set容器中的物件都必須重新定義equals()方法</span>，作為唯一性的識別，Set容器有自己的一套排序規則。<br>

      <br>



HashSet的排序規則是利用Hash Table，所以<span style="font-weight: bold;">加入HashSet容器的物件還必須重新定義hashCode()方法</span>，利用Hash的方式，可以讓您快速的找到容器中的物件，在比較兩個加入Set容器中的物件是否相同時，會先比較hashCode()方法傳回的值是否相同，如果相同，則再使用equals()方法比較，如果兩者都相同，則視為相同的物件。<br>

      <br>



事實上，在撰寫新的類別時，最好總是重新定義equals()與hashCode()方法，以符合Java的設計規範，您可以參考 <a href="../JavaGossip-V1/ObjectClass.htm">Object 類別</a> 中的介紹瞭解如何重新定義equals()與hashCode()。<br>

      <br>



來看一個例子：</small>





      <br>






      
      <ul>

        <li> HashSetDemo.java </li>

      
      </ul>




      
      <pre>package onlyfun.caterpillar;<br> <br>import java.util.*;<br> <br>public class HashSetDemo {<br>    public static void main(String[] args) {<br>        Set&lt;String&gt; set = new HashSet&lt;String&gt;();<br>        <br>        set.add("caterpillar");<br>        set.add("justin");<br>        set.add("momor");<br>        set.add("justin");<br>        <br>        Iterator iterator = set.iterator();<br>        while(iterator.hasNext()) {<br>            System.out.print(iterator.next() + " ");<br>        }<br>        <br>        System.out.println(); <br>    }<br>} <br></pre>



      <span style="font-family: &quot;Courier New&quot;,Courier,monospace;"><br>



      </span>


      <small><span class="postbody">
執行結果：</span></small><br>






      
      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">






  <tbody>






    <tr>






      <td style="background-color: rgb(0, 0, 0);"><small><span style="color: rgb(255, 255, 255);">&nbsp;momor justin caterpillar</span></small><span style="color: rgb(255, 255, 255);"><br>






      </span></td>






    </tr>






  
  
  
  
  
        
        </tbody>
      
      </table>






      <br>

      <small>


如上所示的，即使重覆加入了"justin"字串，HashSet中仍只有一個"justin"字串物件，另一個要注意的是，&#36873;代所有的值時，其順序
與您加入的順序是不一樣的，&#36873;代所有值時的順序是HashSet排序過後的順序。<br>

      <br>



LinkedHashSet是HashSet的子類，它在內部實作使用Hash
Code進行排序，然而允許您在列舉時行為像是LinkedList，簡單的改寫上面的程式即可瞭解：</small>


      <br>



      
      <ul>

        <li>LinkedHashSetDemo.java</li>

      
      </ul>




      
      <pre>package onlyfun.caterpillar;<br> <br>import java.util.*;<br> <br>public class LinkedHashSetDemo {<br>    public static void main(String[] args) {<br>        Set&lt;String&gt; set = new LinkedHashSet&lt;String&gt;();<br>        <br>        set.add("caterpillar");<br>        set.add("justin");<br>        set.add("momor");<br>        set.add("justin");<br>        <br>        Iterator iterator = set.iterator();<br>        while(iterator.hasNext()) {<br>            System.out.print(iterator.next() + " ");<br>        }<br>        <br>        System.out.println();<br>    }<br>}</pre>



      <br>



      <small><span class="postbody">
執行結果：</span></small><br>






      
      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">






  <tbody>






    <tr>






      <td style="background-color: rgb(0, 0, 0);"><small><span style="color: rgb(255, 255, 255);">&nbsp;caterpillar justin momor</span></small><span style="color: rgb(255, 255, 255);"><br>






      </span></td>






    </tr>






  
  
  
  
  
        
        </tbody>
      
      </table>





      <br>

      <small>


可以在執行結果中看到的，&#36873;代時的順序正是您加入值的順序。</small> </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><!-- adsense for content--><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型 160 x 600 廣告 --><ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><br><br><br><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型 160 x 600 廣告 --><ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><br><br><br><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型 160 x 600 廣告 --><ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><br><br><br> <!-- adsense for content end --></td>


    </tr>


  
  </tbody>
</table>


<br>

<br>






<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
</body>
</html>
