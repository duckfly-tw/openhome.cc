<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>






  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">






  
  
  
  
  
  
  <title>ObjectInputStream、ObjectOutputStream</title>
</head>


<body>






<h3><a href="../index.html">From
Gossip@Openhome</a></h3>






<h1><a href="index.html">Java Gossip: ObjectInputStream、ObjectOutputStream</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>在Java這樣支援物件導向的程式中撰寫程式，很多資料都是以物件的方式存在，在程式運行過後，您會希望將這些資料加以儲存，以供下次執行程式時使用，這時您可以使用ObjectInputStream、ObjectOutputStream來進行這項工作。<br>

      <br>



要被儲存的物件必須<span style="font-weight: bold;">實作Serializable介面</span>，說是實作，其實Serializable中並沒有規範任何必須實作的方法，所以這邊所謂實作的意義，其實像是對物件貼上一個標誌，代表該物件是<span style="font-weight: bold;">可以序列化的（Serializable）</span>。<br>

      <br>



一個實作的例子如下所示：</small><br>



      
      <ul>

        <li> Student.java
  </li>

      
      </ul>




      
      <pre>package onlyfun.caterpillar;<br><br>import java.io.*;<br> <br>public class Student implements Serializable {<br>    private static final long serialVersionUID = 1L;<br>    <br>    private String name;<br>    private int score; <br><br>    public Student() { <br>        name = "N/A"; <br>    } <br><br>    public Student(String name, int score) { <br>        this.name = name; <br>        this.score = score; <br>    } <br><br>    public void setName(String name) {<br>        this.name = name;<br>    }<br>    <br>    public void setScore(int score) {<br>        this.score = score;<br>    }<br><br>    public String getName() { <br>        return name; <br>    } <br><br>    public int getScore() { <br>        return score; <br>    } <br><br>    public void showData() { <br>        System.out.println("name: " + name); <br>        System.out.println("score: " + score); <br>    } <br>} </pre>



      <br>

      <small>

您要注意到<span style="font-weight: bold;">serialVersionUID</span>，這代表了<span style="font-weight: bold;">可序列化物件的版本</span>，
如果您沒有提供這個版本訊息，則會自動依類名稱、實現的介面、成員等訊息來產生，如果是自動產生的，則下次您更改了Student類，則自動產生的
serialVersionUID也會跟著變更，當反序列化時兩個serialVersionUID不相同的話，就會丟出
InvalidClassException，如果您想要維持版本訊息的一致，則要顯式宣告serialVersionUID。<br>

      <br>



ObjectInputStream、ObjectOutputStream為InputStream、OutputStream加上了可以讓使用者寫入
物件、讀出物件的功能，在寫入物件時，我們使用writeObject()方法，讀出物件時我們使用readObject()方法，被讀出的物件都是以
Object的型態傳回，您必須將之轉換為物件原來的型態，才能正確的操作被讀回的物件，下面這個程式示範了如何簡單的儲存物件至檔案中，並將之再度讀
回</small>

：<br>



      
      <ul>

        <li> ObjectStreamDemo.java
  </li>

      
      </ul>




      
      <pre>package onlyfun.caterpillar;<br> <br>import java.io.*;<br>import java.util.*;<br> <br>public class ObjectStreamDemo {<br>    public static void writeObjectsToFile(<br>                         Object[] objs, String filename) { <br>        File file = new File(filename);<br> <br>        try { <br>            ObjectOutputStream objOutputStream = <br>                new ObjectOutputStream(<br>                      new FileOutputStream(file)); <br>            for(Object obj : objs) {<br>                objOutputStream.writeObject(obj); <br>            }<br>            objOutputStream.close(); <br>        } <br>        catch(IOException e) { <br>            e.printStackTrace(); <br>        }<br>    }<br>    <br>    public static Object[] readObjectsFromFile(<br>                             String filename) <br>                               throws FileNotFoundException {<br>        File file = new File(filename); <br> <br>        if(!file.exists()) <br>            throw new FileNotFoundException(); <br> <br>        List list = new ArrayList();<br>        <br>        try {<br>            FileInputStream fileInputStream = <br>                new FileInputStream(file);<br>            ObjectInputStream objInputStream = <br>                new ObjectInputStream(fileInputStream); <br>             <br>            while(fileInputStream.available() &gt; 0) {<br>                list.add(objInputStream.readObject());<br>            }<br>            objInputStream.close(); <br>        } <br>        catch(ClassNotFoundException e) { <br>            e.printStackTrace(); <br>        } <br>        catch(IOException e) { <br>            e.printStackTrace(); <br>        }<br> <br>        return list.toArray();<br>    }<br> <br>    public static void appendObjectsToFile(<br>                           Object[] objs, String filename) <br>                               throws FileNotFoundException {<br>  <br>        File file = new File(filename); <br>        <br>        if(!file.exists()) <br>             throw new FileNotFoundException(); <br><br>        try { <br>            ObjectOutputStream objOutputStream = <br>               new ObjectOutputStream(<br>                  new FileOutputStream(file, true)) { <br>                    protected void writeStreamHeader() <br>                                     throws IOException {} <br>               };  <br> <br>            for(Object obj : objs) {<br>                objOutputStream.writeObject(obj); <br>            }<br>            objOutputStream.close(); <br>        } <br>        catch(IOException e) { <br>            e.printStackTrace(); <br>        } <br>    }<br>    <br>    public static void main(String[] args) {<br>        Student[] students = {new Student("caterpillar", 90),<br>                              new Student("justin", 85)}; <br>        // 寫入新檔<br>        writeObjectsToFile(students, "data.dat");<br>        try {<br>            // 讀取檔案資料<br>            Object[] objs = readObjectsFromFile("data.dat");<br>            for(Object obj : objs) {<br>                ((Student) obj).showData();<br>            }<br>            System.out.println();<br>            <br>            students = new Student[2];<br>            students[0] = new Student("momor", 100);<br>            students[1] = new Student("becky", 100);<br>            <br>            // 附加至檔案<br>            appendObjectsToFile(students, "data.dat");<br>            <br>            // 讀取檔案資料<br>            objs = readObjectsFromFile("data.dat");<br>            for(Object obj : objs) {<br>                ((Student) obj).showData();<br>            }<br>        }<br>        catch(FileNotFoundException e) {<br>            e.printStackTrace();<br>        }<br>    }<br>} <br></pre>




      <br>

      <small>

物件被寫出時，會寫入物件的類別型態、類別署名（Class signature），static與被標誌為transient的成員則不會被寫入。<br>

      <br>



在這邊注意到以附加的形式寫入資料至檔案時，在試圖將物件附加至一個先前已寫入物件的檔案時，由於ObjectOutputStream在
寫入資料時，還會加上一個特別的標示頭，而讀取檔案時會檢查這個標示頭，如果一個檔案中被多次附加物件，那麼該檔案中會有多個標示頭，如此讀取檢查時就會
發現不一致，這會丟出<span style="font-weight: bold;">StreamCorrupedException</span>，為此，您<span style="font-weight: bold;">重新定義ObjectOutputStream的writeStreamHeader()方法</span>，如果是以附加的方式來寫入物件，就不寫入標示頭：<br>

      </small>




      
      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">ObjectOutputStream objOutputStream = </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; new ObjectOutputStream(</span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new FileOutputStream(file, true)) { </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected void writeStreamHeader() </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
throws IOException {} </span><br style="font-weight: bold; font-family: Courier New,Courier,monospace;">



      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };&nbsp; </span><br>



      </small></div>

      <small>

&nbsp;<br>



將物件寫出或讀入並不僅限於檔案存取，您也可以用於網路的資料傳送，例如傳送整個物件資料或是影像檔案。</small><br>


 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><!-- adsense for content--><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型 160 x 600 廣告 --><ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><br><br><br><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型 160 x 600 廣告 --><ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><br><br><br><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型 160 x 600 廣告 --><ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><br><br><br> <!-- adsense for content end --></td>


    </tr>


  
  </tbody>
</table>


<br>

<br>



<br>






<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
</body>
</html>
