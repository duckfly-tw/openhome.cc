<!doctype html><html lang="zh-tw">
<head>
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="粒子系統的基本概念很簡單，只要使用類別或結構來包裝粒子的動作操作與狀態即可，然而其困難處在於，如何擬真的模擬出粒子的動作，這就與物理、化學有所關聯了...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="煙火">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/ComputerGraphics/Firework.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="粒子系統的基本概念很簡單，只要使用類別或結構來包裝粒子的動作操作與狀態即可，然而其困難處在於，如何擬真的模擬出粒子的動作，這就與物理、化學有所關聯了...">


    <title>煙火</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="FireWork.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回電腦圖學</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>煙火</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
            







粒子系統的基本概念很簡單，只要使用類別或結構來包裝粒子的動作操作與狀態即可，然而其困難處在於，如何擬真的模擬出粒子的動作，這就與物理、化學有所關聯了，然而有時候是可以用一些小技倆來簡化真實世界中的粒子動作，而在螢幕上又有相當的效果。<br>

      &nbsp;<br>









Java物件導向的特性特別適合用來包裝粒子系統，將所有與粒子有關的操作也一併包裝進去；如果是VB或C，就使用結構來包裝粒子的屬性。<br>

      <br>


在模擬的部份，首先是爆炸的時候，粒子所得到的水平與垂直速度，可以遵守動量守恒來計算出每一個粒子所獲得的速度，但這邊實際上並沒有這麼作，簡單的使用
亂數來模擬也可以達到不錯的效果；煙火粒子在下落的時候，是受重力的影響，vy = vt + 9.8 *
t；而粒子的顏色部份，初始時使用亂數來決定RGB值，而在粒子生命進入倒數時，改變為紅色，最後再改變為藍色，以配合夜空的顏色，讓粒子有燃燒殆盡的感
覺。<br>

      <br>


在移動的方面，由於螢幕大小有限，所以讓一個像素代表實際移動一公尺，以免粒子因重力加速度的影響，一下子就跑出螢幕外了。<br>

      <br>


大部份的模擬是如此，其它的請自己看看 <a href="https://openhome.cc/Gossip/ComputerGraphics/applet/Firework.html">實例</a>，目前還沒有加上煙的效果。


      <br>










      
      <ul>

        <li> Firework.java
  </li>

      
      </ul>



      
      <pre class="prettyprint"><code>package cc.openhome.particle;<br><br>import java.awt.*;<br>import javax.swing.JApplet;<br><br>import static java.lang.Math.*;<br><br>public class Firework extends JApplet implements Runnable {<br>    private final int MAX = 200;<br>    private FireworkParticle[] particles; // 煙火粒子<br>    private int xCenter, yCenter;<br>    private Image offScreen;<br>    private Graphics gOffScreen;<br><br>    public void init() {<br>        setSize(640, 480);<br>        setBackground(Color.black); // 背景為黑色<br>        particles = new FireworkParticle[MAX]; // 建立粒子<br><br>        // 煙火初始位置<br>        xCenter = (int) (getWidth() / 2 + random() * 150 - 150);<br>        yCenter = (int) (getHeight() / 2 + random() * 150 - 150);<br>        for (int i = 0; i &lt; MAX; i++) {<br>            particles[i] = new FireworkParticle();<br>        }<br><br>        // 建立次畫面<br>        offScreen = createImage(getWidth(), getHeight());<br>        gOffScreen = offScreen.getGraphics();<br>    }<br><br>    public void start() {<br>        (new Thread(this)).start();<br>    }<br><br>    public void update(Graphics g) {<br>        paint(g);<br>    }<br><br>    public void paint(Graphics g) {<br>        g.drawImage(offScreen, 0, 0, this);<br>    }<br><br>    public void run() {<br>        while (true) {<br>            boolean replay = true;<br>            for (FireworkParticle particle : particles) {<br>                if (particle.isAlive()) {<br>                    replay = false;<br>                    break;<br>                }<br>            }<br>            // 是否重新施放<br>            if (replay) {<br>                for (FireworkParticle particle : particles) {<br>                    particle.resume(xCenter, yCenter, MAX);<br>                    particle.setLife((int) (random() * 20));<br>                }<br>            }<br>            gOffScreen.clearRect(0, 0, getWidth(), getHeight());<br>            for (FireworkParticle particle : particles) {<br>                if (particle.isAlive()) {<br>                    double x = particle.getPoint().getX();<br>                    double y = particle.getPoint().getY();<br>                    gOffScreen.setColor(particle.getColor());<br>                    gOffScreen.fillOval((int) x, (int) y, 3, 3);<br>                    particle.nextState();<br>                }<br>            }<br><br>            // 重繪畫面<br>            repaint();<br><br>            // 暫停執行緒 150 毫秒<br>            try {<br>                Thread.sleep(150);<br>            } catch (InterruptedException e) {<br>                e.printStackTrace();context.stroke();<br>            }<br>        }<br>    }<br>}<br><br>class FireworkParticle {<br>    private final static Color LIFE_LESS_5 = new Color(255, 0, 0);<br>    private final static Color LIFE_LESS_2 = new Color(0, 0, 255);<br>    private Point position = new Point();  // 粒子的位置<br>    private double vx, vy;   // 粒子的速度<br>    private int life;       // 粒子的生命值<br>    private Color color; // 粒子的顏色<br>    private int time;  // 粒子存活至今的時間<br><br>    void resume(int x, int y, int max) {<br>        position.setLocation(x, y);<br>        vx = random() * max - random() * max;<br>        vy = random() * max - random() * max;<br>        color = new Color((int) (random() * 255),<br>                          (int) (random() * 255),<br>                          (int) (random() * 255));<br>        time = 0;<br>    }<br><br>    void setLife(int life) {<br>        this.life = life;<br>    }<br><br>    boolean isAlive() {<br>        return life != 0;<br>    }<br><br>    Point getPoint() {<br>        return position;<br>    }<br><br>    Color getColor() {<br>        return color;<br>    }<br><br>    void nextState() {<br>        vy += 9.8 * time;<br>        position.setLocation(<br>                position.getX() + vx * 0.1,<br>                position.getY() + vy * 0.1);<br>        life--;<br>        time++;<br>        if (life &lt; 2) {<br>            color = LIFE_LESS_2;<br>        } else if (life &lt; 5) {<br>            color = LIFE_LESS_5;<br>        }<br>    }<br>}<br></code></pre>


      <br>
      以下是使用HTML5 Canvas的方式（如果瀏覽器支援HTML5 Canvas，例如最新版的Firexfox、Chrome、IE9等，可以直接將下面的內容存為HTML或按下檔名連結，直接載入瀏覽器執行觀看結果：<br>
      
      <ul>
        <li><a href="https://openhome.cc/Gossip/ComputerGraphics/html/FireWork-1.html">FireWork-1.html</a></li>
      </ul>
      <pre class="prettyprint"><code>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;meta content="text/html; charset=Big5" http-equiv="content-type"&gt;<br>        &lt;script type="text/javascript"&gt;<br>            window.onload = function() {<br>                function Color(r, g, b) {<br>                    this.r = r;<br>                    this.g = g;<br>                    this.b = b;<br>                    this.toString = function() {<br>                        return 'rgb(' + <br>                           [this.r, this.g, this.b].join() + ')';<br>                    };<br>                }<br>                <br>                function Point(x, y) {<br>                    this.x = x || 0;<br>                    this.y = y || 0;<br>                    this.setLocation = function(x, y) {<br>                        this.x = x;<br>                        this.y = y;<br>                    };<br>                }<br>                <br>                function FireworkParticle() {<br>                    var LIFE_LESS_5 = new Color(255, 0, 0);<br>                    var LIFE_LESS_2 = new Color(0, 0, 255);<br>                    var position = new Point();  // 粒子的位置<br>                    var vx = vy = 0;             // 粒子的速度<br>                    var color = null;            // 粒子的顏色<br>                    var time = 0;                // 粒子存活至今的時間<br>                    this.life = 0;               // 粒子的生命值<br><br>                    this.resume = function(x, y, max) {<br>                        position.setLocation(x, y);<br>                        vx = Math.random() * max - Math.random() * max;<br>                        vy = Math.random() * max - Math.random() * max;<br>                        color = new Color(parseInt(Math.random() * 255),<br>                                          parseInt(Math.random() * 255),<br>                                          parseInt(Math.random() * 255));<br>                        time = 0;<br>                    };<br><br>                    this.isAlive = function() {<br>                        return this.life &gt; 0;<br>                    };<br><br>                    this.getPoint = function() {<br>                        return position;<br>                    };<br><br>                    this.getColor = function() {<br>                        return color;<br>                    };<br><br>                    this.nextState = function() {<br>                         vy += 9.8 * time;<br>                         position.setLocation(<br>                             position.x + vx * 0.1,<br>                             position.y + vy * 0.01);<br>                         this.life--;<br>                         time++;<br>                         if (this.life &lt; 2) {<br>                             color = LIFE_LESS_2;<br>                         } else if(this.life &lt; 5) {<br>                             color = LIFE_LESS_5;<br>                         }<br>                    };<br>                }<br><br><br>                var canvas1 = document.getElementById('canvas1');<br>                var canvas2 = document.getElementById('canvas2');<br>                var context1 = canvas1.getContext('2d');<br>                var context2 = canvas2.getContext('2d');<br>                <br>                <br>                var MAX = 200;<br>                <br>                var particles = []; // 建立粒子<br>                                  <br>                for(var i = 0; i &lt; MAX; i++) {<br>                    particles[i] = new FireworkParticle();<br>                }             <br><br>                var context = context2;<br>                setTimeout(function() {<br>                    var replay = true;<br>                    for(var i in particles) {<br>                       if(particles[i].isAlive()) {<br>                           replay = false;<br>                           break;<br>                       }<br>                    }<br>                    <br>                    // 是否重新施放<br>                    if(replay) {<br>                        for(var i in particles) {<br>                            // 煙火初始位置<br>                            var xCenter = canvas1.width / 2 + <br>                                  Math.random() * 150 - 150;<br>                            var yCenter = canvas1.height / 2.5 + <br>                                  Math.random() * 150 - 150;<br>                            particles[i].resume(xCenter, yCenter, MAX);<br>                            particles[i].life = <br>                                  parseInt(Math.random() * 20);<br>                        }<br>                    }<br>                    context.fillStyle = 'rgb(0, 0, 0)';<br>                    context.fillRect(0, 0, canvas1.width, canvas1.height);<br>                    for(var i in particles) {<br>                        if(particles[i].isAlive()) {<br>                            var x = particles[i].getPoint().x;<br>                            var y = particles[i].getPoint().y;<br>                            context.fillStyle = <br>                                particles[i].getColor().toString();<br>                            context.beginPath();<br>                            context.arc(x, y, 2, 0, 2 * Math.PI, true);<br>                            context.closePath();<br>                            context.fill();<br>                            particles[i].nextState();<br>                        }<br>                    }<br>                    <br>                    <br>                    if(context === context2) {<br>                        document.body.replaceChild(canvas2, canvas1);<br>                        context = context1;<br>                    }<br>                    else {<br>                        document.body.replaceChild(canvas1, canvas2);<br>                        context = context2;<br>                    }<br>                    <br>                    setTimeout(arguments.callee, 200);<br>                }, 200);<br>            };<br>        &lt;/script&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;       <br>        &lt;canvas id="canvas1" width="640" height="480"&gt;&lt;/canvas&gt;<br>        &lt;canvas id="canvas2" width="640" height="480"&gt;&lt;/canvas&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre><br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
