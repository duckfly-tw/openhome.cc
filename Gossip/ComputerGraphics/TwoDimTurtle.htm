<!doctype html><html lang="zh-tw">
<head>
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="海龜繪圖法取名海龜並不是因為它的速度像烏龜，而是它繪圖的方式就像海龜前進的方式。



      




考慮海龜只能前進的情況（我也不知道海龜能不能倒著游？），在2D的情況下，...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="二維海龜繪圖法">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/ComputerGraphics/TwoDimTurtle.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="海龜繪圖法取名海龜並不是因為它的速度像烏龜，而是它繪圖的方式就像海龜前進的方式。



      




考慮海龜只能前進的情況（我也不知道海龜能不能倒著游？），在2D的情況下，...">


    <title>二維海龜繪圖法</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="TwoDimTurtle.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回電腦圖學</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>二維海龜繪圖法</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
            
      







海龜繪圖法取名海龜並不是因為它的速度像烏龜，而是它繪圖的方式就像海龜前進的方式。<br>



      <br>




考慮海龜只能前進的情況（我也不知道海龜能不能倒著游？），在2D的情況下，也就是海龜只在一個XY平面運動的情況下，海龜的運動基本上只有前進與轉彎兩個動作，由此開始聯想，定出海龜繪圖法的幾個基本方法： <br>



      <br>



      
















      
      
      
      <ul>



        <li>設定海龜起始位置</li>



      
      
      
      </ul>




      
      
      
      <div style="margin-left: 40px;">也就是將海龜直接放至某個(x, y)座標，而不進行任何的繪製動作。 <br>




      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/twoDimTurtle-1.jpg" /></div></div><br>




      </div>



















      <br>



      <br>



      

      
      
      
      <ul>



        <li>海龜由目前位置游至指定座標</li>



      
      
      
      </ul>




      
      
      
      <div style="margin-left: 40px;">由目前位置游至(x, y)位置，並在經過的路徑畫上直線。 <br>




      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/twoDimTurtle-2.jpg" /></div></div><br>




      </div>




      <br>



      <br>



      

      
      
      
      <ul>



        <li>海龜由目前位置游動L長度</li>



      
      
      
      </ul>




      
      
      
      <div style="margin-left: 40px;">無論海龜目前的頭朝向哪一個角度，由目前位置與角度游動L長度，並在經過的路徑上畫上直線。<br>




      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/twoDimTurtle-3.jpg" /></div></div><br>




      </div>




      <br>



      <br>



      

      
      
      
      <ul>



        <li>設定海龜目前頭朝向的角度</li>



      
      
      
      </ul>




      
      
      
      <div style="margin-left: 40px;">角度的計算是以正X軸及頭所成的角度來計算。 <br>




      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/twoDimTurtle-4.jpg" /></div></div><br>




      </div>




      <br>



      <br>



      

      
      
      
      <ul>



        <li>旋轉海龜的頭為指定的角度θ</li>



      
      
      
      </ul>




      
      
      
      <div style="margin-left: 40px;">即目前已成的角度 a 再加上θ，也就是與正X軸最後會成a+θ。 <br>




      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/twoDimTurtle-5.jpg" /></div></div><br>




      </div>




      <br>



      <br>





有了以上幾個基本方法，就可以進行各種圖案的繪圖，或是直接擴充海龜繪圖的方法，例如若要在目前的位置上繪製出一個正三角型，由海龜游動的方式，&nbsp;可以如下繪製圖形： <br>



      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/twoDimTurtle-6.jpg" /></div></div><br>



      <br>




如果要繪製實心的三角形，在撰寫方法時，在海龜游動的同時，記下三個頂點的座標，再呼叫API所提供的繪製實心多邊形方法即可。<br>



      <br>




如果要繪製點，可以如下結合兩個基本的海龜繪圖方法： <br>



      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/twoDimTurtle-7.jpg" /></div></div><br>



      <br>




依照以下的描述，您可以自由撰寫並擴充您的海龜繪圖法，使繪圖的功能更加豐富，下面這個Java程式改寫自 <a href="http://www.drmaster.com.tw/info.asp?no=PG20098">Java 於演算法與資料結構之應用</a>，在這邊僅提供程式碼作為參考，解說部份請徑自參考原書： 





      <br>




      
      
      
      <ul>



        <li> Turtle.java
  </li>



      
      
      
      </ul>





      
      
      
      <pre class="prettyprint"><code>package cc.openhome;<br><br>import java.awt.*;<br><br>public class Turtle {<br>    public double angle;  // current angle<br>    public double currentX, currentY;   // current position<br>    private double wx1, wy1, wx2, wy2; // canvas coordination<br>    private double vx1, vy1, vx2, vy2; // viewable area<br>    private double factX, factY;      // scale<br>    private Graphics g;<br><br>    public void setGraphics(Graphics g) {<br>        this.g = g;<br>    }<br><br>    public Graphics getGraphics() {<br>        return g;<br>    }<br><br>    public double getCurrentX() {<br>        return currentX;<br>    }<br><br>    public double getCurrentY() {<br>        return currentY;<br>    }<br><br>    public void window(double x1, double y1, double x2, double y2) {<br>        wx1 = x1;<br>        wy1 = y1;<br>        wx2 = x2;<br>        wy2 = y2;<br>        factX = (vx2 - vx1) / (wx2 - wx1);<br>        factY = (vy2 - vy1) / (wy2 - wy1);<br>    }<br><br>    public void view(double x1, double y1, double x2, double y2) {<br>        g.setClip((int) x1, (int) y1, (int) (x2 - x1), (int) (y2 - y1));<br>        vx1 = x1;<br>        vy1 = y1;<br>        vx2 = x2;<br>        vy2 = y2;<br>        factX = (vx2 - vx1) / (wx2 - wx1);<br>        factY = (vy2 - vy1) / (wy2 - wy1);<br>    }<br><br>    public void warp(double l) {<br>        setPoint(currentX + l * Math.cos(Math.toRadians(angle)), <br>                 currentY + l * Math.sin(Math.toRadians(angle)));<br>    }<br><br>    public void move(double l) {<br>        double x = currentX + l * Math.cos(Math.toRadians(angle));<br>        double y = currentY + l * Math.sin(Math.toRadians(angle));<br>        double x1 = (currentX - wx1) * factX + vx1;<br>        double y1 = (wy2 - currentY) * factY + vy1;<br>        double x2 = (x - wx1) * factX + vx1;<br>        double y2 = (wy2 - y) * factY + vy1;<br>        g.drawLine((int) x1, (int) y1, (int) x2, (int) y2);<br>        setPoint(x, y);<br>    }<br><br>    public void moveTo(double x, double y) {<br>        double x1 = (currentX - wx1) * factX + vx1;<br>        double y1 = (wy2 - currentY) * factY + vy1;<br>        double x2 = (x - wx1) * factX + vx1;<br>        double y2 = (wy2 - y) * factY + vy1;<br>        g.drawLine((int) x1, (int) y1, (int) x2, (int) y2);<br>        setPoint(x, y);<br>    }<br><br>    public void setPoint(double x, double y) {<br>        currentX = x;<br>        currentY = y;<br>    }<br><br>    public void pset(double x, double y) {<br>        setPoint(x, y);<br>        moveTo(x, y);<br>    }<br><br>    public void line(double x1, double y1, double x2, double y2) {<br>        setPoint(x1, y1);<br>        moveTo(x2, y2);<br>    }<br><br>    public void turn(double a) {<br>        angle = angle + a;<br>        angle = angle % 360;<br>    }<br><br>    public void setAngle(double angle) {<br>        this.angle = angle;<br>    }<br>}</code></pre>




      <br>
      以下是使用HTML 5 Canvas時的JavaScript實作：<br>
      
      <ul>
        <li>turtle.js</li>
      </ul>
      <pre class="prettyprint"><code>function Turtle(context) {<br>    function toRadians(angle) {<br>        return angle * Math.PI / 180;<br>    }<br>    <br>    function drawLine(x1, y1, x2, y2) {<br>        context.beginPath();<br>        context.moveTo(x1, y1);<br>        context.lineTo(x2, y2);<br>        context.stroke();<br>    }<br>    <br>    this.angle                               // current angle<br>        = this.currentX = this.currentY = 0; // current position<br>        <br>    var wx1 = wy1 = wx2 = wy2                // canvas coordination<br>        = vx1 = vy1 = vx2 = vy2              // viewable area<br>        = factX = factY = 0;                 // scale <br>        <br>    this.context = context;<br>    <br>    this.window = function(x1, y1, x2, y2) {<br>        wx1 = x1;<br>        wy1 = y1;<br>        wx2 = x2;<br>        wy2 = y2;<br>        factX = (vx2 - vx1) / (wx2 - wx1);<br>        factY = (vy2 - vy1) / (wy2 - wy1);    <br>    };<br>    <br>    this.view = function(x1, y1, x2, y2) {<br>        this.context.beginPath();<br>        this.context.rect(x1, y1, x2 - x1, y2 - y1);<br>        this.context.clip();<br>        this.context.stroke();<br>        this.context.closePath();<br>        vx1 = x1;<br>        vy1 = y1;<br>        vx2 = x2;<br>        vy2 = y2;<br>        factX = (vx2 - vx1) / (wx2 - wx1);<br>        factY = (vy2 - vy1) / (wy2 - wy1);<br>    };<br>    <br>    this.setPoint = function(x, y) {<br>        this.currentX = x;<br>        this.currentY = y;<br>    };<br>    <br>    this.setAngle = function(a) {<br>        this.angle = a;<br>    };<br>    <br>    this.warp = function(l) {<br>        this.setPoint(this.currentX + l * Math.cos(toRadians(this.angle)),<br>                      this.currentY + l * Math.sin(toRadians(this.angle)));<br>    };<br>    <br>    this.move = function(l) {<br>        var x = this.currentX + l * Math.cos(toRadians(this.angle));<br>        var y = this.currentY + l * Math.sin(toRadians(this.angle));<br>        var x1 = (this.currentX - wx1) * factX + vx1;<br>        var y1 = (wy2 - this.currentY) * factY + vy1;<br>        var x2 = (x - wx1) * factX + vx1;<br>        var y2 = (wy2 - y) * factY + vy1;<br>        drawLine(x1, y1, x2, y2);<br>        this.setPoint(x, y);<br>    };<br>    <br>    this.moveTo = function(x, y) {<br>        var x1 = (this.currentX - wx1) * factX + vx1;<br>        var y1 = (wy2 - this.currentY) * factY + vy1;<br>        var x2 = (x - wx1) * factX + vx1;<br>        var y2 = (wy2 - y) * factY + vy1;<br>        drawLine(x1, y1, x2, y2);<br>        this.setPoint(x, y);  <br>    };<br>    <br>    this.pset = function(x, y) {<br>        drawLine(x, y, x + 1, y + 1);<br>    };<br>    <br>    this.line = function(x1, y1, x2, y2) {<br>        this.setPoint(x1, y1);<br>        this.moveTo(x2, y2);<br>    };<br>     <br>    this.turn = function(a) {<br>        this.angle = this.angle + a;<br>        this.angle = this.angle % 360;<br>    };<br>}<br></code></pre>
      <br>
<br><br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
