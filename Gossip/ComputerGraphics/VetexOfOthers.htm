<!doctype html><html lang="zh-tw">
<head>
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="由於旋轉體、錐狀體、柱狀體的幾何性質，使得它們的頂點配置具有規則而容易以運算來進行配置，觀念上十分簡單。



      
      
      旋轉體

      

假...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="旋轉體、錐狀體、柱狀體頂點">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/ComputerGraphics/VetexOfOthers.htm">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="由於旋轉體、錐狀體、柱狀體的幾何性質，使得它們的頂點配置具有規則而容易以運算來進行配置，觀念上十分簡單。



      
      
      旋轉體

      

假...">


    <title>旋轉體、錐狀體、柱狀體頂點</title>

<link rel="stylesheet" href="../css/pure-0.6.0/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="../css/layouts/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="../css/caterpillar.css">
     <script async src="../google-code-prettify/run_prettify.js"></script>
<!-- 網頁層級廣告 --><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="VetexOfOthers.htm#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="index.html">回電腦圖學</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="../images/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="../images/facebook.png"></a> </div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><gcse:searchbox-only></gcse:searchbox-only></div><br><div class="ad" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle"
     style="display:inline-block;width:160px;height:600px"
     data-ad-client="ca-pub-9750319131714390"
     data-ad-slot="3747048883"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div></li>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>旋轉體、錐狀體、柱狀體頂點</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
            







由於旋轉體、錐狀體、柱狀體的幾何性質，使得它們的頂點配置具有規則而容易以運算來進行配置，觀念上十分簡單。<br>



      
      
      <h2>旋轉體</h2>

      

假設旋轉體是繞著Y軸旋轉，則可以先定義出一條錂線上的頂點，與它們各自距Y軸的距離，接下來只要旋轉這些頂點，就可以得出旋轉體所有的頂點，如下所示：<br>









      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/vetexOfOthers-1.jpg" /></div></div><br>









      <br>

      

真實世界中的旋轉體很多，所以這個方法可以畫出各種不同的旋轉體；下面這個程式畫出一個高腳杯，它不儲存頂點，而直接利用運算後的頂點來繪製酒杯的骨架，採取的方法是先用迴圈畫圈圈，再由一次迴圈來畫錂線： <br>










      
      
      <ul>


        <li> Demo.java</li>


      
      
      </ul>









      
      
      <pre class="prettyprint"><code>package cc.openhome;<br><br>import java.awt.Color;<br>import java.awt.Graphics;<br>import javax.swing.JApplet;<br><br>import static java.lang.Math.*;<br><br>public class Demo extends JApplet {<br>    private final static double[] Y_LOCATIONS =<br>                     {180, 140, 100, 60, 20, 10, 4, 0};<br>    private final static double[] R_DISTANCES =<br>                     {100, 55, 10, 10, 10, 50, 80, 80};<br>    private int orgX;<br>    private int orgY;<br><br>    public void init() {<br>        super.init();<br>        setBackground(Color.black);<br>        setSize(300, 300);<br>        orgX = getWidth() / 3;<br>        orgY = getHeight() - 80;<br>    }<br><br>    public void paint(Graphics g) {<br>        g.setColor(Color.yellow);<br>        drawCircle(g);<br>        drawLine(g);<br>    }<br><br>    private void drawCircle(Graphics g) {<br>        // 360 度畫圈<br>        for (int i = 0; i &lt; Y_LOCATIONS.length; i++) {<br>            // 我們要畫線段，所以求出第一點不用畫<br>            double x = R_DISTANCES[i] * cos(0);<br>            double z = R_DISTANCES[i] * sin(0);<br>            int startX = orgX + xAfterRotateAroundXZ(x, Y_LOCATIONS[i], z);<br>            int startY = orgY - yAfterRotateAroundXZ(x, Y_LOCATIONS[i], z);<br>            for (int j = 1; j &lt;= 360; j += 10) {<br>                // 計算 x, z 座標<br>                x = R_DISTANCES[i] * cos(toRadians(j));<br>                z = R_DISTANCES[i] * sin(toRadians(j));<br>                // 立體旋轉，從斜角繪製，調整繪圖中心至視窗中心<br>                int endX = orgX + xAfterRotateAroundXZ(x, Y_LOCATIONS[i], z);<br>                int endY = orgY - yAfterRotateAroundXZ(x, Y_LOCATIONS[i], z);<br>                g.drawLine(startX, startY, endX, endY);<br>                startX = endX;<br>                startY = endY;<br>            }<br>        }<br>    }<br><br>    private void drawLine(Graphics g) {<br>        // 畫錂線<br>        for (int j = 0; j &lt;= 360; j += 60) {<br>            // 我們要畫線段，所以求出第一點不用畫<br>            double x = R_DISTANCES[0] * cos(toRadians(j));<br>            double z = R_DISTANCES[0] * sin(toRadians(j));<br>            int startX = orgX + xAfterRotateAroundXZ(x, Y_LOCATIONS[0], z);<br>            int startY = orgY - yAfterRotateAroundXZ(x, Y_LOCATIONS[0], z);<br>            for (int i = 1; i &lt; Y_LOCATIONS.length; i++) {<br>                x = R_DISTANCES[i] * cos(toRadians(j));<br>                z = R_DISTANCES[i] * sin(toRadians(j));<br>                // 立體旋轉，從斜角繪製，調整繪圖中心至視窗中心<br>                int endX = orgX + xAfterRotateAroundXZ(x, Y_LOCATIONS[i], z);<br>                int endY = orgY - yAfterRotateAroundXZ(x, Y_LOCATIONS[i], z);<br>                g.drawLine(startX, startY, endX, endY);<br>                startX = endX;<br>                startY = endY;<br>            }<br>        }<br>    }<br><br>    private int xAfterRotateAroundXZ(double x, double y, double z) {<br>        // 從斜角繪製<br>        // 繞 x 軸轉 30 度，繞 z 軸轉 -25 度<br>        double rotateX = toRadians(30);<br>        double rotateZ = toRadians(-25);<br>        return (int) (x * cos(rotateZ) -<br>                     (y * cos(rotateX) - z * sin(rotateX)) * sin(rotateZ));<br>    }<br><br>    private int yAfterRotateAroundXZ(double x, double y, double z) {<br>        // 從斜角繪製<br>        // 繞 x 軸轉 30 度，繞 z 軸轉 -25 度<br>        double rotateX = toRadians(30);<br>        double rotateZ = toRadians(-25);<br>        return (int) (x * sin(rotateZ) +<br>                     (y * cos(rotateX) - z * sin(rotateX)) * cos(rotateZ));<br>    }<br>}</code></pre><br>
      以下是使用HTML5 Canvas的方式（如果瀏覽器支援HTML5 Canvas，例如最新版的Firexfox、Chrome、IE9等，可以直接將下面的內容存為HTML或按下檔名連結，直接載入瀏覽器執行觀看結果：<span class="Apple-style-span" style="border-collapse: separate; color: rgb(0, 0, 0); font-family: Arial; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; font-size: medium;"><span class="Apple-style-span" style="font-family: serif; font-size: 13px; text-align: left;">
      </span></span>
      <ul>
        <li><span class="Apple-style-span" style="border-collapse: separate; color: rgb(0, 0, 0); font-family: Arial; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; font-size: medium;"><span class="Apple-style-span" style="font-family: serif; font-size: 13px; text-align: left;"><a href="https://openhome.cc/Gossip/ComputerGraphics/html/VetexOfOthers-1.html">VetexOfOthers-1.html</a></span></span></li>
      </ul>
      <pre class="prettyprint"><code>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;meta content="text/html; charset=Big5" http-equiv="content-type"&gt;<br>        &lt;script type="text/javascript"&gt;<br>            window.onload = function() {<br>                function toRadians(angle) {<br>                    return angle * Math.PI / 180;<br>                }<br>                <br>                var sin = Math.sin;<br>                var cos = Math.cos;<br>                var sqrt = Math.sqrt;<br>                <br>                function xAfterRotateAroundXZ(x, y, z) {<br>                    // 從斜角繪製<br>                    // 繞 x 軸轉 30 度，繞 z 軸轉 -25 度<br>                    var rotateX = toRadians(30);<br>                    var rotateZ = toRadians(-25);<br>                    return parseInt(x * cos(rotateZ) -<br>                     (y * cos(rotateX) - z * sin(rotateX)) * sin(rotateZ));<br>                }<br>                <br>                function yAfterRotateAroundXZ(x, y, z) {<br>                   // 從斜角繪製<br>                   // 繞 x 軸轉 30 度，繞 z 軸轉 -25 度<br>                   var rotateX = toRadians(30);<br>                   var rotateZ = toRadians(-25);<br>                    return parseInt(x * sin(rotateZ) +<br>                     (y * cos(rotateX) - z * sin(rotateX)) * cos(rotateZ));<br>                }<br>                <br>                var Y_LOCATIONS = [180, 140, 100, 60, 20, 10, 4, 0];<br>                var R_DISTANCES = [100, 55, 10, 10, 10, 50, 80, 80];<br>                <br>                var canvas1 = document.getElementById('canvas1');<br>                var orgX = canvas1.width / 3;<br>                var orgY = canvas1.height - 80;<br>                <br>                var context = canvas1.getContext('2d');<br>                context.beginPath();<br>                <br>                // 360 度畫圈<br>                for(var i = 0; i &lt; Y_LOCATIONS.length; i++) {<br>                    // 我們要畫線段，所以求出第一點不用畫<br>                    var x = R_DISTANCES[i] * cos(0);<br>                    var z = R_DISTANCES[i] * sin(0);<br>                    var startX = orgX + xAfterRotateAroundXZ(<br>                                          x, Y_LOCATIONS[i], z);<br>                    var startY = orgY - yAfterRotateAroundXZ(<br>                                          x, Y_LOCATIONS[i], z);<br>                    context.moveTo(startX, startY);                      <br>                    for(var j = 1; j &lt;= 360; j += 10) {<br>                        // 計算 x, z 座標<br>                        x = R_DISTANCES[i] * cos(toRadians(j));<br>                        z = R_DISTANCES[i] * sin(toRadians(j));<br>                        // 立體旋轉，從斜角繪製，調整繪圖中心至視窗中心<br>                        var endX = orgX + xAfterRotateAroundXZ(<br>                                           x, Y_LOCATIONS[i], z);<br>                        var endY = orgY - yAfterRotateAroundXZ(<br>                        x, Y_LOCATIONS[i], z);<br>                        context.lineTo(endX, endY);<br>                    }<br>                }<br>                <br>                // 畫錂線<br>                for(var j = 0; j &lt;= 360; j += 60) {<br>                    // 我們要畫線段，所以求出第一點不用畫<br>                    var x = R_DISTANCES[0] * cos(toRadians(j));<br>                    var z = R_DISTANCES[0] * sin(toRadians(j));<br>                    var startX = orgX + xAfterRotateAroundXZ(<br>                                          x, Y_LOCATIONS[0], z);<br>                    var startY = orgY - yAfterRotateAroundXZ(x, <br>                                          Y_LOCATIONS[0], z);<br>                    context.moveTo(startX, startY);<br>                    for(var i = 1; i &lt; Y_LOCATIONS.length; i++) {<br>                        x = R_DISTANCES[i] * cos(toRadians(j));<br>                        z = R_DISTANCES[i] * sin(toRadians(j));<br>                        // 立體旋轉，從斜角繪製，調整繪圖中心至視窗中心<br>                        var endX = orgX + xAfterRotateAroundXZ(x, <br>                                             Y_LOCATIONS[i], z);<br>                        var endY = orgY - yAfterRotateAroundXZ(x, <br>                                             Y_LOCATIONS[i], z);<br>                        <br>                        context.lineTo(endX, endY);<br>                    }<br>                }<br>                context.stroke();<br>                context.closePath();<br>            };<br>        &lt;/script&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;       <br>        &lt;canvas id="canvas1" width="300" height="300"&gt;&lt;/canvas&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre>




      <br>



      <span class="Apple-style-span" style="border-collapse: separate; color: rgb(0, 0, 0); font-family: Arial; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; font-size: medium;"><span class="Apple-style-span" style="font-family: serif; font-size: 13px; text-align: left;">在Firefox下的效果如下：<br>
      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/VetexOfOthers-5.png" /></div></div><br>
      <br>
</span></span>
      
      
      <h2> 錐狀體</h2>

      


錐狀體將底面所有的頂點放置在XZ平面上，底面與錐頂點的交點為(xc, 0, yc)，高度為h，則錐頂點的座標為(xc, h,
yc)，如下所示： <br>

      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/vetexOfOthers-3.jpg" /></div></div>

      <br>



      
      
      <h2> 柱狀體</h2>

      


柱狀體將底面所有的頂點放置在XZ平面上，高度為h，則頂點座標配置如下所示：<br>



      <div class="pure-g"><div class="pure-u-1"><img class="pure-img-responsive" alt="" src="images/vetexOfOthers-4.jpg" /></div></div><br><br><br><div class="ad336-280" style="text-align: center;"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div></body>
<script src="../js/ui.js"></script>
</html>
<div class="analytics"><script async src="https://www.googletagmanager.com/gtag/js?id=G-QVQQYFSC8J"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-QVQQYFSC8J');</script></div>
